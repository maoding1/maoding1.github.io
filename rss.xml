<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>MikeMao&#39;s blog</title>
        <link>http://example.com</link>
        <description>a student of NJU who use this website to record learning experience</description>
        <language>zh-CN</language>
        <pubDate>Fri, 24 Mar 2023 14:05:42 +0800</pubDate>
        <lastBuildDate>Fri, 24 Mar 2023 14:05:42 +0800</lastBuildDate>
        <category>C++</category>
        <category>Linux</category>
        <category>git</category>
        <category>Maven</category>
        <category>STL C++</category>
        <category>python 爬虫 计算机网络</category>
        <category>python 爬虫</category>
        <category>编译原理</category>
        <category>TVM 深度学习 机器学习 编译</category>
        <category>python</category>
        <category>爬虫</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/03/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8602-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</guid>
            <title>编译原理02-语法分析</title>
            <link>http://example.com/2023/03/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8602-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</link>
            <category>编译原理</category>
            <pubDate>Fri, 24 Mar 2023 14:05:42 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;编译原理02-语法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译原理02-语法分析&#34;&gt;#&lt;/a&gt; 编译原理 02 - 语法分析&lt;/h1&gt;
&lt;p&gt;主要内容：如何用 antlr4 生成一个语法分析器。手写语法分析器比较困难，不作要求。&lt;/p&gt;
&lt;p&gt;lesson1 任务： 用 cymbol 语言（龙书中提供的一种简化版 c 语言）写一段程序，并生成如下的函数调用关系图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230326120955042.png&#34; alt=&#34;image-20230326120955042&#34;&gt;&lt;/p&gt;
&lt;p&gt;在为自己的语言编写语法分析器时，可能会遇到一些问题。&lt;/p&gt;
&lt;h2 id=&#34;问题一二义性文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题一二义性文法&#34;&gt;#&lt;/a&gt; 问题一：二义性文法&lt;/h2&gt;
&lt;p&gt;考虑下列定义：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324142546278.png&#34; alt=&#34;image-20230324142546278&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if a then if b then c else d&lt;/code&gt;  可以有两种解释&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324142701632.png&#34; alt=&#34;image-20230324142701632&#34;&gt;&lt;/p&gt;
&lt;p&gt;龙书上给的无二义性语法：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324143323221.png&#34; alt=&#34;image-20230324143323221&#34;&gt;&lt;/p&gt;
&lt;p&gt;难题是如何证明没有二义性（见龙书）&lt;/p&gt;
&lt;p&gt;在 antlr4 中，写在前面的定义如果能被匹配到，就会优先选择写在前面的定义，以防止歧义出现的错误。&lt;/p&gt;
&lt;h3 id=&#34;运算符的结合性带来的二义性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符的结合性带来的二义性&#34;&gt;#&lt;/a&gt; 运算符的结合性带来的二义性&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324143744282.png&#34; alt=&#34;image-20230324143744282&#34;&gt;&lt;/p&gt;
&lt;p&gt;没有规定是左结合还是右结合，可以有两种解释，导致结果不一样。&lt;/p&gt;
&lt;p&gt;antlr4 规定运算符默认是左结合的，以消除这种歧义。&lt;/p&gt;
&lt;p&gt;如何明确指明是右结合的（如乘方运算符要规定为右结合的）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324143947465.png&#34; alt=&#34;image-20230324143947465&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;运算符优先级带来的二义性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符优先级带来的二义性&#34;&gt;#&lt;/a&gt; 运算符优先级带来的二义性&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324144400266.png&#34; alt=&#34;image-20230324144400266&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 antlr4 里，写在前面的运算符优先级更高。&lt;/p&gt;
&lt;p&gt;如果不是 antlr4，比如在某些比较古老的工具中，需要我们自己处理。&lt;/p&gt;
&lt;h2 id=&#34;如何根据代码生成函数调用图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何根据代码生成函数调用图&#34;&gt;#&lt;/a&gt; 如何根据代码生成函数调用图&lt;/h2&gt;
&lt;p&gt;先用 antlr4 生成语法分析树，然后用 dfs 方法遍历语法树。&lt;/p&gt;
&lt;h3 id=&#34;铺垫&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#铺垫&#34;&gt;#&lt;/a&gt; 铺垫&lt;/h3&gt;
&lt;p&gt;antlr4 提供了 listener, 在 antlr 帮我们遍历语法树时，当 antlr4 进入一类节点时，会触发 enter 节点事件，离开时会触发 exit 节点事件。&lt;/p&gt;
&lt;p&gt;问题：需要细分，比如函数调用和 赋值语句都是 expr，那么进入 expr 节点的时候都会触发 enterExpr 事件，不好针对特定情况处理。&lt;/p&gt;
&lt;p&gt;情况一：&lt;/p&gt;
&lt;p&gt;​	function call 和 赋值语句都是 expr，因此触发了 enterExpr 时间后也无法细分是哪类 expr。&lt;/p&gt;
&lt;p&gt;解决方法：在 g4 文件对应的定义后加上  &lt;code&gt;# fuctioncall&lt;/code&gt; , 要加的话后面的也要加上&lt;/p&gt;
&lt;p&gt;情况二： &lt;code&gt;expr (&#39;*&#39; |  &#39;/&#39;) expr&lt;/code&gt;  被定义为 MutiDiv, 则进入 MutiDiv 的时候不知道是还是除法。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt; expr (op = &#39;*&#39; | op = &#39;/&#39;) expr&lt;/code&gt;  进入时判断变量 op 的值是什么便可&lt;/p&gt;
&lt;h2 id=&#34;如何生成一个调用图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何生成一个调用图&#34;&gt;#&lt;/a&gt; 如何生成一个调用图&lt;/h2&gt;
&lt;p&gt;按 Graphviz 语法编写.dot 文件，会自动生成调用图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230326201151771.png&#34; alt=&#34;image-20230326201151771&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;lab2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lab2&#34;&gt;#&lt;/a&gt; lab2&lt;/h2&gt;
&lt;h3 id=&#34;实验内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验内容&#34;&gt;#&lt;/a&gt; 实验内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本次实验需要完成语法分析与高亮，要求如下
&lt;ul&gt;
&lt;li&gt;根据实验指导内提供的文档完成 SysyParser.g4 并将 SysYParser.g4 中按下面已经给出的写法将 exp 和 cond 写成左递归&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;输入文件存在语法错误时&lt;/strong&gt;：输出语法错误在哪一行，格式为 &lt;code&gt;Error type B at Line [lineNo]:[errorMessage]&lt;/code&gt;  其中 lineNo 为出错的 token 首个字符所在行的行号，errorMessage 可自行定义，本实验不做要求，只要冒号前的信息正确即可，需要输出所有的错误&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;输入文件不存在语法错误时&lt;/strong&gt;：按照规定格式输出语法树 (含高亮)，输出格式详见&lt;strong&gt;样例一&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用 ** 标准错误输出（System.err）** 打印所有运行结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验过程&#34;&gt;#&lt;/a&gt; 实验过程&lt;/h2&gt;
&lt;p&gt;仍然需要重写 BaseErrorListener 实现一个自己的 myErrorListener。与实验一不同的是，除法 ErrorListener 的方式不同，本次实验要在语法分析的过程中进行错误检查。改写的 main 函数如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input path is required&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; source &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;CharStream&lt;/span&gt; input &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CharStreams&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fromFileName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;source&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		SysYLexer sysYLexer = new SysYLexer(input);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		sysYLexer.removeErrorListeners();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		sysYLexer.addErrorListener(new myErrorListener());&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		List&amp;lt;Token&gt; tokens = (List&amp;lt;Token&gt;) sysYLexer.getAllTokens();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;SysYLexer&lt;/span&gt; sysYLexer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYLexer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;CommonTokenStream&lt;/span&gt; tokens &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CommonTokenStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;SysYParser&lt;/span&gt; parser &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYParser&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tokens&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		parser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;removeErrorListeners&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		parser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;ParseTree&lt;/span&gt; tree &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; parser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;Visitor&lt;/span&gt; visitor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		visitor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		String[] rulenames = sysYLexer.getRuleNames();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		for (Token token : tokens) &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//			String tokenType = rulenames[token.getType()-1];&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//			String tokenText = toDemical(token.getText());&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//			String tokenLine = &#34;&#34;+token.getLine();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//			System.err.println(tokenType + &#34; &#34; + tokenText + &#34; at Line &#34;+tokenLine+&#39;.&#39;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中注释掉的部分是实验一的代码。这次要将 errorlistener 加到语法分析器 parser 上 并且利用 parser.program () 触发错误检查并生成语法树。注意，之所以用 program () 方法当做入口方法是因为 SysYParser.g4 的定义中 program 是最高的语言层次。&lt;/p&gt;
&lt;p&gt;本次实验最重要的内容就是重写了一个继承自 SysYParserBaseVisitor 的类 Vistor 代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Visitor&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYParserBaseVisitor&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; depth &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;visitChildren&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RuleNode&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defaultResult&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt; sb &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;  &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; depth&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuleContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuleIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; ruleName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYParser&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ruleNames&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			ruleName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toUpperCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ruleName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;charAt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; ruleName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ruleName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getChildCount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shouldVisitNextChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				depth &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;ParseTree&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt; childResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;aggregateResult&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; childResult&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				depth &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;visitTerminal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;TerminalNode&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt; sb &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;  &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; depth&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSymbol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;ruleNames&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toDemical&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getText&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ruleNames&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ruleNames &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;CONST[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;INT[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;VOID[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IF[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ELSE[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;WHILE[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;BREAK[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;CONTINUE[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;RETURN[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;PLUS[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MINUS[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MUL[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;DIV[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MOD[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ASSIGN[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;EQ[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;NEQ[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;LT[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;GT[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;LE[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;GE[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;NOT[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;AND[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;OR[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IDENT[red]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;INTEGER_CONST[green]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;visitChildren 是当 dfs 遍历每个语法节点时都会触发的方法，一开始没有想到在遍历某个节点时如何得到该节点的深度，后面通过维护一个全局变量 depth 来实现。当进入节点前 depth 会 + 1 退出时会 - 1。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230328210917158.png&#34; alt=&#34;image-20230328210917158&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里简单的把 accept 方法理解为会调用 visitor.visitChildren (currentnode) 的函数就好了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/03/23/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/%E5%AD%A6%E6%A0%A1%E5%90%8D%E7%A7%B0%E5%8C%B9%E9%85%8D/</guid>
            <title></title>
            <link>http://example.com/2023/03/23/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/%E5%AD%A6%E6%A0%A1%E5%90%8D%E7%A7%B0%E5%8C%B9%E9%85%8D/</link>
            <pubDate>Thu, 23 Mar 2023 17:25:08 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;问题 1：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C13584%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230323165638808.png&#34; alt=&#34;image-20230323165638808&#34;&gt;&lt;/p&gt;
&lt;p&gt;为什么是覆盖填写 如果有多个相似度大于阈值的学校呢&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/03/16/nova%E2%80%94%E2%80%94%E9%AB%98%E8%80%83%E7%BD%91%E7%AB%99%E5%AD%A6%E6%A0%A1%E5%90%8D%E7%A7%B0%E7%88%AC%E5%8F%96/</guid>
            <title>nova——高考网站学校名称爬取</title>
            <link>http://example.com/2023/03/16/nova%E2%80%94%E2%80%94%E9%AB%98%E8%80%83%E7%BD%91%E7%AB%99%E5%AD%A6%E6%A0%A1%E5%90%8D%E7%A7%B0%E7%88%AC%E5%8F%96/</link>
            <category>python 爬虫 计算机网络</category>
            <pubDate>Thu, 16 Mar 2023 20:06:14 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;nova项目-高考网站学校名称爬取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nova项目-高考网站学校名称爬取&#34;&gt;#&lt;/a&gt; nova 项目 - 高考网站学校名称爬取&lt;/h1&gt;
&lt;p&gt;任务：在高考特殊类型招生报名网站中爬取全中国的中学名称&lt;/p&gt;
&lt;p&gt;但是遭遇了强大的反爬措施 遂把失败经历记录如下&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先使用 selenium 不加任何反爬措施登录网站试试：&lt;/p&gt;
&lt;p&gt;发现第一关就过不了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318120750666.png&#34; alt=&#34;image-20230318120750666&#34;&gt;&lt;/p&gt;
&lt;p&gt;请求显示 400 bad request 表明我们的请求被识别为非法的请求&lt;/p&gt;
&lt;p&gt;在控制台输入  &lt;code&gt;window.navigator.webdriver&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;显示结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318120845415.png&#34; alt=&#34;image-20230318120845415&#34;&gt;&lt;/p&gt;
&lt;p&gt;间接地表示了你使用了 selenium 等自动化工具&lt;/p&gt;
&lt;h2 id=&#34;尝试方案一加入配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试方案一加入配置&#34;&gt;#&lt;/a&gt; 尝试方案一 (加入配置)：&lt;/h2&gt;
&lt;p&gt;在 stackoverflow 搜索 selenium 400 bad request&lt;/p&gt;
&lt;p&gt;有人提供了解决方案 :&lt;img data-src=&#34;image-20230318122455280.png&#34; alt=&#34;image-20230318122455280&#34;&gt;&lt;/p&gt;
&lt;p&gt;在代码中加入：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;edge_options&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add_argument&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;--disable-blink-features=AutomationControlled&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个配置可以去除 webdriver 的一些特征 但是在这个网站中还是失败&lt;/p&gt;
&lt;p&gt;在控制台输入  &lt;code&gt;window.navigator.webdriver&lt;/code&gt;   仍然显示 true，说明特征没隐藏完&lt;/p&gt;
&lt;h2 id=&#34;尝试方案二注入js代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试方案二注入js代码&#34;&gt;#&lt;/a&gt; 尝试方案二 (注入 JS 代码)：&lt;/h2&gt;
&lt;p&gt;加入代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;execute_cdp_cmd&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Page.addScriptToEvaluateOnNewDocument&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#34;source&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Object.defineProperty(navigator, &#39;webdriver&#39;, &amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      get: () =&gt; false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &amp;#125;)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &#34;&#34;&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cdp (Chrome Devtools Protocol) 命令 通过 CDP, 可以检查 / 调试 / 监听网络流量，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Page.addScriptToEvaluateOnNewDocument：在浏览器启动之前执行给定的 JS 脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object.defineProperty：JS 语法，直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象（代码中是将  &lt;code&gt;navigator.webdriver&lt;/code&gt;  设置为  &lt;code&gt;false&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结果如下： 可以看到 webdriver 的一些特征确实被隐藏了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318124126335.png&#34; alt=&#34;image-20230318124126335&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是页面仍然一片空白 请求包仍然是 400 bad request&lt;/p&gt;
&lt;h2 id=&#34;思考一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思考一&#34;&gt;#&lt;/a&gt; 思考一：&lt;/h2&gt;
&lt;p&gt;上面的方法都在尝试隐藏某些你在使用爬虫的痕迹 部分网站检测不会那么深 但是使用爬虫总会留下痕迹&lt;/p&gt;
&lt;p&gt;selenium 启动的浏览器 ，有几十个特征可以被检测到&lt;/p&gt;
&lt;p&gt;有一个网站：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ib3Quc2Fubnlzb2Z0LmNvbS8=&#34;&gt;https://bot.sannysoft.com/&lt;/span&gt; 可以检测你的浏览指纹&lt;/p&gt;
&lt;p&gt;使用无头浏览器直接打开这个网站并截图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318130242034.png&#34; alt=&#34;image-20230318130242034&#34;&gt;&lt;/p&gt;
&lt;p&gt;标红的都是未通过的测试&lt;/p&gt;
&lt;p&gt;用刚刚尝试的方法 get 这个网站 好了很多 但仍显示未通过爬虫检测&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318130449697.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;正常浏览器打开：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318125152944.png&#34; alt&gt;&lt;/p&gt;
&lt;h2 id=&#34;尝试方案三更强大的js注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试方案三更强大的js注入&#34;&gt;#&lt;/a&gt; 尝试方案三 (更强大的 JS 注入):&lt;/h2&gt;
&lt;p&gt;方案二的 js 代码还是太简单了，只能隐藏一个特定的特征（虽然这个特征比较常用）&lt;/p&gt;
&lt;p&gt;在网上看看有没有更专业的开发者开发出来的更强大的 js 代码：&lt;/p&gt;
&lt;p&gt;找到了一份  &lt;strong&gt;stealth.min.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么，这个 &lt;code&gt;stealth.min.js&lt;/code&gt;  文件是怎么来的呢？这就要说到 &lt;code&gt;pyppeteer&lt;/code&gt;  (一个与 selenium 同类的爬虫库) 了。，Python 版本的 &lt;code&gt;pyppeteer&lt;/code&gt;  已经很久没有人维护了，但是 Node.js 版本的  &lt;code&gt;puppeteer&lt;/code&gt;  持续有人维护，并且在持续更新，生态也越来越好。&lt;/p&gt;
&lt;p&gt;有开发者给 puppeteer 写了一套插件，叫做 &lt;code&gt;puppeteer-extra&lt;/code&gt; 。其中，就有一个插件叫做&lt;strong&gt; puppeteer-extra-plugin-stealth&lt;/strong&gt;。这个东西，就来专门用来让 puppeteer 隐藏模拟浏览器的指纹特征。&lt;/p&gt;
&lt;p&gt;那么，我们用 Python  selenium 的人怎么办呢？实际上也有办法。就是把其中的隐藏特征的脚本提取出来，做成一个单独的 js 文件。然后让 Selenium 在打开任意网页之前，先运行一下这个 js 文件里面的内容。&lt;/p&gt;
&lt;p&gt;puppeteer-extra-plugin-stealth 的作者还写了另外一个工具，叫做&lt;strong&gt; extract-stealth-evasions&lt;/strong&gt;。这个东西就是用来生成 &lt;code&gt;stealth.min.js&lt;/code&gt;  文件的。&lt;/p&gt;
&lt;p&gt;首先安装 Node.js，然后安装 Npm，接着运行如下命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npx extract-stealth-evasions &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;就能在文件夹下生成一个 stealth.min.js 文件了&lt;/p&gt;
&lt;p&gt;使用 stealth.min.js 如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stealth.min.js&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    js &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;execute_cdp_cmd&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Page.addScriptToEvaluateOnNewDocument&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#34;source&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; js&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;再登录刚才的网站：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318132200964.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;通过此网站的测试&lt;/p&gt;
&lt;p&gt;再尝试我们要爬取的网站 请求包仍然是 400 bad request&lt;/p&gt;
&lt;p&gt;猜测失败原因是反爬措施太强大了 不管怎么做都会留下使用爬虫的痕迹&lt;/p&gt;
&lt;h2 id=&#34;尝试方案四连接手动打开的浏览器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试方案四连接手动打开的浏览器&#34;&gt;#&lt;/a&gt; 尝试方案四（连接手动打开的浏览器）：&lt;/h2&gt;
&lt;p&gt;既然使用驱动程序的 selenium 总会留下特征，手动打开的浏览器不会被检测到，那我能不能从源头解决问题，先手动打开一个浏览器，然后尝试用 selenium 接管它呢。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmd1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;cd &#34;C:\Program Files (x86)\Microsoft\Edge\Application&#34; &amp;amp;&amp;amp; start .\msedge.exe --remote-debugging-port=9225 &#39;&lt;/span&gt; \&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           &lt;span class=&#34;token string&#34;&gt;&#39;--user-data-dir=&#34;C:\selenium\EdgeProfile&#34; &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;system&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    edge_options &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Options&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    edge_options&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add_experimental_option&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;debuggerAddress&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;127.0.0.1:9225&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面代码在命令行中用调试模式打开了 Edge 浏览器，并且开放了一个远程调试端口，我们再使用 selenium 连接上这个端口，取得控制权。&lt;/p&gt;
&lt;p&gt;在 get 一下目标网址，并登录：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318134112693.png&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;终于能进来了。&lt;/p&gt;
&lt;p&gt;要爬取的中学名称信息分为四个下拉列表：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230318134447273.png&#34; alt=&#34;image-20230318134447273&#34;&gt;&lt;/p&gt;
&lt;p&gt;当选中了上一级下拉列表的某个选项后，服务端会返回一个 ajax 包，并更新下一级下拉列表里的内容，在这里仍然遇到问题。&lt;/p&gt;
&lt;p&gt;如果用 selenium 选择了某一个选项，发现后面的下拉列表并没有更新。&lt;/p&gt;
&lt;p&gt;演示一下。&lt;/p&gt;
&lt;p&gt;通过检查工具抓包，发现还是 400 bad request，猜测爬虫还是被检测出来了。&lt;/p&gt;
&lt;h2 id=&#34;尝试方案五模拟真实环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试方案五模拟真实环境&#34;&gt;#&lt;/a&gt; 尝试方案五 (模拟真实环境)&lt;/h2&gt;
&lt;p&gt;猜测：爬虫遍历列表选项并点击的频率太快了，被识别出来非人工操作&lt;/p&gt;
&lt;p&gt;在每次点击选项后都加上 time.sleep (1) 休眠一秒钟，仍然失败&lt;/p&gt;
&lt;h2 id=&#34;尝试方案六直接对ajax包的url发请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试方案六直接对ajax包的url发请求&#34;&gt;#&lt;/a&gt; 尝试方案六 (直接对 ajax 包的 url 发请求)&lt;/h2&gt;
&lt;p&gt;一个 url 示例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nYW9rYW8uY2hzaS5jb20uY24venpibS9xdWVyeVhqcy5hY3Rpb24/TFVWVndzODA9NUgyX1l0S2NmN0FCQXZhV00xVThCWjJJNFFWWHUuWlhuQ0RITUVsR0JKY0Vma3dxY0dWNDlIUzQ2d2FTOWQ5ZXk3eUlTZG5BOG95WUh6MkxTVkdJYnVHVEpRVXpBWjNaRUt0d3pKZ0NtSm5oMDNjNlhteVA2ZnVwdXVTUTN6elVOdlFUUndTX1cxeTZtY055TEhDdl82czhIX1IzY2xRYUk3czN4OG5yNFg3NVdDUUFCbFRTWURTMnhtU3p6MnczQ21fMDh6bDJ3Ymd1aTR2NjVCb2laMkw2c0hEYWdSWl95d3ZtTmpfLlg1SDlhbTYwYlpNMGpZaEtwQ19Fck9RcUxfdjhWRmgyN0plQ1g5YldSNW9JTTlRSjEyNldqTUdmM1NldzJTNjhzeFhUVHdmWG9NcTVULjE3WXdrbjRwZGlralZsUWhDc25jbGV4Z3cwaW94dVVjMTMwVEhVdFVQaEQudGx0M2pKYnp5WnpfU1pJLlhyTVJuU3ZWamdpcHBvWg==&#34;&gt;https://gaokao.chsi.com.cn/zzbm/queryXjs.action?LUVVws80=5H2_YtKcf7ABAvaWM1U8BZ2I4QVXu.ZXnCDHMElGBJcEfkwqcGV49HS46waS9d9ey7yISdnA8oyYHz2LSVGIbuGTJQUzAZ3ZEKtwzJgCmJnh03c6XmyP6fupuuSQ3zzUNvQTRwS_W1y6mcNyLHCv_6s8H_R3clQaI7s3x8nr4X75WCQABlTSYDS2xmSzz2w3Cm_08zl2wbgui4v65BoiZ2L6sHDagRZ_ywvmNj_.X5H9am60bZM0jYhKpC_ErOQqL_v8VFh27JeCX9bWR5oIM9QJ126WjMGf3Sew2S68sxXTTwfXoMq5T.17Ywkn4pdikjVlQhCsnclexgw0ioxuUc130THUtUPhD.tlt3jJbzyZz_SZI.XrMRnSvVjgippoZ&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对要携带的参数的 key 值和 value 进行了加密 找不到规律 也失败&lt;/p&gt;
&lt;h2 id=&#34;尝试方案七undetected_driver&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试方案七undetected_driver&#34;&gt;#&lt;/a&gt; 尝试方案七 (undetected_driver)&lt;/h2&gt;
&lt;p&gt;向老师求助后得到的方案&lt;/p&gt;
&lt;p&gt;undetected_driver 也是 selenium 提供的一个模块 可以防止浏览器特征被识别，并且可以根据浏览器版本自动下载驱动。&lt;/p&gt;
&lt;p&gt;可以过登录 但是发来的 ajax 请求包还是 400 bad request&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;猜测失败原因：还是有没有隐藏好的特征被反爬措施检查到了。&lt;/p&gt;
&lt;p&gt;查找替代方案：在搜索引擎搜索全国中学名称，有结果，但是数据比较老，而且权威性无法保证。在中国教育部官网搜索没有结果。可能需要在同类的政府网站填写个人信息的时候可以找到。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</guid>
            <title>编译原理01-词法分析</title>
            <link>http://example.com/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</link>
            <category>编译原理</category>
            <pubDate>Thu, 09 Mar 2023 10:58:10 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;编译原理01-词法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译原理01-词法分析&#34;&gt;#&lt;/a&gt; 编译原理 01 - 词法分析&lt;/h1&gt;
&lt;p&gt;词法分析： 输入（程序文本 / 字符串 s）--&amp;gt; 输出（词法单元流）&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230309110603730.png&#34; alt=&#34;image-20230309110603730&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;词法分析器的三种设计方法由易到难&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#词法分析器的三种设计方法由易到难&#34;&gt;#&lt;/a&gt; 词法分析器的三种设计方法（由易到难）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;词法分析器生成器（如 ANTLR）&lt;/li&gt;
&lt;li&gt;手写词法分析器&lt;/li&gt;
&lt;li&gt;自动化词法分析器 (自己实现一个词法分析器生成器)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;生产环境下的编译器（如 gcc）通常选择手写词法分析器&lt;/p&gt;
&lt;h2 id=&#34;antrl的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#antrl的使用&#34;&gt;#&lt;/a&gt; antrl 的使用&lt;/h2&gt;
&lt;p&gt;输入： 词法单元的规约 -&lt;strong&gt;SimpleExpr.g4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输出：词法分析器 -  &lt;strong&gt;SimpleExprLexer.java&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​				SimpleExprLexer.java 编译后 接受输入文件 并输出 token 流&lt;/p&gt;
&lt;h2 id=&#34;g4文件的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#g4文件的结构&#34;&gt;#&lt;/a&gt; .g4 文件的结构&lt;/h2&gt;
&lt;p&gt;第一行： &lt;code&gt;grammar SimpleExpr ;&lt;/code&gt;  给接下来的文法起个名字 名字要与文件名一致&lt;/p&gt;
&lt;p&gt;​					** 如果文件里只包含词法部分 用 lexer grammar SysYLexer **&lt;/p&gt;
&lt;p&gt;​					 每一行都要以分号结尾&lt;/p&gt;
&lt;p&gt;@header {} 括号里的东西会自动拷贝到到 java 文件中&lt;/p&gt;
&lt;p&gt;语法规则见下面示例&lt;/p&gt;
&lt;p&gt;SimpleExpr.g4:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Antlr&#34;&gt;grammar SimpleExpr;

import SimpleExprRules;

@header&amp;#123;
package simpleexpr;
&amp;#125;

prog : stat* EOF ;

stat : expr &#39;;&#39;
     | ID &#39;=&#39; expr &#39;;&#39;
     | &#39;if&#39; expr &#39;;&#39;
     ;

expr : expr (&#39;*&#39; | &#39;/&#39;) expr
     | expr (&#39;+&#39; | &#39;-&#39;) expr
     | &#39;(&#39; expr &#39;)&#39;
     | ID
     | INT
     | FLOAT
     ;
    // 到这里描述的其实还是语法结构
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SimpleExprRules.g4:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Antlr&#34;&gt;lexer grammar SimpleExprRules;

SEMI : &#39;;&#39; ;
ASSIGN : &#39;=&#39; ;
IF : &#39;if&#39; ;
MUL : &#39;*&#39; ;
DIV : &#39;/&#39; ;
ADD : &#39;+&#39; ;
SUB : &#39;-&#39; ;
LPAREN : &#39;(&#39; ;
RPAREN : &#39;)&#39; ;

ID : (LETTER | &#39;_&#39;) WORD* ;
INT : &#39;0&#39; | ([1-9] DIGIT*) ;
FLOAT : INT &#39;.&#39; DIGIT*
      | &#39;.&#39; DIGIT+
      ;

WS : [ \t\r\n]+ -&amp;gt; skip ;

//SL_COMMENT : &#39;//&#39; .*? &#39;\n&#39; -&amp;gt; skip ;
SL_COMMENT2 : &#39;//&#39; ~[\n]* &#39;\n&#39; -&amp;gt; skip;
DOC_COMMENT : &#39;/**&#39; .*? &#39;*/&#39; -&amp;gt; skip ;
ML_COMMENT : &#39;/*&#39; .*? &#39;*/&#39; -&amp;gt; skip ;

fragment LETTER : [a-zA-Z] ;
fragment DIGIT : [0-9] ;
fragment WORD : LETTER | DIGIT | &#39;_&#39; ;
//以上才是真正的词法部分

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;用编程方式使用antlr-4-生成的xxxlexerjava&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用编程方式使用antlr-4-生成的xxxlexerjava&#34;&gt;#&lt;/a&gt; 用编程方式使用 ANTLR 4 生成的 xxxlexer.java&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;package simpleexpr;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.ParseTree;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class SimpleExprTest &amp;#123;
  public static void main(String[] args) throws IOException &amp;#123;
    System.out.println(&amp;quot;SimpleExprTest ...&amp;quot;);

    InputStream is = System.in;

    String file;
    if (args.length &amp;gt; 0) &amp;#123;
      file = args[0];
      is = new FileInputStream(file);
    &amp;#125;

    CharStream input = CharStreams.fromStream(is);
    //SimpleExprLexer 是.g4文件生成的java类 input必须是CharStream格式
    SimpleExprLexer lexer = new SimpleExprLexer(input);
	
    lexer.getAllTokens().forEach(System.out::println);
  &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正则表达式&#34;&gt;#&lt;/a&gt; 正则表达式&lt;/h2&gt;
&lt;p&gt;基本的知识就不记录了 记录一些重要的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非贪婪匹配  &lt;code&gt;,*?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反向引用 要引用的用（）括起来，后面引用通过子表达式下标访问，如 \1，下标从 1 开始&lt;/li&gt;
&lt;li&gt;look ahead ?&amp;lt;= 符号，表示前面字符要满足 xxx，但不匹配 xxx&lt;/li&gt;
&lt;li&gt;look back  ?= 符号，表示后面字符要满足 xxx，但不匹配 xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nfa与dfa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nfa与dfa&#34;&gt;#&lt;/a&gt; NFA 与 DFA&lt;/h2&gt;
&lt;p&gt;NFA：非确定性自动机  DFA: 确定性有穷自动机（Deterministic Finite Automaton)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320200945838.png&#34; alt=&#34;image-20230320200945838&#34;&gt;&lt;/p&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NFA 简洁易于理解，便于描述语言 L (A)&lt;/li&gt;
&lt;li&gt;DFA 易于判断 x 属于 L (A)，适合产生词法分析器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    其中 L (A) 是使当前自动机能进入接受状态的输入集合&lt;/p&gt;
&lt;p&gt;一般用 NFA 描述语言，用 DFA 实现词法分析器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现词法分析器的步骤：RE --&amp;gt; NFA --&amp;gt; DFA --&amp;gt; 词法分析器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如图： 根据 DFA 生成 RE 不需要掌握&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320201739378.png&#34; alt=&#34;image-20230320201739378&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;thompson构造法从re-到-nfa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#thompson构造法从re-到-nfa&#34;&gt;#&lt;/a&gt; Thompson 构造法（从 RE 到 NFA）&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315141912075.png&#34; alt=&#34;image-20230315141912075&#34;&gt;&lt;/p&gt;
&lt;p&gt;构造方法如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203523098.png&#34; alt=&#34;image-20230320203523098&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203542881.png&#34; alt=&#34;image-20230320203542881&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203600728.png&#34; alt=&#34;image-20230320203600728&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203629409.png&#34; alt=&#34;image-20230320203629409&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203705399.png&#34; alt=&#34;image-20230320203705399&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203721076.png&#34; alt=&#34;image-20230320203721076&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315142444609.png&#34; alt=&#34;image-20230315142444609&#34;&gt;&lt;/p&gt;
&lt;p&gt;举个例子：(a|b)*abb 的构造（考试会考）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315142551213.png&#34; alt=&#34;image-20230315142551213&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;从nfa到dfa的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从nfa到dfa的转换&#34;&gt;#&lt;/a&gt; 从 NFA 到 DFA 的转换：&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315142711571.png&#34; alt=&#34;image-20230315142711571&#34;&gt;&lt;/p&gt;
&lt;p&gt;规则如下 其中 s 是单个状态 T 是一个状态子集&lt;/p&gt;
&lt;p&gt;这个过程一定会有一个终点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315143847385.png&#34; alt=&#34;image-20230315143847385&#34;&gt;&lt;/p&gt;
&lt;p&gt;符号化的表示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315143949988.png&#34; alt=&#34;image-20230315143949988&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复杂度：NFA 有 n 个状态 DFA 最多有 2 的 n 次方个状态 指数爆炸&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;dfa最小化算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dfa最小化算法&#34;&gt;#&lt;/a&gt; DFA 最小化算法&lt;/h2&gt;
&lt;p&gt;问题一： 如何定义等价状态&lt;/p&gt;
&lt;p&gt;想法一： 其中波浪号意为等价&lt;/p&gt;
&lt;p&gt;​					即 s 状态等价与 t 状态 当且仅当 任意 a 属于字母表 s 与 t 在 a 输入下发生转移后的状态是等价的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320210948252.png&#34; alt=&#34;image-20230320210948252&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是这个定义是错误的 课件上有反例&lt;/p&gt;
&lt;p&gt;反过来是正确做法：&lt;/p&gt;
&lt;p&gt;核心思想&lt;strong&gt;做划分而非合并&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接受状态与非接受状态必定不等价 ，然后接着划分，知道不能再分为止。每一步做迭代 对一个状态集合的任意两个状态，如果在字符 a 的驱动下跑到了不同的组，则这两个状态一定不等价。&lt;/p&gt;
&lt;p&gt;做之前要补齐死状态。&lt;/p&gt;
&lt;h3 id=&#34;复杂度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复杂度&#34;&gt;#&lt;/a&gt; 复杂度&lt;/h3&gt;
&lt;p&gt;太复杂了&lt;/p&gt;
&lt;h2 id=&#34;从dfa得到词法分析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从dfa得到词法分析器&#34;&gt;#&lt;/a&gt; 从 DFA 得到词法分析器&lt;/h2&gt;
&lt;p&gt;需要消除死状态 ，避免徒劳消耗输入流&lt;/p&gt;
&lt;p&gt;模拟运行该 DFA, 直到无法继续为止（输入结束或状态无转移）：假设此时状态为 s，若 s 为接受状态，则识别成功，否则，回溯（包括状态与输入流）至最近一次经过的接受状态，识别成功；若没有经过任何接受状态，则报错（忽略第一个字符，重新开始）&lt;/p&gt;
&lt;p&gt;用在词法分析器场景下的 DFA 的最小化第一步不同，所有的接受状态一定不等价&lt;/p&gt;
&lt;h2 id=&#34;根据dfa得到re非重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据dfa得到re非重点&#34;&gt;#&lt;/a&gt; 根据 DFA 得到 RE (非重点)&lt;/h2&gt;
&lt;h2 id=&#34;lab-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lab-1&#34;&gt;#&lt;/a&gt; lab 1&lt;/h2&gt;
&lt;p&gt;编程一小时 配置环境一天的典型代表。&lt;/p&gt;
&lt;p&gt;从 lab1 知道了以后应该恶补 ssh 远程连接 linux 命令行 makefile .gitignore 导入依赖 java 基本语法 IDEA 的使用......&lt;/p&gt;
&lt;h3 id=&#34;实验输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验输入&#34;&gt;#&lt;/a&gt; 实验输入&lt;/h3&gt;
&lt;p&gt;本次实验的输入是一个包含了 &lt;code&gt;SysY&lt;/code&gt;  源代码的文件，你的程序需要接受一个文件名作为参数&lt;/p&gt;
&lt;h3 id=&#34;实验内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验内容&#34;&gt;#&lt;/a&gt; 实验内容&lt;/h3&gt;
&lt;h3 id=&#34;part1-词法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#part1-词法分析&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD1wYXJ0MS0lRTglQUYlOEQlRTYlQjMlOTUlRTUlODglODYlRTYlOUUlOTA=&#34;&gt;Part1 词法分析&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本次实验你需要完成一个词法分析器对使用 SysY 语言书写的源代码进行词法分析，要求如下
&lt;ul&gt;
&lt;li&gt;本次实验要求通过&lt;strong&gt;标准错误输出（stderr, 如 System.err 等）&lt;/strong&gt;， 打印程序的 &lt;strong&gt;所有&lt;/strong&gt; 运行结果。&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;包含词法错误时&lt;/strong&gt;：对于包含词法错误的文件，你需要打印&lt;strong&gt;所有&lt;/strong&gt;错误信息，格式为： &lt;code&gt;Error type A at Line [lineNo]:[errorMessage]&lt;/code&gt; ，其中 &lt;code&gt;lineNo&lt;/code&gt;  为出错的 &lt;code&gt;token&lt;/code&gt;  首个字符所在行的行号， &lt;code&gt;errorMessage&lt;/code&gt;  可自行定义，本实验不做要求，只要冒号前的信息正确即可。&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;不包含词法错误时&lt;/strong&gt;：对于没有任何词法错误的文件，你需要打印所有识别到的 &lt;code&gt;Tokens&lt;/code&gt;  信息，具体输出格式可以参见&lt;strong&gt;样例一&lt;/strong&gt;。特别要求：输出时忽略所有注释，对十六进制和八进制数字常量输出 &lt;code&gt;token&lt;/code&gt;  文本时需输出其十进制的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例&#34;&gt;#&lt;/a&gt; 样例&lt;/h3&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-SysY&#34;&gt;int main() 
&amp;#123;
   // line comment
   /* 
     block comment
   */
   int i = 0x1;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;IDENT&lt;/span&gt; main at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;L_PAREN&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;R_PAREN&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;L_BRACE&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;IDENT&lt;/span&gt; i at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;ASSIGN&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;INTEGER_CONST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;SEMICOLON&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;R_BRACE&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解释：&lt;/p&gt;
&lt;p&gt;每行输出一个 token 的信息，输出格式为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[token类型] [token文本] at Line [此token首个字符所在行的行号].复制到剪贴板复制失败复制成功!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出时忽略所有注释，对十六进制和八进制数字常量输出 token 文本时需输出其十进制的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特别注意，遇到如 &lt;code&gt;int 2i = 08;&lt;/code&gt;  这种输入时，请将 &lt;code&gt;2i&lt;/code&gt;  识别为 &lt;code&gt;INTEGER_CONST&lt;/code&gt;  和 &lt;code&gt;IDENT&lt;/code&gt; ， &lt;code&gt;08&lt;/code&gt;  识别为两个 &lt;code&gt;INTEGER_CONST&lt;/code&gt; ，这种我们不认为是词法错误，这种错误将在后面的实验中处理&lt;/p&gt;
&lt;h3 id=&#34;样例二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例二&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD0lRTYlQTAlQjclRTQlQkUlOEIlRTQlQkElOEM=&#34;&gt;样例二&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-SysY&#34;&gt;int main()&amp;#123;
  int i = 1;
  int j = ~i;
&amp;#125;复制到剪贴板复制失败复制成功!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error type A at Line 3: Mysterious character &amp;quot;~&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;实验过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验过程&#34;&gt;#&lt;/a&gt; 实验过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一个难题就是怎么在 windows 里的 IDEA 编程，但是运行和调试环境是虚拟机中的 ubuntu20.04+lab0 配置好的环境 想法就是用 IDEA 的 remote deployment 功能，在网上搜索教程后发现我的 IDEA 竟然没有这个功能，原因是我的是 community 版本，所以卸载了之前的 IDEA 装了专业版。然后 remote deployment 原理应该是使用 ssh 连接，虽然虚拟机是装在电脑里，但其实和与远程服务器相连原理是一样的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后编写.g4 文件比较顺利，生成了 SysYlexer.java 文件，但是在 main 函数中使用 SysYlexer 类也遇见了困难，首先是导入 antlr，IDEA 一直报错无法解析 symbol antlr，但是 lab0 中我应该是配好了 antlr 环境的，不知道为什么，所以还是用 IDEA 的 libraries 中导入了 antlr 才好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三个难题就是删除 SysYLexer 中自带的 ErrorListeners, 使用自己编写的 errorlisteners，这里老师上课应该是没有讲的，所以也是无从下手。后面借助搜索引擎和 ChatGPT 学了很久才会。原理很简单，先放上自己实现的 myErrorListener 如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; myErrorListener &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BaseErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;syntaxError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Recognizer&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; recognizer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; offendingSymbol&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; charPositionInLine&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;RecognitionException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error type A at Line &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;line&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;: &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			error &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要是重写了 syntaxError 这个函数，他里面的参数应该是报错相关的信息，这里只用到了 line（出错的行）和 msg（具体的报错信息），其它的是什么意思忘记了。应该是每出现一个错误就会调用一次 syntaxError 函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后放一下 main 函数部分：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;antlr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;v4&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;runtime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Collection&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Main&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; error &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input path is required&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; source &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;CharStream&lt;/span&gt; input &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CharStreams&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fromFileName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;source&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;SysYLexer&lt;/span&gt; sysYLexer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYLexer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;removeErrorListeners&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; tokens &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAllTokens&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; rulenames &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuleNames&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Token&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; tokens&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tokenType &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rulenames&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tokenText &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;toDemical&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getText&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tokenLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tokenType &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tokenText &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; at Line &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;tokenLine&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token char&#34;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; myErrorListener &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BaseErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;syntaxError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Recognizer&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; recognizer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; offendingSymbol&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; charPositionInLine&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;RecognitionException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error type A at Line &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;line&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;: &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			error &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;toDemical&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;0[0-7]+&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;0[xX][0-9a-fA-F]+&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;反正做的时候除了文档里给的框架几乎每一行都想了很久。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码写完后上传又有问题，可能是之前 make compile , make clean 太多次了，导致压缩包超过了 10M 的限制，后来参考助教给的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xNzA4&#34;&gt;记一次删除 Git 记录中的大文件的过程 - HollisChuang&#39;s Blog&lt;/span&gt; 按里面的步骤一步步做才完成上传，比较幸运的是一次就 AC 了。（至于为什么压缩包会那么大，我的理解是改动了太多次代码 make compile 了太多次，且每次 git 都会保存版本信息以便于回退，所以改动的所有版本其实都还在 git 保存的隐藏文件夹下的，所以整个目录就会变得很大了）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/02/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BC%96%E8%AF%91%E5%99%A8TVM-UserTutorial/</guid>
            <title>深度学习编译器TVM-UserTutorial</title>
            <link>http://example.com/2023/02/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BC%96%E8%AF%91%E5%99%A8TVM-UserTutorial/</link>
            <category>TVM 深度学习 机器学习 编译</category>
            <pubDate>Tue, 28 Feb 2023 14:03:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;tvm-usertutorial&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tvm-usertutorial&#34;&gt;#&lt;/a&gt; TVM-UserTutorial&lt;/h1&gt;
&lt;p&gt;自 2022 年 10 月份选择大创项目 —— 基于 TVM 实现针对国产 AI 芯片的深度算子库项目以来。花了许多时间弄懂什么是 TVM，项目的定位是什么，我们要做的到底是什么事。也经历了期末复习周，由于疫情延期期末考到开学考试，以及小组成员陆续阳性等等事。导致我们的项目在开题答辩之后迟迟没有开始。本学期初在学习了计算系统基础以及编译原理的导论之后，我对 TVM 的认识更加深刻了，项目也重新启动 (2023/2)。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#introduction&#34;&gt;#&lt;/a&gt; Introduction&lt;/h2&gt;
&lt;p&gt;原文链接： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90dm0uYXBhY2hlLm9yZy9kb2NzL3R1dG9yaWFsL2ludHJvZHVjdGlvbi5odG1sI3NwaHgtZ2xyLXR1dG9yaWFsLWludHJvZHVjdGlvbi1weQ==&#34;&gt;Introduction — tvm 0.11.dev0 documentation (apache.org)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;TVM 隶属于 Apache 基金会，是开源项目。定义为一个可应用于各种 GPU CPU 深度学习加速器的深度学习编译器。&lt;/p&gt;
&lt;h2 id=&#34;an-overview-of-tvm-and-model-optimization&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#an-overview-of-tvm-and-model-optimization&#34;&gt;#&lt;/a&gt; An Overview of TVM and Model Optimization&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230228142729726.png&#34; alt=&#34;image-20230228142729726&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要思想： 专用 --&amp;gt; 通用 --&amp;gt; 专用    不同框架转化为统一的 IR 表示，在根据模型所部署的不同硬件的类型转化为对应的字节码 。&lt;/p&gt;
&lt;p&gt;TVM 采用了多级 IR 的设计，而且每级之间的转化都会经过各种优化，比如切割子图，图优化，以及 AutoTVM/AutoScheduler (这两个是 TVM 带有的自动优化模块) 进行最优调度的选择。&lt;/p&gt;
&lt;p&gt;TVM 支持的后端有 LLVM、NVCC 等，最重要的是可以支持 Embedded and specialized targets, 但是要使用 TVM 提供的 BYOC 功能，也是我们项目最需要实现的部分。&lt;/p&gt;
&lt;h2 id=&#34;compiling-and-optimizing-a-model-with-tvmc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#compiling-and-optimizing-a-model-with-tvmc&#34;&gt;#&lt;/a&gt; compiling and optimizing a Model with TVMC&lt;/h2&gt;
&lt;p&gt;原文链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90dm0uYXBhY2hlLm9yZy9kb2NzL3R1dG9yaWFsL3R2bWNfY29tbWFuZF9saW5lX2RyaXZlci5odG1sI3NwaHgtZ2xyLXR1dG9yaWFsLXR2bWMtY29tbWFuZC1saW5lLWRyaXZlci1weQ==&#34;&gt;compiling and optimizing a model with TVMC&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;大部分操作已在虚拟机中运行成功&lt;/p&gt;
&lt;p&gt;日期：3/1&lt;/p&gt;
&lt;p&gt;这章主要熟悉了 TVMC 的简单使用。官方文档提供了一个预训练的 ResNet-50 v2 模型。为 TVM 的 runtime 编译此模型，并在这个模型上跑了一个真实的猫猫图片，得到运行结果。文章还包括了在实际的 CPU 上用 TVM 调优（tune）模型，并且使用 TVM 收集的 tuning data 重编译出一个优化的模型，重新跑一遍优化的模型，并与之前模型的表现进行对比（这部分较难）。&lt;/p&gt;
&lt;p&gt;TVMC 是 TVM 的命令行工具，让你能在命令行中使用 TVM，C 表示 command line 的意思。&lt;/p&gt;
&lt;p&gt;TVMC 支持 Keras, ONNX, TensorFlow, TFLite and Torch 构建的模型，本章模型用的是 onnx。&lt;/p&gt;
&lt;h2 id=&#34;编译模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译模型&#34;&gt;#&lt;/a&gt; 编译模型&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tvmc compile &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--target&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;llvm&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--input-shapes &lt;span class=&#34;token string&#34;&gt;&#34;data:[1,3,224,224]&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--output&lt;/span&gt; resnet50-v2-7-tvm.tar &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resnet50-v2-7.onnx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 编译出来一个 tar 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; model&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tar&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-xvf&lt;/span&gt; resnet50-v2-7-tvm.tar &lt;span class=&#34;token parameter variable&#34;&gt;-C&lt;/span&gt; model&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; model&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#解压后看看有什么&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;有三个东西：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21vZC5zbw==&#34;&gt;mod.so&lt;/span&gt; : 就是那个模型，表现为一个 TVM runtime 能运行的 c++ 库&lt;/p&gt;
&lt;p&gt;mod.json  : a text representation of the TVM Relay computation graph.&lt;/p&gt;
&lt;p&gt;mod.params:  a file containing the parameters for the pre-trained model.--&lt;/p&gt;
&lt;p&gt;编译时选择恰当的命令行选项能大大改变编译性能&lt;/p&gt;
&lt;h2 id=&#34;用tvmc运行模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用tvmc运行模型&#34;&gt;#&lt;/a&gt; 用 TVMC 运行模型&lt;/h2&gt;
&lt;p&gt;为了对模型进行有效输入 要将预备的输入进行一些预处理.TVM 采用.npz 格式文件作为模型输入和输出，这是一个受良好支持的 Numpy 文件格式。&lt;/p&gt;
&lt;p&gt;这里文章用一个 python 脚本预处理了猫猫图片（具体见原文），得到了一个 imagenet_cat.npz。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tvmc run &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--inputs&lt;/span&gt; imagenet_cat.npz &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--output&lt;/span&gt; predictions.npz &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resnet50-v2-7-tvm.tar&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;同样，这个文件也不是人能看懂的，原文提供了一个后处理脚本，把这个文件转化为人能看懂的结果。（见原文）&lt;/p&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;classn02123045-tabby-tabby-cat-with-probability0610553&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#classn02123045-tabby-tabby-cat-with-probability0610553&#34;&gt;#&lt;/a&gt; class=&#39;n02123045 tabby, tabby cat&#39; with probability=0.610553&lt;/h4&gt;
&lt;h4 id=&#34;classn02123159-tiger-cat-with-probability0367179&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#classn02123159-tiger-cat-with-probability0367179&#34;&gt;#&lt;/a&gt; class=&#39;n02123159 tiger cat&#39; with probability=0.367179&lt;/h4&gt;
&lt;h4 id=&#34;classn02124075-egyptian-cat-with-probability0019365&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#classn02124075-egyptian-cat-with-probability0019365&#34;&gt;#&lt;/a&gt; class=&#39;n02124075 Egyptian cat&#39; with probability=0.019365&lt;/h4&gt;
&lt;h4 id=&#34;classn02129604-tiger-panthera-tigris-with-probability0001273&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#classn02129604-tiger-panthera-tigris-with-probability0001273&#34;&gt;#&lt;/a&gt; class=&#39;n02129604 tiger, Panthera tigris&#39; with probability=0.001273&lt;/h4&gt;
&lt;h4 id=&#34;classn04040759-radiator-with-probability0000261&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#classn04040759-radiator-with-probability0000261&#34;&gt;#&lt;/a&gt; class=&#39;n04040759 radiator&#39; with probability=0.000261&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;自动调优模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动调优模型&#34;&gt;#&lt;/a&gt; 自动调优模型&lt;/h2&gt;
&lt;p&gt;TVM 的调优是根据具体硬件对模型进行优化，使其在给定目标上运行的更快。调优不会影响预测准确性，只会影响性能！&lt;/p&gt;
&lt;p&gt;演示：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tvmc tune &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--target&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;llvm&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--output&lt;/span&gt; resnet50-v2-7-autotuner_records.json &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resnet50-v2-7.onnx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果为 ——target 指定一个更具体的目标能得到更好的结果，如在 i7 处理器上使用 --target llvm-mcpu=skylake&lt;/p&gt;
&lt;p&gt;TVMC 将对模型的参数空间进行搜索，尝试不同的算子配置，并选择在您的平台上运行最快的配置。虽然这是一个基于 CPU 和模型运算的引导搜索，但仍然需要几个小时才能完成搜索。此搜索的输出将保存到 resnet50-v2-7-autotuner_records.json 文件中，稍后将用于编译一个优化的模型。&lt;/p&gt;
&lt;h2 id=&#34;使用调优数据编译优化模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用调优数据编译优化模型&#34;&gt;#&lt;/a&gt; 使用调优数据编译优化模型&lt;/h2&gt;
&lt;p&gt;编译器将使用调优结果为指定的目标上的模型生成高性能代码。编译命令为 tvmc compile --tuning-records。现在已经收集了模型的调优数据，我们可以使用优化后的算子重新编译模型，以加快计算速度。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tvmc compile &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--target&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;llvm&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--tuning-records resnet50-v2-7-autotuner_records.json  &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;--output&lt;/span&gt; resnet50-v2-7-tvm_autotuned.tar &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resnet50-v2-7.onnx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;与之前作对比，重复 100 此次。平均性能快 47%。&lt;/p&gt;
&lt;h2 id=&#34;getting-starting-using-tvmc-python-a-high-level-api-for-tvm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#getting-starting-using-tvmc-python-a-high-level-api-for-tvm&#34;&gt;#&lt;/a&gt; Getting Starting using TVMC Python: a high-level API for TVM&lt;/h2&gt;
&lt;p&gt;原文链接： [Getting Starting using TVMC Python: a high-level API for TVM](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90dm0uYXBhY2hlLm9yZy9kb2NzL3R1dG9yaWFsL3R2bWNfcHl0aG9uLmh0bWw=&#34;&gt;Getting Starting using TVMC Python: a high-level API for TVM — tvm 0.11.dev0 documentation (apache.org)&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;日期：3/2&lt;/p&gt;
&lt;p&gt;这章主要讲的是在 python 文件中怎么使用 tvmc。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导入：  &lt;code&gt;from tvm.driver import tvmc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把模型转化为 Relay 表示： &lt;code&gt;model = tvmc.load(&#39;my_model.onnx&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译： &lt;code&gt;package = tvmc.compile(model, target=&amp;quot;llvm&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行： &lt;code&gt;result = tvmc.run(package, device=&amp;quot;cpu&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以加入第 1.5 步：调优&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tvmc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tune&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;model&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; target&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;llvm&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tvmc&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;model&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; target&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;llvm&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; tuning_records &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;records.log&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# records.log 获取见下文如何保存调优结果&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;附加功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#附加功能&#34;&gt;#&lt;/a&gt; 附加功能&lt;/h2&gt;
&lt;p&gt;可以在每一步都把中间结果保存下来。比如保存模型：在第一步后面  &lt;code&gt;model.save(desired_model_path)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还能保存 package, 调优结果等&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/02/15/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%80%89%E8%AF%BE/</guid>
            <title>python实现自动选课</title>
            <link>http://example.com/2023/02/15/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%80%89%E8%AF%BE/</link>
            <category>python 爬虫</category>
            <pubDate>Wed, 15 Feb 2023 14:56:10 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;python实现自动选课&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python实现自动选课&#34;&gt;#&lt;/a&gt; python 实现自动选课&lt;/h1&gt;
&lt;p&gt;主要利用 selenium 与 ddddocr 库实现了对南大选课系统已收藏课程的自动化选择， 频率约为每两秒一次。实际测试中在一天时间内抢到了三门通识与两次近代史。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;驱动这个项目动力来自于南大选课系统的落后。在开放选课的前一分钟 mikeMao 点击了一下刷新按钮，然后当 mikeMao 看到选课界面时已经是十分钟以后了。他没有任何体育课，也没有抢到近代史（因为他上学期为了逃离黑榜退掉了近代史），并且只中了一门必中的通识课！如果只靠蹲，mikeMao 这学期的课表可能会爆炸，于是 mikeMao 吐槽能否开发一个自动选课脚本，他的室友 stonerXiao 花了两小时写了一个可以使用的抢课脚本，mikeMao 获得了源码。但是他觉得一些地方写的不是很好，于是第二天上课（两点的课，两点零一群里通知老师有事不来了），他就动手改了一遍，借鉴了 stonerXiao 的刷新思路，mikeMao 几乎重写了一份代码。并在接下来的一天内塞满了课表。&lt;/p&gt;
&lt;p&gt;源码&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; selenium &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; webdriver&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; selenium&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;webdriver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;common&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;by &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; By&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; selenium&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;webdriver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;support&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ui &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; WebDriverWait&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; selenium&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;webdriver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;edge&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;options &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Options&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; time&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; ddddocr&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; traceback&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 使用须知 需要安装：selenium 与 ddddorc 库 edge 浏览器及对应版本的驱动程序 并且参照注释对下面源码进行改动 将想选的课收藏&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 可能不明原因退出或报错 可能是收藏被吞了（重新收藏一下） 或者网络波动（重启程序即可）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 添加用户名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;password &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 添加密码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://xk.nju.edu.cn/xsxkapp/sys/xsxkapp/*default/index.do&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;login_button &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/html/body/div[1]/article/section/div[4]/div[1]/button&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/html/body/div[1]/article/section/div[4]/div[2]/button&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;favorite &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/html/body/div[1]/header/div[2]/ul/li[8]/a&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;special &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/html/body/div[1]/header/div[2]/ul/li[1]/a&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# for refresh&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;select &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/html/body/div[1]/article/div[2]/div[2]/table/tbody/tr[&amp;#123;&amp;#125;]/td[8]/a[2]&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;confirm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/html/body/div[3]/div[2]/div[2]/div[1]&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;confirm_ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/html/body/div[3]/div[2]/div[2]/div&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;course_list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 识别验证码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Identify_verifi_code&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    img &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;//*[@id=&#34;vcodeImg&#34;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;screenshot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;vcode.png&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ocr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ddddocr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DdddOcr&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;vcode.png&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;rb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        img_bytes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ocr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;classification&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img_bytes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; res&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# driver.maximize_window ()  # 将窗口最大化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    verifi_code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Identify_verifi_code&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 识别验证码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 找到登录框 输入账号密码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ID&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;loginName&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send_keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 输入用户名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ID&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;loginPwd&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send_keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 输入密码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ID&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;verifyCode&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send_keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;verifi_code&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 输入验证码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 10 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; login_button&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; login_button&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 点击登录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            verifi_code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Identify_verifi_code&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 识别验证码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ID&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;verifyCode&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;clear&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ID&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;verifyCode&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send_keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;verifi_code&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 输入验证码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 10 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; login_button&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; login_button&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 点击登录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 20 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; start&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; start&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;is_Login&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ID&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;loginName&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;start_select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; is_Login&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 20 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; favorite&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; favorite&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    course_board &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CLASS_NAME&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;course-body&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    tr_list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; course_board&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_elements&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CLASS_NAME&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;course-tr &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;已收藏课程：&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; tr &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; tr_list&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; tr&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; tr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./td[2]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        course_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./td[2]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;course_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; count &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;已尝试次数：&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; count&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strftime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%Y-%m-%d %H:%M:%S&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;localtime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;time&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        course_board &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CLASS_NAME&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;course-body&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        tr_list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; course_board&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_elements&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CLASS_NAME&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;course-tr &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; tr &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; tr_list&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; tr&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; tr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./td[8]/a[2]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            course_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./td[2]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            select_button &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./td[8]/a[2]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            select_button&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; confirm&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;选课成功！&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已成功选中&amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;course_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                course_list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;course_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;确认中&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 20 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; confirm_&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; confirm_&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;确认成功!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 10 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; special&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; special&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        wait &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 10 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        wait&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;until&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; favorite&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find_element&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;By&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;XPATH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; favorite&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;click&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;working&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    options &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Options&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 关闭沙盒启动 把下面两行注释掉 会出现浏览器界面 建议注释掉看看能不能运行 可以再取消注释&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;#options.add_argument(&#39;--no-sandbox&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;#options.add_argument(&#34;--headless&#34;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    driver &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; webdriver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Edge&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;executable_path&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;msedgedriver.exe&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; options&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;options&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# executable_path 改成下载的 edge 驱动程序路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 登录并查询&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        login&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        start_select&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;driver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;146&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        traceback&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;print_exc&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;147&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;148&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已选到如下课程:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;149&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;course_list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;150&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        driver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;quit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;151&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;152&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;153&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;154&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    working&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/01/25/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</guid>
            <title>python爬虫学习</title>
            <link>http://example.com/2023/01/25/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</link>
            <category>python</category>
            <category>爬虫</category>
            <pubDate>Wed, 25 Jan 2023 11:21:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;python爬虫学习总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python爬虫学习总结&#34;&gt;#&lt;/a&gt; python 爬虫学习总结&lt;/h1&gt;
&lt;p&gt;学习 python 爬虫的一些笔记&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;requests模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#requests模块&#34;&gt;#&lt;/a&gt; requests 模块&lt;/h2&gt;
&lt;p&gt;requests 模块流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 指定url
2. 发起请求 response = requests.get(url)
3. 获取数据 page_source = response.text()
4. 存储数据 文件操作/数据库操作
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数 tips：params 是用来发送查询字符串，而 data 是用来发送正文的。post 与 get 方法的特性是：这两种参数 post（）方法都可以用，get 方法只能发查询字符串，不能发送正文&lt;/p&gt;
&lt;p&gt;text 返回字符串 content 返回二进制（爬取图片可用）  json 返回对象&lt;/p&gt;
&lt;p&gt;分页爬取：&lt;/p&gt;
&lt;p&gt;​	如果是 ajax，在检查、网络、xhr 中查看&lt;/p&gt;
&lt;p&gt;​	如果是新链接，可以使用正则表达式匹配 url&lt;/p&gt;
&lt;p&gt;如果是用 ajax 的包：要注意的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看请求方法 是 GET 还是 POST。。。&lt;/li&gt;
&lt;li&gt;看响应头的 content-type 选择 reponse.text () 或 reponse.json ()&lt;/li&gt;
&lt;li&gt;看负载中带的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中文乱码问题（文件编码格式为 utf8 json.dump 时 ensure acill 选项关闭）&lt;/p&gt;
&lt;p&gt;什么是 ajax? （根据用户行为重新渲染界面。 不修改 url 在检查 - 网络 - XHR 中查看具体信息）&lt;/p&gt;
&lt;h2 id=&#34;bs4-数据解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bs4-数据解析&#34;&gt;#&lt;/a&gt; bs4 数据解析&lt;/h2&gt;
&lt;p&gt;bs4 数据解析的原理：&lt;/p&gt;
&lt;p&gt;1. 实例化一个 BeautifulSoup 对象 并且将页面原码数据加载到该对象中&lt;/p&gt;
&lt;p&gt;2. 通过调用 bs 对象中相关的属性或方法进行标签定位和数据提取&lt;/p&gt;
&lt;p&gt;如何实例化 beautifulsoup 对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将本地的 html 文档中的数据加载到该对象中&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;soup &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; BeautifulSoup&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lxml&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将互联网上获取的页面源码加载到该对象中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;page_text = response.text
soup = BeautifulSoup(page_text,&#39;lxml&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提供的用于数据解析的方法和属性：&lt;/p&gt;
&lt;p&gt;soup.tagname 返回 html 中第一次出现的 tagname 标签&lt;/p&gt;
&lt;p&gt;soup.find (&#39;tagname&#39;) 等同于 soup.tagname&lt;/p&gt;
&lt;p&gt;soup.find (&#39;tagname&#39;, class = &#39;classname&#39;) 定义属性位置， class 可以替换为 id attr&lt;/p&gt;
&lt;p&gt;soup.find_all (&#39;tagname&#39;) 找到符合要求所有标签 返回列表&lt;/p&gt;
&lt;p&gt;soup.select (&#39;.tang&#39;)  参数为某种选择器（id class 标签），返回一个列表&lt;/p&gt;
&lt;p&gt;soup.select (&#39;.tang&amp;gt; ul &amp;gt; li &amp;gt; a&#39;) 层级选择器，返回一个列表&lt;/p&gt;
&lt;p&gt;soup.selest (&#39;.tang&amp;gt; ul a&#39;) &amp;gt; 号表示一个层级，空格表示多个层级&lt;/p&gt;
&lt;p&gt;怎么获取标签之间的文本数据：&lt;/p&gt;
&lt;p&gt;使用	soup.a.text/string/get_text () 方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-   text/get_text(): 可以获取某一个标签中所有的文本内容（多套几层也能得到）
-   string：获取标签下直系的文本内容
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;怎么获取标签的属性值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;soup.select(&#39;tang &amp;gt; ul &amp;gt; li &amp;gt; a&#39;)[0][&#39;href&#39;]&lt;/code&gt;  直接获得 a 标签中的 herf 属性值&lt;/p&gt;
&lt;h2 id=&#34;xpath解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xpath解析&#34;&gt;#&lt;/a&gt; xpath 解析&lt;/h2&gt;
&lt;p&gt;xpath 解析： 最常用且最便捷高效的一种解析方式。&lt;/p&gt;
&lt;p&gt;xpath 解析原理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。
2. 调用etree对象中的xpath方法结合xpath表达式实现标签的定位和内容的捕获。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;环境安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- pip install lxml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如何实例化 etree 对象&lt;/p&gt;
&lt;p&gt;​	from lxml import etree&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将本地的 html 文档中的源码数据加载到 etree 对象中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt; etree.parse(filePath)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以将从互联网上获取的源码数据加载到该对象中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;etree.HTML(&#39;page_text&#39;)        -xpath(&#39;xpath表达式&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;/ 表示一个层级  // 表示多个层级&lt;/p&gt;
&lt;p&gt;路径后加 [@ 属性名] 精确定位 如 &lt;code&gt;xx_list = tree.xpath(&#39;//div[@class=&#39;song&#39;]&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;中括号内加数字代表取第几个（索引下标从 1 开始） &lt;code&gt;xx_list[0]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;获取文本：定位后加 /text ()&lt;/p&gt;
&lt;h2 id=&#34;中文出现乱码常见的处理方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中文出现乱码常见的处理方法&#34;&gt;#&lt;/a&gt; 中文出现乱码常见的处理方法&lt;/h2&gt;
&lt;p&gt;两种常见方法，一般能解决所有中文乱码问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对爬下来的整个数据改变编码：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encoding &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对出现问题的对象单独进行编码与解码&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;img_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; img_name&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;iso-8859-1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gbk&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;selenium模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selenium模块&#34;&gt;#&lt;/a&gt; selenium 模块&lt;/h2&gt;
&lt;h3 id=&#34;selenium模块与爬虫之间具有怎样的关联&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selenium模块与爬虫之间具有怎样的关联&#34;&gt;#&lt;/a&gt; selenium 模块与爬虫之间具有怎样的关联？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;便捷的获取网站中动态加载的数据&lt;/li&gt;
&lt;li&gt;便捷实现模拟登录&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么是selenium模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是selenium模块&#34;&gt;#&lt;/a&gt; 什么是 selenium 模块&lt;/h3&gt;
&lt;p&gt;基于浏览器自动化的一个模块。 （编写代码让浏览器完成自动化操作）&lt;/p&gt;
&lt;h3 id=&#34;selenium使用流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selenium使用流程&#34;&gt;#&lt;/a&gt; selenium 使用流程：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;环境安装：pip install selenium&lt;/li&gt;
&lt;li&gt;下载一个浏览器的驱动程序&lt;/li&gt;
&lt;li&gt;实例化一个浏览器对象&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; selenium &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; webdriver&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; selenium&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;webdriver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;edge&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;service &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 实例化一个浏览器对象 参数中的路径为浏览器驱动程序的路径（建议与程序在同一路径下）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;service &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Service&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;executable_path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./edgedriver.exe&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bro &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; webdriver&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Edge&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;service &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; service&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;编写基于浏览器的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;selenium常用函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selenium常用函数&#34;&gt;#&lt;/a&gt; selenium 常用函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bro.get (url)  											让浏览器发起一个指定 url 对应请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;page_text = bro.page_source		  获取浏览器当前页面的页面源码数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标签定位：使用 find_element 方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	search_input = bro.find_element(By.[attrname], &amp;quot;[attr]&#39;s value&amp;quot;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标签交互：&lt;/p&gt;
&lt;p&gt;​	search_input.send_keys(&#39;xxx&#39;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行一组 js 代码&lt;/p&gt;
&lt;p&gt;​	bro.execute_script(&#39;code...&#39;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击按钮：&lt;/p&gt;
&lt;p&gt;​	btn.click()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后退 / 前进&lt;/p&gt;
&lt;p&gt;​	bro.back()/forward()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;selenium处理iframe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selenium处理iframe&#34;&gt;#&lt;/a&gt; selenium 处理 iframe&lt;/h3&gt;
&lt;p&gt;bro.switch_to.frame(&#39;frame_name&#39;)&lt;/p&gt;
&lt;h3 id=&#34;动作链项目暂时用不到&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动作链项目暂时用不到&#34;&gt;#&lt;/a&gt; 动作链 (项目暂时用不到)&lt;/h3&gt;
&lt;p&gt;南大相关网站的登录还不需要滑块验证&lt;/p&gt;
&lt;p&gt;碰到滑块验证的时候可能就需要用到了&lt;/p&gt;
&lt;h3 id=&#34;selenium实现模拟登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selenium实现模拟登录&#34;&gt;#&lt;/a&gt; selenium 实现模拟登录&lt;/h3&gt;
&lt;p&gt;结合前面的基础知识 先点击账号密码登录按钮，找到账号输入框与密码输入框，&lt;/p&gt;
&lt;p&gt;输入账号密码，点击登录按钮&lt;/p&gt;
&lt;h2 id=&#34;模拟登陆cookie操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模拟登陆cookie操作&#34;&gt;#&lt;/a&gt; 模拟登陆 cookie 操作&lt;/h2&gt;
&lt;h3 id=&#34;cookie有什么作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie有什么作用&#34;&gt;#&lt;/a&gt; cookie 有什么作用&lt;/h3&gt;
&lt;p&gt;TCP/IP 协议是无状态的，因此通常的 get 请求 服务器端不知道你有没有处于登录状态&lt;/p&gt;
&lt;p&gt;携带 cookie 值的 get 请求 能使服务器端知道你已经处于登录状态&lt;/p&gt;
&lt;h3 id=&#34;手动cookie不推荐&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#手动cookie不推荐&#34;&gt;#&lt;/a&gt; 手动 cookie（不推荐）&lt;/h3&gt;
&lt;p&gt;登录网站后通过抓包工具手动复制 cookie 值 将 cookie 值封装到 headers 中，写死在程序里&lt;/p&gt;
&lt;p&gt;缺点：cookie 值一段时间后会过期&lt;/p&gt;
&lt;h3 id=&#34;自动处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自动处理&#34;&gt;#&lt;/a&gt; 自动处理&lt;/h3&gt;
&lt;p&gt;cookie 值是如何产生的？既然 cookie 值能让服务器知道你已经处于登录状态，那么理所当然 cookie 值是登录时发送 post 请求后服务器端生成后发送给客户端的&lt;/p&gt;
&lt;p&gt;session 会话对象：&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以进行请求的发送&lt;/li&gt;
&lt;li&gt;如果请求过程中产生了 cookie，则该 cookie 会被自动存储 / 携带在该 session 对象中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建一个 session 对象 ：  &lt;code&gt;session = requests.Session()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 session 对象进行模拟登录 post 请求的发送 (cookie 就会被存储在 session 中)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;session 对象对个人主页对应的 get 请求进行发送（携带了 cookie）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果登录找不到 post 请求或遇到问题导致获得不到 cookie：&lt;/p&gt;
&lt;p&gt;​	适用 selenium 登录后 用下列方法直接取得 cookie:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; bro&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_cookies&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bro&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cookies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 获取 cookie 中的 name 和 value, 转化成 requests 可以使⽤的形式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; cookie &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cookies&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;cookie&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cookie&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后就能用 cookies 了：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; requests&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;detail_url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; headers&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;headers&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; cookies&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;cookies&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;并行爬取异步爬虫&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并行爬取异步爬虫&#34;&gt;#&lt;/a&gt; 并行爬取（异步爬虫）&lt;/h2&gt;
&lt;p&gt;原理：利用进程池实现并行爬取&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Pool&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建进程池&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Pool&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processes&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;function_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; iterable&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;chunksize&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;processes 参数设置注意&lt;/strong&gt;：当进程数量大于 CPU 的内核数量时，等待运行的进程会等到其他进程运行完毕让出内核为止。因此，如果 CPU 是单核，就无法进行多进程并行。在使用多进程爬虫之前，我们需要先了解计算机 CPU 的核心数量。这里用到了 multiprocessing:&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; cpu_count&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cpu_count&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行结果为 16。&lt;/p&gt;
&lt;p&gt;使用 eg：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;urls &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;https://xjh.haitou.cc/xa/after/page-&amp;#123;&amp;#125;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Pool&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;processes&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#get_xuanjing 为参数是一个 url 的爬虫函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;get_xuanjiang&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;urls&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 关闭进程池，不再接受新的进程&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 主进程阻塞等待子进程的退出&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;有关爬虫的一些问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有关爬虫的一些问题&#34;&gt;#&lt;/a&gt; 有关爬虫的一些问题：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;爬下来的文本中带有 &amp;amp; nbsp 在 html 中表示 no breaking space（不自动换行的空格）&lt;/p&gt;
&lt;p&gt;此时可以采用 str.replace (u&#39;\xa0&#39;, &#39;&#39;) 来解决 str 为待处理字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;requests 里.text 与 .content 方法的区别：&lt;/p&gt;
&lt;p&gt;两者区别在于，content 中间存的是字节码，而 text 中存的是 Beautifulsoup 根据猜测的编码方式将 content 内容编码成字符串。&lt;/p&gt;
&lt;p&gt;直接输出 content，会发现前面存在 b&#39; 这样的标志，这是字节字符串的标志，而 text 是，没有前面的 b, 对于纯 ascii 码，这两个可以说一模一样，对于其他的文字，需要正确编码才能正常显示。大部分情况建议使用.text，因为显示的是汉字，但有时会显示乱码，这时需要用.content.decode (&#39;utf-8&#39;)，中文常用 utf-8 和 GBK，GB2312 等。这样可以手工选择文字编码方式。&lt;/p&gt;
&lt;p&gt;所以简而言之，.text 是现成的字符串，.content 还要编码，但是.text 不是所有时候显示都正常，这是就需要用.content 进行手动编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两种常见方法，一般能解决所有中文乱码问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对爬下来的整个数据改变编码：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encoding &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对出现问题的对象单独进行编码与解码&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;img_name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; img_name&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;iso-8859-1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gbk&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid>
            <title>C++：移动语义与右值引用</title>
            <link>http://example.com/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link>
            <category>C++</category>
            <pubDate>Mon, 14 Nov 2022 16:08:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c的移动语义与右值引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c的移动语义与右值引用&#34;&gt;#&lt;/a&gt; C++ 的移动语义与右值引用&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;preview.jpg&#34; alt=&#34;Gaze&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;移动语义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移动语义&#34;&gt;#&lt;/a&gt; 移动语义&lt;/h2&gt;
&lt;h3 id=&#34;为何需要移动语义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为何需要移动语义&#34;&gt;#&lt;/a&gt; 为何需要移动语义&lt;/h3&gt;
&lt;p&gt;假设有如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; vstr;// build up a vector of 20000 strings,each of 1000 characters
vector&amp;lt;string&amp;gt; vstr_copy1(vstr);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了初始化 vstr_copy1 先调用 vector 的复制构造函数，使用 new 给 20000 个 string 对象分配内存，而每个 string 对象又调用 string 的复制构造函数，为 1000 个字符分配内存。这很浪费时间，但如果 vstr 与 vstr_copy1 都需要使用，这很难避免。&lt;/p&gt;
&lt;p&gt;可有时候这样不太妥当，例如 vstr 不再被使用时。例如如下定义的函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; allcaps(const vector&amp;lt;string&amp;gt; &amp;amp; vs)
&amp;#123;
    vector&amp;lt;string&amp;gt; temp;
    //让temp存储vs中string的大写版本的代码
    return temp;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;并这样使用它：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; vstr;
vector&amp;lt;string&amp;gt; vstr_copy1(vstr); //#1
vector&amp;lt;string&amp;gt; vstr_copy2(allcaps(vstr)); //#2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;allcaps () 创建了对象 temp，该对象管理着 20000000 个字符；语句二使用 vector 和 string 的复制构造函数创建了一个 temp 的副本，然后删除了 temp，做了大量无用功。如果编译器直接把 temp 对数据的所有权转让给 vstr_copy2，将会更好。&lt;/p&gt;
&lt;p&gt;实际上，我们可以把实际内容保留在原来地方，而之修改记录，这就是移动语义的本质，它避免了移动原始数据，而转为修改记录。&lt;/p&gt;
&lt;p&gt;要实现移动语义，需要采取某种方式，让编译器知道什么时候需要复制。这就是右值引用发挥作用的地方。可定义两个构造函数，其中一个是常规复制构造函数，它使用 const 左值引用作为参数，如语句 #1。另一个是移动构造函数，它使用右值引用作为参数，该引用关联到右值实参，如语句 #2 中 allcaps (vstr) 的返回值。移动构造函数可能修改其实参，这意味着右值引用参数不应是 const。&lt;/p&gt;
&lt;h3 id=&#34;如何使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用&#34;&gt;#&lt;/a&gt; 如何使用&lt;/h3&gt;
&lt;p&gt;直接将变量的值赋值为参数的变量值，如果变量为指针，为了防止 double free，还需将参数的指针改为 nullptr。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Useless(Useless &amp;amp;&amp;amp; f) : n(f.n)
&amp;#123;
	++ct;
	pc = f.pc;
	f.pc = nullptr;
	f.n = 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;强制移动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#强制移动&#34;&gt;#&lt;/a&gt; 强制移动&lt;/h3&gt;
&lt;p&gt;移动构造函数和移动赋值运算符使用右值，如果要让它们使用左值，该怎么办？例如，将一个左值变量赋值给一个对象，并立刻丢弃这个变量。此时可以使用头文件 utility 中声明的函数 std::move。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/23/Maven-%E5%AD%A6%E4%B9%A0/</guid>
            <title>Maven 学习</title>
            <link>http://example.com/2022/10/23/Maven-%E5%AD%A6%E4%B9%A0/</link>
            <category>Maven</category>
            <pubDate>Sun, 23 Oct 2022 21:44:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h1&gt;
&lt;h1 id=&#34;maven-学习&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maven-学习&#34;&gt;#&lt;/a&gt; Maven  学习&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;​																&lt;img data-src=&#34;rebecca.jpg&#34; alt=&#34;芝士rebecca&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;maven简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maven简介&#34;&gt;#&lt;/a&gt; Maven 简介&lt;/h2&gt;
&lt;p&gt;Maven 是 Apache 组织下一个比较著名的开源项目，主要服务于基于 java 平台的项目构建，依赖管理和项目信息管理。&lt;/p&gt;
&lt;p&gt;类比做糖醋排骨，传统需要自己配置酱料，比如加入多少克糖，多少克水，多少克... 而现在只用去超市购买酱料包就好。Maven 项目省去了开发者去各大网站下载 jar 包并解决相互间复杂依赖关系的时间。除此之外，除了编写源代码，我们有相当一部分时间花在了编译，运行单元测试，生成文档，打包和部署等工作上，这就是构建。手工做这些工作的成本太高了，于是可以用软件的方法让这一系列工作完全自动化，使得繁琐的步骤能够自动完成，很快得到最终结果。&lt;/p&gt;
&lt;h3 id=&#34;项目构建工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目构建工具&#34;&gt;#&lt;/a&gt; 项目构建工具&lt;/h3&gt;
&lt;p&gt;Ant 构建： 2000 年左右出现的构建工具，当时是最流行的 java 构建工具，不过它的 XML 脚本编写格式让 XML 文件特别大。对工程构建过程中的过程控制特别好。&lt;/p&gt;
&lt;p&gt;Maven 构建：项目对象模型，通过其描述信息来管理项目的构建，报告和文档的软件项目管理工具，填补了 Ant 的缺点。Maven 第一次支持了从网络上下载的功能。Maven 专注的是依赖管理，使用 java 编写。&lt;/p&gt;
&lt;p&gt;Gradle：谷歌的御用 Android 管理工具&lt;/p&gt;
&lt;p&gt;Ant 比较老，目前 Maven 使用较多&lt;/p&gt;
&lt;h2 id=&#34;maven的四大特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maven的四大特性&#34;&gt;#&lt;/a&gt; Maven 的四大特性&lt;/h2&gt;
&lt;h3 id=&#34;依赖管理系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#依赖管理系统&#34;&gt;#&lt;/a&gt; 依赖管理系统&lt;/h3&gt;
&lt;p&gt;Maven 为 java 世界引入了一个新的依赖管理系统 ——jar 包管理。jar 升级时修改配置文件即可。在 java 世界中，可以用 **&lt;em&gt;groupId&lt;/em&gt; **   、&lt;em&gt;&lt;strong&gt;artifactId&lt;/strong&gt;&lt;/em&gt;   、&lt;em&gt;&lt;strong&gt;version&lt;/strong&gt;&lt;/em&gt; 组成的 Coordination（坐标）唯一标识一个依赖&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; javax.servlet &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; //当前Maven项目隶属的实际项目或公司名称（jar包所在仓库路径）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; javax.servlet-api &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; //定义实际项目中的一个Maven模块/项目名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 3.1.0 &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; //Maven项目当前所处的版本&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;多模块构建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多模块构建&#34;&gt;#&lt;/a&gt; 多模块构建&lt;/h3&gt;
&lt;p&gt;可以将一个项目分解为多个模块。&lt;/p&gt;
&lt;p&gt;在 Maven 中定义一个 parent POM 作为一组 module 的聚合 POM，在该 POM 中可以使用 &amp;lt;modules&amp;gt; 标签来定义一组子模块。parent POM 中的 build 配置和依赖配置都会继承给子 module。&lt;/p&gt;
&lt;h3 id=&#34;一致的项目结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一致的项目结构&#34;&gt;#&lt;/a&gt; 一致的项目结构&lt;/h3&gt;
&lt;p&gt;Maven 理念： Convension over configuration (约定大于配置)。其制定了一套项目目录结构作为标准的 java 项目结构，解决不同 IDE 带来的文件目录不一致问题。&lt;/p&gt;
&lt;h3 id=&#34;一致的构建模型和插件机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一致的构建模型和插件机制&#34;&gt;#&lt;/a&gt; 一致的构建模型和插件机制&lt;/h3&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	......&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;plugin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;引入插件&lt;/p&gt;
&lt;h2 id=&#34;maven项目结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maven项目结构&#34;&gt;#&lt;/a&gt; Maven 项目结构&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- src
	- main                   ：程序功能代码
		- Java               ：java代码
		- resource           ：资源代码、配置代码
	- test                   ：测试代码
		- Java               ：单元测试java代码
		- resource           ：资源代码、配置代码
	- pom.xml                ：项目对象模型

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不用 IDE 的话上述结构都需要手动创建&lt;/p&gt;
&lt;p&gt;pom 中的标签具体作用可以参考 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9tYXZlbi9tYXZlbi1wb20uaHRtbA==&#34;&gt;https://www.runoob.com/maven/maven-pom.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;在idea中使用maven&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在idea中使用maven&#34;&gt;#&lt;/a&gt; 在 IDEA 中使用 Maven&lt;/h2&gt;
&lt;p&gt;IDEA 中默认捆绑了 Maven 可以在设置里更改 Maven 有关的配置&lt;/p&gt;
&lt;p&gt;创建 Maven 项目：文件 -&amp;gt; 新建 -&amp;gt; 项目 构建系统选 Maven（上述是常规 Maven 项目）&lt;/p&gt;
&lt;p&gt;​										可以选择生成器中的 Maven 中的 Archetype 选择模板（如 quickstart）&lt;/p&gt;
&lt;h2 id=&#34;maven仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#maven仓库&#34;&gt;#&lt;/a&gt; Maven 仓库&lt;/h2&gt;
&lt;p&gt;对于 Maven 来说，仓库只有两类： 本地仓库和远程仓库&lt;/p&gt;
&lt;p&gt;Maven 根据坐标寻找构件的时候，它首先会查看本地仓库，如果本地仓库存在，则直接使用；如果本地没有，Maven 就回去远程仓库查找，再下载到本地仓库再使用。如果本地和远程都没有就会报错。&lt;/p&gt;
&lt;p&gt;远程仓库分为 3 种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;中央仓库：默认下载 jar 包的地方，在国外，包含了 2000 多个开源项目，每天接收 1 亿次以上的访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私服：一种特殊的远程仓库，它是架设在局域网内的仓库服务。私服代理广域网上的远程仓库，供局域网内的 Maven 用户使用。当 Maven 需要下载构件时，它去私服当中找，如果私服没有，则从外部远程仓库下载，并缓存在私服上，再为 maven 提供。此外，一些无法从外部仓库下载的构件也能从本地上传到私服提供局域网中其他人使用。（在公司或学校内网中自己写的构件就可以上传到私服让别人使用了） 私服优点： 节省自己的外网带宽、 加速 Maven 构建、部署第三方控件、提高稳定性、降低中央仓库的负荷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他公共库&lt;/p&gt;
&lt;p&gt;如阿里云仓库，国内地址下载比中央仓库快。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/05/STL%E5%AD%A6%E4%B9%A0-01-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8Evector/</guid>
            <title>STL学习-01-智能指针与vector</title>
            <link>http://example.com/2022/10/05/STL%E5%AD%A6%E4%B9%A0-01-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8Evector/</link>
            <category>STL C++</category>
            <pubDate>Wed, 05 Oct 2022 19:54:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c-的标准模板库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c-的标准模板库&#34;&gt;#&lt;/a&gt; c++ 的标准模板库&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E9%9B%A8%E5%A4%A9-%E5%A5%B3%E5%AD%A9-%E5%95%86%E5%BA%97.jpg&#34; alt=&#34;雨天 女孩 商店&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;智能指针模板类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能指针模板类&#34;&gt;#&lt;/a&gt; 智能指针模板类&lt;/h2&gt;
&lt;p&gt;智能指针是类似于指针的类对象，比较方便内存管理。传统的指针必须时时刻刻记得 new 与 delete 的配套使用，很容易造成内存泄漏。而智能指针实际上类似于一个类，有自己的析构函数，所以编译器再不需要智能指针时便可以自动调用其析构函数释放内存，也就是可以略去 delete 操作。&lt;/p&gt;
&lt;h3 id=&#34;使用智能指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用智能指针&#34;&gt;#&lt;/a&gt; 使用智能指针&lt;/h3&gt;
&lt;p&gt;要创建智能指针对象，必须包含头文件 memory 然后使用通常的模板语法来实例化所需类型的指针。&lt;/p&gt;
&lt;p&gt;声明：  &lt;code&gt; template &amp;lt;class X&amp;gt; class auto_ptr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 eg：  &lt;code&gt; auto_ptr&amp;lt;double&amp;gt; pd(new double);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​					  &lt;code&gt;auto_ptr&amp;lt;string&amp;gt; ps(new string);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意： 智能指针模板位于名称空间 std 中。&lt;/p&gt;
&lt;h3 id=&#34;有关智能指针的注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有关智能指针的注意事项&#34;&gt;#&lt;/a&gt; 有关智能指针的注意事项&lt;/h3&gt;
&lt;p&gt;c++ 目前有三种常见智能指针：auto_ptr, unique_ptr,shared_ptr&lt;/p&gt;
&lt;p&gt;在使用智能指针时，可能会遇到问题，比如如果两个智能指针指向同一块内存区域，则程序会删除同一个对象两次，这是会造成极大错误的。为避免这种问题，方法有多种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立所有权概念，对于特定对象，只有一个智能指针可以拥有他。 这是用于 auto_ptr 和 unique_ptr 的策略，但 unique_ptr 更严格&lt;/li&gt;
&lt;li&gt;创建智能更高的指针，跟踪引用特定对象的智能指针数，这称为引用计数。当最后一个指针过期时，才调用 delete。这是 shared_ptr 的策略&lt;/li&gt;
&lt;li&gt;执行深拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;auto_ptr 和 unique_ptr 的区别：&lt;/p&gt;
&lt;p&gt;​		两个 auto_ptr 指向同一块内存区域时，可以通过编译，但可能在运行时报错。两个 unique_ptr 指向同一块内存区域时，会在编译阶段就报错（除非赋值给其中一个 unique_ptr 的另一个 unique_ptr 是一个用完即毁的智能指针，如某一函数中 new 出来的 unique_ptr 的返回）。&lt;/p&gt;
&lt;h2 id=&#34;模板类vector&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模板类vector&#34;&gt;#&lt;/a&gt; 模板类 vector&lt;/h2&gt;
&lt;h3 id=&#34;创建vector&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建vector&#34;&gt;#&lt;/a&gt; 创建 vector&lt;/h3&gt;
&lt;p&gt;要创建 vector 模板对象， 可使用通常的 &amp;lt;type&amp;gt; 表示法来指出要使用的类型。另外，vector 模板使用动态内存分配，因此可以用初始化参数指出需要多少元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt; vector&amp;lt;int&amp;gt; ratings(5);  // a vector of 5 ints&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;可对vector执行的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可对vector执行的操作&#34;&gt;#&lt;/a&gt; 可对 vector 执行的操作&lt;/h3&gt;
&lt;p&gt;size ()—— 返回容器中元素数目        swap ()—— 交换两个容器的内容             begin ()—— 返回一个指向容器中第一个元素的 &lt;em&gt;&lt;strong&gt;迭代器&lt;/strong&gt;&lt;/em&gt;      end () 返回一个表示超过容器尾的&lt;em&gt;&lt;strong&gt;迭代器&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;什么是迭代器？ 它是一个广义的指针，可以对其执行类似指针的操作，如解除引用 *、递增 ++&lt;/p&gt;
&lt;p&gt;STL 的每个容器类都定义了一个合适的迭代器，该迭代器的类型是一个名为 iterator 的 typedef，作用域为整个类。如要为 vector 的 double 类型规范声明一个迭代器，可以这样做：&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;vector&amp;lt;double&amp;gt;::iterator pd;//  pd an iterator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假设 scores 是一个 vector&amp;lt;double&amp;gt; 对象，可以利用好 auto 关键字简化书写：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auto pd = scores.begin()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;vector 还支持 push_back () (内存不够会自动扩充容器), erase () insert () 等方法&lt;/p&gt;
&lt;h3 id=&#34;其它操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其它操作&#34;&gt;#&lt;/a&gt; 其它操作&lt;/h3&gt;
&lt;p&gt;有两个具有代表性的 STL 函数：for_each () 和 sort () 。&lt;/p&gt;
&lt;p&gt;for_each () 函数可用于很多容器类，它接受 3 个参数。前两个是定义容器中的迭代器，最后一个是一个函数指针。for_each () 函数将被指向的函数应用于容器区间中的各个元素，可以用 for_each () 函数来代替 for 循环。&lt;/p&gt;
&lt;p&gt;eg:  &lt;code&gt;for_each(books.begin(), books.end(), ShowReview);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;sort () 函数也要求函数支持随机访问。该函数接收两个定义区间的迭代器参数。如果容器中的元素有内置的 &amp;lt; 运算符进行值比较，可以直接使用。如果容器中的元素是用户定义的类对象，则用户需要利用重载定义 &amp;lt; 运算符。&lt;/p&gt;
&lt;p&gt;还有第二个版本的 sort () 函数，它接收第三个参数，该参数是一个函数指针，不一定是用于比较的 operator&amp;lt;()，而是一个返回值可转换为 bool 类型的函数，它接收两个容器中的元素，返回为 false 表示两个参数的顺序不正确。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/02/Git%E5%AD%A6%E4%B9%A002-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</guid>
            <title>Git学习02-分支管理</title>
            <link>http://example.com/2022/10/02/Git%E5%AD%A6%E4%B9%A002-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</link>
            <category>git</category>
            <pubDate>Sun, 02 Oct 2022 16:11:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;git学习02-分支管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git学习02-分支管理&#34;&gt;#&lt;/a&gt; Git 学习 02 - 分支管理&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E8%BD%BB%E9%9F%B3%E5%B0%91%E5%A5%B3.jpg&#34; alt=&#34;轻音少女&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建与合并分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建与合并分支&#34;&gt;#&lt;/a&gt; 创建与合并分支&lt;/h2&gt;
&lt;p&gt;查看分支 ：  &lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建分支：  &lt;code&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换分支：  &lt;code&gt;git switch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建 + 切换分支:  &lt;code&gt;git switch -c &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;合并某分支到当前分支 ：  &lt;code&gt;git merge &amp;lt;name&amp;gt;&lt;/code&gt;  这里的 name 使某分支的 name&lt;/p&gt;
&lt;p&gt;删除分支：  &lt;code&gt;git branch -d &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;解决冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决冲突&#34;&gt;#&lt;/a&gt; 解决冲突&lt;/h2&gt;
&lt;p&gt;eg：当你创建了一个 feature1 分支 其在 master 分支上添加了一些内容并进行提交，此时切换会 master 分支并使用  &lt;code&gt;git merge feature1&lt;/code&gt;  合并分支是不会有问题的（Git 会在底层移动 master 的指针到 feature1 上）。但如果你在 feature1 上修改了某个文件并提交，在切换会 master 分支后修改了同一份文件并提交，那么此时 git merge 就会报错了。&lt;/p&gt;
&lt;p&gt;此时可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;git status&lt;/code&gt;  查看冲突的文件（如果你改了很多，分不清哪里冲突了）&lt;/li&gt;
&lt;li&gt;手动解决冲突&lt;/li&gt;
&lt;li&gt;再提交&lt;/li&gt;
&lt;li&gt;最后删除分支（如删除 feature1)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git log --graph --pretty=oneline --abbrev-commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以形象地查看分支的合并情况（Git 会生成一副图）&lt;/p&gt;
&lt;h2 id=&#34;分支管理策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分支管理策略&#34;&gt;#&lt;/a&gt; 分支管理策略&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git merge --no-ff -m &amp;quot;commit message&amp;quot; &amp;lt;branch name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通常 ，合并分支时，Git 会用 Fast forward 模式（移动指针） ，这种模式下，删除分支后，会丢掉分支信息&lt;/p&gt;
&lt;p&gt;如果要强制禁用 Fast forward 模式， Git 就会再 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息。&lt;/p&gt;
&lt;p&gt;--no--ff 参数表示禁用 Fast forward&lt;/p&gt;
&lt;h2 id=&#34;git的更多操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git的更多操作&#34;&gt;#&lt;/a&gt; git 的更多操作&lt;/h2&gt;
&lt;p&gt;Git 还有许多高级功能。如暂时储存当前工作、多人协作、标签管理等。考虑到目前还接触不到 ，上述功能等需要使用了再来学习更新吧。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/01/Git%E5%AD%A6%E4%B9%A001-%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
            <title>git操作</title>
            <link>http://example.com/2022/10/01/Git%E5%AD%A6%E4%B9%A001-%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
            <category>git</category>
            <pubDate>Sat, 01 Oct 2022 11:34:47 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;git学习01-基本操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git学习01-基本操作&#34;&gt;#&lt;/a&gt; Git 学习 01- 基本操作&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E4%B8%89%E5%8F%B6.jpg&#34; alt=&#34;三叶&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建版本库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建版本库&#34;&gt;#&lt;/a&gt; 创建版本库&lt;/h2&gt;
&lt;p&gt;版本库 (repository) 是一个目录，这个目录里的所有文件都可以被 Git 管理起来，每个文件的修改、删除、Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以还原。&lt;/p&gt;
&lt;p&gt;创建版本库步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个合适地方，创建一个空目录&lt;/li&gt;
&lt;li&gt;通过  &lt;code&gt;git init&lt;/code&gt;  命令把这个目录变成 Git 可以管理的仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;把文件添加到版本库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#把文件添加到版本库&#34;&gt;#&lt;/a&gt; 把文件添加到版本库&lt;/h2&gt;
&lt;p&gt;把一个文件放到仓库只需要两步（如添加一个 readme.txt 文件）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git add readme.txt&lt;/code&gt;   用命令 git add 告诉 Git， 把文件添加到暂存区。可反复多次使用，添加多个文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git commit -m &amp;quot;wrote a readme file&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;git commit 告诉 Git, 把文件提交到仓库。-m 后面输入的是本次提交的说明，注意说明一定要有意义，如告诉仓库本次提交做了什么事，方便后续的版本控制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;查看工作区状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看工作区状态&#34;&gt;#&lt;/a&gt; 查看工作区状态&lt;/h2&gt;
&lt;p&gt;要查看当前工作区的状态，使用  &lt;code&gt;git status&lt;/code&gt;  命令&lt;/p&gt;
&lt;p&gt;如果有文件被修改过，你又想知道修改了什么 用 &lt;code&gt;git diff filename&lt;/code&gt;  查看修改的内容。git diff 命令可以告诉你当前工作区的文件和仓库的有什么不同。&lt;/p&gt;
&lt;h2 id=&#34;版本回退&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本回退&#34;&gt;#&lt;/a&gt; 版本回退&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;  指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令 &lt;code&gt;git reset --hard commit_id&lt;/code&gt; 。版号只要前几位就行了，只要能识别，也可以用 HEAD 和 ^ 表示回退到哪一版。&lt;/li&gt;
&lt;li&gt;穿梭前，用 &lt;code&gt;git log&lt;/code&gt;  可以查看提交历史，以便确定要回退到哪个版本。&lt;/li&gt;
&lt;li&gt;重返过去时未来的记录用 git log 就看不到了。要重返未来，用 &lt;code&gt;git reflog&lt;/code&gt;  查看命令历史，以便确定要回到未来的哪个版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;撤销修改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#撤销修改&#34;&gt;#&lt;/a&gt; 撤销修改&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;场景 1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 &lt;code&gt;git checkout -- filename&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;场景 2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 &lt;code&gt;git reset HEAD &amp;lt;filename&amp;gt;&lt;/code&gt; ，就回到了场景 1，第二步按场景 1 操作。&lt;/li&gt;
&lt;li&gt;场景 3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;删除文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除文件&#34;&gt;#&lt;/a&gt; 删除文件&lt;/h2&gt;
&lt;p&gt;如果你在文件管理器中把某个文件删了，或者用 &lt;code&gt;rm&lt;/code&gt;  命令删了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个时候，Git 知道你删了文件，因此，工作区和版本库就不一致了。&lt;/p&gt;
&lt;p&gt;现在有两种情况。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;确实要从版本库中删除该文件，那就用命令  &lt;code&gt;git rm&lt;/code&gt;  删掉 并且 git commit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rm test.txt
$ git commit -m &amp;quot;remove test.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tips：先手动删除文件，然后使用 git rm &amp;lt;file&amp;gt; 和 git add&amp;lt;file &amp;gt; 效果是一样的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除错了，要从版本库中把误删的文件恢复到最新版本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -- test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以一键还原。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;添加远程库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加远程库&#34;&gt;#&lt;/a&gt; 添加远程库&lt;/h2&gt;
&lt;p&gt;远程库既可以充当本地仓库的备份，又可以让其他人通过该仓库来协作，可谓一举多得。&lt;/p&gt;
&lt;p&gt;创建远程库并将本地与远程库连接。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;登录 github 创建一个新的仓库，复制该仓库的 SSH&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在本地仓库上运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote add origin git@github.com:maoding1/learngit.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(后面的一大串是复制的 SSH) 使本地仓库与远程库连接。&lt;/p&gt;
&lt;p&gt;git 会把远程库的名字默认设为 origin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把本地内容推送到远程库上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-u 参数实际上设置了远程仓库的默认值（比如有多个远程仓库） 之后就可以简化 git pull 和 git push 的命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在只要本地做了提交，就可以通过  &lt;code&gt;git push origin master&lt;/code&gt;  把本地分支的修改推送到 github&lt;/p&gt;
&lt;p&gt;tips：要删除远程库 可以用 &lt;code&gt;git remote rm &amp;lt;name&amp;gt;&lt;/code&gt;  命令，但这只是解除了本地与远程的绑定关系，要真正删除远程库，需要登陆 github 手动删除。&lt;/p&gt;
&lt;h2 id=&#34;克隆远程仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#克隆远程仓库&#34;&gt;#&lt;/a&gt; 克隆远程仓库&lt;/h2&gt;
&lt;p&gt;知道仓库的 SSH 后，通过 &lt;code&gt;git clone SSH&lt;/code&gt;  命令克隆到本地&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/09/30/Linux%E2%80%9401-Linux%E5%AE%89%E8%A3%85%E5%B8%B8%E8%AF%86/</guid>
            <title>Linux—01-Linux安装常识</title>
            <link>http://example.com/2022/09/30/Linux%E2%80%9401-Linux%E5%AE%89%E8%A3%85%E5%B8%B8%E8%AF%86/</link>
            <category>Linux</category>
            <pubDate>Fri, 30 Sep 2022 15:21:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;linux系统的安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux系统的安装&#34;&gt;#&lt;/a&gt; Linux 系统的安装&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;preview.jpg&#34; alt=&#34;芝士辉夜&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;交换分区&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交换分区&#34;&gt;#&lt;/a&gt; 交换分区&lt;/h2&gt;
&lt;p&gt;直接从物理内存读写数据比从硬盘读写快的多，然而物理硬盘是有限的，这样就使用到了虚拟内存。虚拟内存是为了满足物理内存的不足而提出的一种策略，他是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为&lt;strong&gt;交换分区（swap 分区）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;内核会将暂时不用的内存信息写到交换分区，使物理内存得到释放并用于其它用途，当需要原始内容时，这些信息会被重新从交换分区读入物理内存。&lt;/p&gt;
&lt;p&gt;Linux 的内存管理采用分页存取机制，为了保证物理内存能得到充分利用，内核会在适当时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。&lt;/p&gt;
&lt;h2 id=&#34;分区命名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分区命名&#34;&gt;#&lt;/a&gt; 分区命名&lt;/h2&gt;
&lt;p&gt;Linux 系统使用字母和数字的组合来指代硬盘分区，该命名方案是基于文件的，文件名的格式为 */dev/xxyN* (比如 /dev/sda1 分区)&lt;/p&gt;
&lt;p&gt;/dev: 这是 Linux 系统中所有设备文件所在的目录名。因为分区位于硬盘上，而硬盘是设备，所以这些文件代表了在 /dev 上所有可能的分区&lt;/p&gt;
&lt;p&gt;xx：分区名的前两个字母表示分区所在设备的类型，通常是 hd（IDE）硬盘或 sd（SCSI 硬盘）&lt;/p&gt;
&lt;p&gt;y: 这个字母表示分区所在的设备。例如，/dev/hda（第一个 IDE 硬盘）或 /dev/sdb (第二个 SCSI 硬盘)&lt;/p&gt;
&lt;p&gt;N：最后的数字 N 代表硬盘上的第几个分区。&lt;/p&gt;
&lt;h2 id=&#34;挂载目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#挂载目录&#34;&gt;#&lt;/a&gt; 挂载目录&lt;/h2&gt;
&lt;p&gt;Linux 系统中的每一个分区都是构成支持一组文件和目录 所必需的存储区的一部分。它是通过挂载来实现的，挂载 是将分区关联到某一目录的过程，挂载分区使起始于这个 指定目录（称为挂载目录）的存储区能够被使用。&lt;/p&gt;
&lt;p&gt;例如，如果分区 /dev/sda5 被挂载在目录 /usr 上，这意味着 所有在 /usr 下的文件和目录在物理上位于 /dev/sda5。因此 文件 /usr/bin/cal 被保存在分区 /dev/sda5 上，而文件 /etc/passwd 却不是。&lt;/p&gt;
&lt;p&gt;/usr 目录下的目录还有可能是其它分区的挂载目录。例如， 某个分区（如 /dev/sda7）可以被挂载到 /usr/local 目录下， 这意味着文件 /usr/local/man/whatis 将位于分区 /dev/sda7 上，而不是分区 /dev/sda5 上。&lt;/p&gt;
&lt;h2 id=&#34;分区规划&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分区规划&#34;&gt;#&lt;/a&gt; 分区规划&lt;/h2&gt;
&lt;p&gt;合理的分区规划 ：&lt;/p&gt;
&lt;p&gt;・swap 分区：实现虚拟内存，建议大小是物理内存 的 1～2 倍；&lt;/p&gt;
&lt;p&gt;・/boot 分区：建议大小最少为 200MB；・/usr 分区：用来存放 Linux 系统中的应用程序， 其相关数据较多，建议大小最少为 8GB；&lt;/p&gt;
&lt;p&gt;・/var 分区：用来存放 Linux 系统中经常变化的数 据以及日志文件，建议大小最少为 1GB；&lt;/p&gt;
&lt;p&gt;・/ 分区：Linux 系统的根目录，所有的目录都挂在 这个目录下面，建议大小最少为 1GB；&lt;/p&gt;
&lt;p&gt;・/home 分区：存放普通用户的数据，是普通用户 的宿主目录，建议大小为剩下的空间。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
