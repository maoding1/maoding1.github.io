{
    "version": "https://jsonfeed.org/version/1",
    "title": "MikeMao's blog • All posts by \"c++ 读书笔记\" tag",
    "description": "a student of NJU who use this website to record learning experience",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/07/28/Effective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2024/07/28/Effective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "title": "Effective C++读书笔记",
            "date_published": "2024-07-28T09:38:31.000Z",
            "content_html": "<p>C++ 是我最喜欢的一门语言，C++ programer 一直为其拥有的非同寻常的能力范围和表现力而自豪（当然如果能正确使用的话）。正如 Scott Meyers, 本书作者所言：学习一种编程语言的基础是一回事；学习如何用那种语言设计和实现高效率的程序完全是另外一回事。断断续续学习了两年的 C++ programing language, 我的追求从学会语言基础，逐渐变为追求更加高效，并同时具备高可扩展性和可维护性的编程。</p>\n<p>Effetive C++ 是一本主要面向 C++  03 标准及之前的 C++ 编程过程中的一些编程 guidelines 的，自 C++  11 以来，C++ 不断推陈出新，关于一些场景作者提出的解决方案也许有了更好的替代方案。但作为一切的基础，以及一系列书目的开山之作（more Efective C++, Effective Modern C++)，此书仍然被许多人认为是 CPP programer 进阶的必看书目。此读书笔记仅供我自己查阅，提供简单的总结与感想，以从作者引人入胜但对于已经认真体会的读者而言无益的行文中走出 (TLDR)。并对书中的一些问题尝试使用 C++ 11 后的新特性解决。</p>\n<p>我不想成为一个语言学家，阅读之后还需要更多的编程练习来巩固所学习的知识。</p>\n<p><span id=\"more\"></span></p>\n<h2 id=\"杂项\"><a class=\"anchor\" href=\"#杂项\">#</a> 杂项</h2>\n<h3 id=\"item1-将c视为-federation-of-languages语言联合体\"><a class=\"anchor\" href=\"#item1-将c视为-federation-of-languages语言联合体\">#</a> item1 将 C++ 视为 federation of languages (语言联合体)</h3>\n<p>将 C++ 从一门编程语言看作四门互相联系但有各自主体思想的子语言的结合体：</p>\n<ul>\n<li>C: 包括 built-in 数据结构，流程控制语句等，提供语法基础。</li>\n<li>Object-Oriented C++：C++ 的面向对象部分，主要设计封装继承多态这三个方面</li>\n<li>Template C++：泛型编程部分，对多数程序员少用但及其强大的 C++ 语言部分，提供包括 TMP (模板元编程) 这样的黑魔法。</li>\n<li>STL：containers,iterators,algorithms,functions objects... 方便地使用大佬们提供的编程工具，优化编程体验，不用像 C 那样 array simulate everything 了。</li>\n</ul>\n<p>每一种子语言都有一套自己常用的编程理念，在不同的子语言下编程时，可能会要从不同的规则中进行转换（比如传值的方式）。</p>\n<h3 id=\"item2-用consts-enums和inlines-取代defines\"><a class=\"anchor\" href=\"#item2-用consts-enums和inlines-取代defines\">#</a> item2 用 consts, enums, 和 inlines 取代 #defines</h3>\n<p><strong>#defines 无法提供包括作用域控制，类型检查等功能，因此能避免就避免。一般只在控制编译逻辑的时候配合 #ifdef/#ifndef 使用，比如根据某些宏修改一些 objects 的定义，而不要用在编程的逻辑中。</strong></p>\n<ul>\n<li>想使用 #defines 定义常量时 比如 <code>#define PI 3.1415926</code> ，使用 const 替代，以获取更好的编译器报错体验与类型检查</li>\n<li>想使用 #defines 定义<strong>类属常量</strong>时，比如<strong>在类中</strong>定义 <code>static const int a = 5;</code>  这里涉及到了类属常量的初始化问题，简要来说，一些编译器禁止 static integral class constants（静态整型族类属常量）的 in-class specification 而不得不在类外使用 <code>const int MyClass::a = 5;</code>  这样的初始化方式。（ps： 都是很老的编译器了，在作者那个年代都算过时的了，gcc4.0.4 都可以在类中定义整型族常量）。对于静态非整型族类属常量，比如 <code>static const string s = &quot;hello&quot;</code> ，或者 <code>static const string s = nullptr</code>  这样的语句是不允许出现在类的定义中的。你必须要在类外初始化。for example:</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> cst <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// allowed</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> string s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// static const string s = \"hello\"? not allowed</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token punctuation\">;</span> <span class=\"token comment\">// static const int* p = nullter? not allowed</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> string MyClass<span class=\"token double-colon punctuation\">::</span>s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> MyClass<span class=\"token double-colon punctuation\">::</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>这个过程体现了 C++ 令人难以忍受的缺陷，对于很多东西，它具有很多的特例，并且你很难理解为什么，没有什么规则是通用的</strong>。一个好消息是，C++ 17 后做出了补救 (又有新东西要记了)：</p>\n<p>according to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU2Mzg5Ny9ob3ctY2FuLXlvdS1kZWZpbmUtYS1zdGF0aWMtZGF0YS1tZW1iZXItb2YtdHlwZS1jb25zdC1zdGRzdHJpbmc=\">c++ - How can you define a static data member of type const std::string? - Stack Overflow</span></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> cst <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> std<span class=\"token double-colon punctuation\">::</span>string_view STRING <span class=\"token operator\">=</span> <span class=\"token string\">\"some useful string constant\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>想使用 #defines 定义函数时，使用 inline 的模版函数替代，以获取函数参数具有的参数类型检查功能，并且拥有不输于 defines 的性能。还有，在使用 defines 定义函数时，你不得不给参数加括号 😃</li>\n</ul>\n<p>对了 忘了提 enums 了，这里作者使用了一个叫做 the enum hack 的技术，主要来源于一个 enumerated type（枚举类型）的值可以用在一个需要 ints 的地方。for example:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GamePlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">enum</span> <span class=\"token punctuation\">&#123;</span> NumTurns <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// \"the enum hack\" - makes</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                     <span class=\"token comment\">// NumTurns a symbolic name for 5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> scores<span class=\"token punctuation\">[</span>NumTurns<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// fine</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用这项技术，你可以禁止对 NumTurns 的取地址行为，第二个理由是，大量的代码在使用它（作为模版元编程的基本技术之一），所以最好还是认识一下。</p>\n<p><strong>by the way, 当你声明一个常量指针的时候，最好别忘了把这个指针也设为 const。</strong></p>\n<h3 id=\"item3-只要可能就用const\"><a class=\"anchor\" href=\"#item3-只要可能就用const\">#</a> item3 只要可能就用 const</h3>\n<p>use <em>const</em> as long as possible, 经常看到的一句话了，这节内容主要分为三点：</p>\n<ol>\n<li>const 关键字提供了语义上的表达，有助于编译器发现错误。const 用途广泛，可用于对象，函数参数，返回类型，成员函数等。（这点为大部分程序员对此节标题的唯一理解）</li>\n<li>编译器坚持的是<strong> bitwise constness</strong> (二进制位常量性), 但程序员应当使用<strong> conceptual constness</strong> (概念上的常量性) 来编程。</li>\n<li>当 const 和 non-const 成员函数本质上具有相同的实现的时候，使用 non-const 版本调用 const 版本可以避免代码重复。</li>\n</ol>\n<p>关于第二点的理解：</p>\n<p>二进制位常量性是指当你声明一个变量为 const 的时候，编译器只需要检查它在内存中存储的二进制位有没有被更改就行了，因为这样实现十分方便，比如当你声明一个指针为 const 时候，你不能改变指针的值，但是你可以改变指针指向的对象的值。但是当你声明一个类为 const 的时候，只能调用 const 成员函数，并且不能改变其任何成员变量，这实在是太苛刻了。</p>\n<p>for example: 一个可以存储文本块长度的类：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CTextBlock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pText<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  std<span class=\"token double-colon punctuation\">::</span>size_t textLength<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// last calculated length of textblock</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">bool</span> lengthIsValid<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// whether length is currently valid</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>size_t <span class=\"token class-name\">CTextBlock</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>lengthIsValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    textLength <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>pText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error! can't assign to textLength</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    lengthIsValid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// and lengthIsValid in a const</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>                                   <span class=\"token comment\">// member function</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> textLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于 length () 成员函数，由于语义的需要必须定义为 const。但不想每次都调用 strlen 计算文本长度，这会带来许多开销，于是便用上述方法存储字符串长度。但是这违反了二进制常量性，毕竟改变了成员变量。</p>\n<p>因此引入了逻辑常量性的概念，这一理念认为，** 一个 const 成员函数可以改变对象中的一些 bits, 但是只能用客户无法察觉的方法。** 这种理念的实现是通过 mutable 关键字实现的，比如将上面的 textLength 和 lengthIsValid 变量用 mutable 修饰即可。</p>\n<p>对于第三点的理解：</p>\n<p>一般来说，类中重载的 const 成员函数和非 const 成员函数的逻辑都是差不多的，这带来了额外的编译时间，维护成本以及代码膨胀，这对于一些程序员来说是不可忍受的。因此可以使用这样一个 trick: 通过强制转型，让 non-const 成员函数调用 const 版本。for example:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TextBlock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>     <span class=\"token comment\">// same as before</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t position<span class=\"token punctuation\">)</span>         <span class=\"token comment\">// now just calls const op[]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>                         <span class=\"token comment\">// cast away const on</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                                 <span class=\"token comment\">// op[]'s return type;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token generic-function\"><span class=\"token function\">static_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> TextBlock<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// add const to *this's type;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span>                             <span class=\"token comment\">// call const version of op[]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样的代码通过不了选美比赛 😄 ，但是它有效。</p>\n<p><strong>注意，反过来让 const 版本调用 non-const 版本不可取，因为违反了 const 的语义，你将承受改变成员变量的风险。</strong></p>\n<h3 id=\"item-4-确保对象在使用前被初始化\"><a class=\"anchor\" href=\"#item-4-确保对象在使用前被初始化\">#</a> item 4 确保对象在使用前被初始化</h3>\n<p>对于 C++ 的对象，当你不初始化它们时，有些时候它们会自动初始化，有时候不会，因此为了避免 ub，再声明的同时最好也初始化它们。</p>\n<p>要点：</p>\n<ul>\n<li>\n<p>手动初始化 built-in type 的 objects，因为 C++ 只在某些时候才会自己初始化它们</p>\n</li>\n<li>\n<p>在 constructor 中，用 member initialization list 代替函数体中的 assignment。initialization list 中 data members 的排列顺序要与它们在 class（类）中被声明的顺序相同。因为在构造函数赋值之前，成员变量已经被默认初始化好了，这样做能提升性能。除此之外的是，有些时候，初始化列表式可选项，有时候是必选项，因此为了方便记忆，一律使用初始化列表即可。</p>\n</li>\n<li>\n<p>通过用 local static objects（局部静态对象）代替 non-local static objects（非局部静态对象）来避免跨 translation units（编译单元）的 初始化顺序问题。</p>\n</li>\n</ul>\n<p>即将在全局中定义一个 <code>static FileSystem fs; </code>  替换为提供一个函数，有点像单例模式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FileSystem<span class=\"token operator\">&amp;</span> <span class=\"token function\">tfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// this replaces the tfs object; it could be</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>                                   <span class=\"token comment\">// static in the FileSystem class</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">static</span> FileSystem fs<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// define and initialize a local static object</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// return a reference to it</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"构造-析构与赋值\"><a class=\"anchor\" href=\"#构造-析构与赋值\">#</a> 构造、析构与赋值</h2>\n<h3 id=\"item5-了解c为你默认编写并调用了哪些函数\"><a class=\"anchor\" href=\"#item5-了解c为你默认编写并调用了哪些函数\">#</a> item5 了解 C++ 为你默认编写并调用了哪些函数</h3>\n<ul>\n<li>编译器可以隐式生成一个 class（类）的 default constructor（缺省构造函数），copy constructor（拷贝构造函数），copy assignment operator（拷贝赋值运算符）和 destructor（析构函数）。C++11 后还增加了移动构造和移动赋值。</li>\n</ul>\n<p><strong>对于以下场景：深拷贝，类中有 const 或引用成员变量，以及析构函数有 virtual 需求的时候，默认生成的函数可能不会符合要求</strong>。</p>\n<h3 id=\"item6-若不想使用编译器生成函数就明确拒绝\"><a class=\"anchor\" href=\"#item6-若不想使用编译器生成函数就明确拒绝\">#</a> item6 若不想使用编译器生成函数，就明确拒绝</h3>\n<p>在 C++ 11 之前，作者是通过将相应的成员函数声明为 private 实现的，或者继承自一个使用这种方法实现的 Uncopyable 的基类。</p>\n<p>C++ 11 之后，使用 <code>= delete</code>  即可</p>\n<h3 id=\"item7-为多态基类声明虚析构函数\"><a class=\"anchor\" href=\"#item7-为多态基类声明虚析构函数\">#</a> item7 为多态基类声明虚析构函数</h3>\n<p>为了防止内存泄露，必须将多态基类的析构函数声明为虚函数</p>\n<p>除此之外还要注意两点：</p>\n<ul>\n<li>普通的基类无需也不应该有虚析构函数，因为虚函数无论在时间还是空间上都会有代价</li>\n<li>如果一个类型没有被设计成多态基类，又有被误继承的风险，可以使用 C++ 11 中的 <code>final</code>  关键字，这样禁止派生可以防止误继承造成上述问题。</li>\n</ul>\n<h3 id=\"item8-防止异常逃离析构函数\"><a class=\"anchor\" href=\"#item8-防止异常逃离析构函数\">#</a> item8 防止异常逃离析构函数</h3>\n<p>两个要点：</p>\n<ul>\n<li>destructor（析构函数）应该永不引发 exceptions（异常）。如果 destructor（析构函数）调用了可能抛出异常的函数，destructor（析构函数）应该捕捉所有异常，然后<strong>抑制它们或者终止程序</strong>。这里的抑制指的是在 try catch 语句中捕获并处理。</li>\n<li>如果 class（类）客户需要能对一个操作抛出的 exceptions（异常）做出回应，则那个 class（类）应该提供一个常规的函数（也就是说，non-destructor（非析构函数））来完成这个操作。</li>\n</ul>\n<p>对于第二点，一个常见例子是使用各种 db 的连接池的场景，通常用户需要使用 db.close () 显式释放资源，对于拥有 RAII 机制的 C++ 来说，为什么还需要这样做呢。因为通过 db.close () 这样的普通成员函数，用户可以通过 try catch 语句自行对这个异常做出回应。在析构函数中，同样可以继续使用 RAII 机制，记录用户有无手动释放，没有则自行调用 db.close ()</p>\n<h3 id=\"item9-避免在构造函数或者析构函数中调用虚函数\"><a class=\"anchor\" href=\"#item9-避免在构造函数或者析构函数中调用虚函数\">#</a> item9 避免在构造函数或者析构函数中调用虚函数</h3>\n<p>简单来说，在构造和析构的时候，对象的类型是不确定的，因此想要调用的虚函数可能不会如你所愿。</p>\n<p>这点看似简单，却十分容易踩坑，考虑以下场景，为了避免重复代码，我们可能将不同的变量初始化放到一个 init () 函数之中，即使这个函数不是虚函数，但如果其中调用了虚函数，还是违背了这一原则，并且以难以察觉的方式。</p>\n<h3 id=\"item10-在赋值运算符中返回一个reference-to-this\"><a class=\"anchor\" href=\"#item10-在赋值运算符中返回一个reference-to-this\">#</a> item10 在赋值运算符中返回一个 reference to *this</h3>\n<p>简单来说 这样做是为了支持链式赋值并让自己的接口和内置类型的接口尽可能相似。因此，请将赋值操作符的返回类型设为 ObjectClass&amp; 并返回 * this。</p>\n",
            "tags": [
                "C++ 读书笔记"
            ]
        }
    ]
}