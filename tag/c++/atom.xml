<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>MikeMao&#39;s blog • Posts by &#34;c++&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-11-14T08:08:33.000Z</updated>
    <category term="git" />
    <category term="C++" />
    <category term="Linux" />
    <category term="Maven" />
    <category term="STL C++" />
    <category term="python 爬虫" />
    <category term="TVM 深度学习 机器学习 编译" />
    <category term="编译原理" />
    <category term="python" />
    <category term="爬虫" />
    <entry>
        <id>http://example.com/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</id>
        <title>C++：移动语义与右值引用</title>
        <link rel="alternate" href="http://example.com/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;c的移动语义与右值引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c的移动语义与右值引用&#34;&gt;#&lt;/a&gt; C++ 的移动语义与右值引用&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;preview.jpg&#34; alt=&#34;Gaze&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;移动语义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移动语义&#34;&gt;#&lt;/a&gt; 移动语义&lt;/h2&gt;
&lt;h3 id=&#34;为何需要移动语义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为何需要移动语义&#34;&gt;#&lt;/a&gt; 为何需要移动语义&lt;/h3&gt;
&lt;p&gt;假设有如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; vstr;// build up a vector of 20000 strings,each of 1000 characters
vector&amp;lt;string&amp;gt; vstr_copy1(vstr);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了初始化 vstr_copy1 先调用 vector 的复制构造函数，使用 new 给 20000 个 string 对象分配内存，而每个 string 对象又调用 string 的复制构造函数，为 1000 个字符分配内存。这很浪费时间，但如果 vstr 与 vstr_copy1 都需要使用，这很难避免。&lt;/p&gt;
&lt;p&gt;可有时候这样不太妥当，例如 vstr 不再被使用时。例如如下定义的函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; allcaps(const vector&amp;lt;string&amp;gt; &amp;amp; vs)
&amp;#123;
    vector&amp;lt;string&amp;gt; temp;
    //让temp存储vs中string的大写版本的代码
    return temp;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;并这样使用它：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; vstr;
vector&amp;lt;string&amp;gt; vstr_copy1(vstr); //#1
vector&amp;lt;string&amp;gt; vstr_copy2(allcaps(vstr)); //#2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;allcaps () 创建了对象 temp，该对象管理着 20000000 个字符；语句二使用 vector 和 string 的复制构造函数创建了一个 temp 的副本，然后删除了 temp，做了大量无用功。如果编译器直接把 temp 对数据的所有权转让给 vstr_copy2，将会更好。&lt;/p&gt;
&lt;p&gt;实际上，我们可以把实际内容保留在原来地方，而之修改记录，这就是移动语义的本质，它避免了移动原始数据，而转为修改记录。&lt;/p&gt;
&lt;p&gt;要实现移动语义，需要采取某种方式，让编译器知道什么时候需要复制。这就是右值引用发挥作用的地方。可定义两个构造函数，其中一个是常规复制构造函数，它使用 const 左值引用作为参数，如语句 #1。另一个是移动构造函数，它使用右值引用作为参数，该引用关联到右值实参，如语句 #2 中 allcaps (vstr) 的返回值。移动构造函数可能修改其实参，这意味着右值引用参数不应是 const。&lt;/p&gt;
&lt;h3 id=&#34;如何使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用&#34;&gt;#&lt;/a&gt; 如何使用&lt;/h3&gt;
&lt;p&gt;直接将变量的值赋值为参数的变量值，如果变量为指针，为了防止 double free，还需将参数的指针改为 nullptr。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Useless(Useless &amp;amp;&amp;amp; f) : n(f.n)
&amp;#123;
	++ct;
	pc = f.pc;
	f.pc = nullptr;
	f.n = 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;强制移动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#强制移动&#34;&gt;#&lt;/a&gt; 强制移动&lt;/h3&gt;
&lt;p&gt;移动构造函数和移动赋值运算符使用右值，如果要让它们使用左值，该怎么办？例如，将一个左值变量赋值给一个对象，并立刻丢弃这个变量。此时可以使用头文件 utility 中声明的函数 std::move。&lt;/p&gt;
</content>
        <category term="C++" />
        <updated>2022-11-14T08:08:33.000Z</updated>
    </entry>
</feed>
