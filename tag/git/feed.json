{
    "version": "https://jsonfeed.org/version/1",
    "title": "MikeMao's blog • All posts by \"git\" tag",
    "description": "a student of NJU who use this website to record learning experience",
    "home_page_url": "https://maoding1.github.io",
    "items": [
        {
            "id": "https://maoding1.github.io/2022/10/02/Git%E5%AD%A6%E4%B9%A002-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/",
            "url": "https://maoding1.github.io/2022/10/02/Git%E5%AD%A6%E4%B9%A002-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/",
            "title": "Git学习02-分支管理",
            "date_published": "2022-10-02T08:11:52.000Z",
            "content_html": "<h1 id=\"git学习02-分支管理\"><a class=\"anchor\" href=\"#git学习02-分支管理\">#</a> Git 学习 02 - 分支管理</h1>\n<p><span id=\"more\"></span></p>\n<p><img data-src=\"%E8%BD%BB%E9%9F%B3%E5%B0%91%E5%A5%B3.jpg\" alt=\"轻音少女\"></p>\n<h2 id=\"创建与合并分支\"><a class=\"anchor\" href=\"#创建与合并分支\">#</a> 创建与合并分支</h2>\n<p>查看分支 ：  <code>git branch</code></p>\n<p>创建分支：  <code>git branch &lt;name&gt;</code></p>\n<p>切换分支：  <code>git switch &lt;name&gt;</code></p>\n<p>创建 + 切换分支:  <code>git switch -c &lt;name&gt;</code></p>\n<p>合并某分支到当前分支 ：  <code>git merge &lt;name&gt;</code>  这里的 name 使某分支的 name</p>\n<p>删除分支：  <code>git branch -d &lt;name&gt;</code></p>\n<h2 id=\"解决冲突\"><a class=\"anchor\" href=\"#解决冲突\">#</a> 解决冲突</h2>\n<p>eg：当你创建了一个 feature1 分支 其在 master 分支上添加了一些内容并进行提交，此时切换会 master 分支并使用  <code>git merge feature1</code>  合并分支是不会有问题的（Git 会在底层移动 master 的指针到 feature1 上）。但如果你在 feature1 上修改了某个文件并提交，在切换会 master 分支后修改了同一份文件并提交，那么此时 git merge 就会报错了。</p>\n<p>此时可以：</p>\n<ol>\n<li>使用 <code>git status</code>  查看冲突的文件（如果你改了很多，分不清哪里冲突了）</li>\n<li>手动解决冲突</li>\n<li>再提交</li>\n<li>最后删除分支（如删除 feature1)</li>\n</ol>\n<p>使用</p>\n<pre><code>$ git log --graph --pretty=oneline --abbrev-commit\n</code></pre>\n<p>可以形象地查看分支的合并情况（Git 会生成一副图）</p>\n<h2 id=\"分支管理策略\"><a class=\"anchor\" href=\"#分支管理策略\">#</a> 分支管理策略</h2>\n<p><code>git merge --no-ff -m &quot;commit message&quot; &lt;branch name&gt;</code></p>\n<p>通常 ，合并分支时，Git 会用 Fast forward 模式（移动指针） ，这种模式下，删除分支后，会丢掉分支信息</p>\n<p>如果要强制禁用 Fast forward 模式， Git 就会再 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息。</p>\n<p>--no--ff 参数表示禁用 Fast forward</p>\n<h2 id=\"git的更多操作\"><a class=\"anchor\" href=\"#git的更多操作\">#</a> git 的更多操作</h2>\n<p>Git 还有许多高级功能。如暂时储存当前工作、多人协作、标签管理等。考虑到目前还接触不到 ，上述功能等需要使用了再来学习更新吧。</p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://maoding1.github.io/2022/10/01/Git%E5%AD%A6%E4%B9%A001-%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
            "url": "https://maoding1.github.io/2022/10/01/Git%E5%AD%A6%E4%B9%A001-%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
            "title": "git操作",
            "date_published": "2022-10-01T03:34:47.000Z",
            "content_html": "<h1 id=\"git学习01-基本操作\"><a class=\"anchor\" href=\"#git学习01-基本操作\">#</a> Git 学习 01- 基本操作</h1>\n<p><span id=\"more\"></span></p>\n<p><img data-src=\"%E4%B8%89%E5%8F%B6.jpg\" alt=\"三叶\"></p>\n<h2 id=\"创建版本库\"><a class=\"anchor\" href=\"#创建版本库\">#</a> 创建版本库</h2>\n<p>版本库 (repository) 是一个目录，这个目录里的所有文件都可以被 Git 管理起来，每个文件的修改、删除、Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以还原。</p>\n<p>创建版本库步骤：</p>\n<ol>\n<li>选择一个合适地方，创建一个空目录</li>\n<li>通过  <code>git init</code>  命令把这个目录变成 Git 可以管理的仓库</li>\n</ol>\n<h2 id=\"把文件添加到版本库\"><a class=\"anchor\" href=\"#把文件添加到版本库\">#</a> 把文件添加到版本库</h2>\n<p>把一个文件放到仓库只需要两步（如添加一个 readme.txt 文件）：</p>\n<ol>\n<li>\n<p><code>git add readme.txt</code>   用命令 git add 告诉 Git， 把文件添加到暂存区。可反复多次使用，添加多个文件。</p>\n</li>\n<li>\n<p><code>git commit -m &quot;wrote a readme file&quot;</code></p>\n<p>git commit 告诉 Git, 把文件提交到仓库。-m 后面输入的是本次提交的说明，注意说明一定要有意义，如告诉仓库本次提交做了什么事，方便后续的版本控制。</p>\n</li>\n</ol>\n<h2 id=\"查看工作区状态\"><a class=\"anchor\" href=\"#查看工作区状态\">#</a> 查看工作区状态</h2>\n<p>要查看当前工作区的状态，使用  <code>git status</code>  命令</p>\n<p>如果有文件被修改过，你又想知道修改了什么 用 <code>git diff filename</code>  查看修改的内容。git diff 命令可以告诉你当前工作区的文件和仓库的有什么不同。</p>\n<h2 id=\"版本回退\"><a class=\"anchor\" href=\"#版本回退\">#</a> 版本回退</h2>\n<ul>\n<li><code>HEAD</code>  指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令 <code>git reset --hard commit_id</code> 。版号只要前几位就行了，只要能识别，也可以用 HEAD 和 ^ 表示回退到哪一版。</li>\n<li>穿梭前，用 <code>git log</code>  可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>重返过去时未来的记录用 git log 就看不到了。要重返未来，用 <code>git reflog</code>  查看命令历史，以便确定要回到未来的哪个版本。</li>\n</ul>\n<h2 id=\"撤销修改\"><a class=\"anchor\" href=\"#撤销修改\">#</a> 撤销修改</h2>\n<ul>\n<li>场景 1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- filename</code> 。</li>\n<li>场景 2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD &lt;filename&gt;</code> ，就回到了场景 1，第二步按场景 1 操作。</li>\n<li>场景 3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>\n</ul>\n<h2 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h2>\n<p>如果你在文件管理器中把某个文件删了，或者用 <code>rm</code>  命令删了</p>\n<pre><code>$ rm test.txt\n</code></pre>\n<p>这个时候，Git 知道你删了文件，因此，工作区和版本库就不一致了。</p>\n<p>现在有两种情况。</p>\n<ol>\n<li>\n<p>确实要从版本库中删除该文件，那就用命令  <code>git rm</code>  删掉 并且 git commit</p>\n<pre><code>$ git rm test.txt\n$ git commit -m &quot;remove test.txt&quot;\n</code></pre>\n<p>tips：先手动删除文件，然后使用 git rm &lt;file&gt; 和 git add&lt;file &gt; 效果是一样的。</p>\n</li>\n<li>\n<p>删除错了，要从版本库中把误删的文件恢复到最新版本。</p>\n<pre><code>$ git checkout -- test.txt\n</code></pre>\n<p>git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以一键还原。</p>\n</li>\n</ol>\n<h2 id=\"添加远程库\"><a class=\"anchor\" href=\"#添加远程库\">#</a> 添加远程库</h2>\n<p>远程库既可以充当本地仓库的备份，又可以让其他人通过该仓库来协作，可谓一举多得。</p>\n<p>创建远程库并将本地与远程库连接。</p>\n<p>步骤：</p>\n<ol>\n<li>\n<p>登录 github 创建一个新的仓库，复制该仓库的 SSH</p>\n</li>\n<li>\n<p>在本地仓库上运行</p>\n<pre><code>$ git remote add origin git@github.com:maoding1/learngit.git\n</code></pre>\n<p>(后面的一大串是复制的 SSH) 使本地仓库与远程库连接。</p>\n<p>git 会把远程库的名字默认设为 origin</p>\n</li>\n<li>\n<p>把本地内容推送到远程库上</p>\n<pre><code>$ git push -u origin master\n</code></pre>\n<p>-u 参数实际上设置了远程仓库的默认值（比如有多个远程仓库） 之后就可以简化 git pull 和 git push 的命令</p>\n</li>\n</ol>\n<p>现在只要本地做了提交，就可以通过  <code>git push origin master</code>  把本地分支的修改推送到 github</p>\n<p>tips：要删除远程库 可以用 <code>git remote rm &lt;name&gt;</code>  命令，但这只是解除了本地与远程的绑定关系，要真正删除远程库，需要登陆 github 手动删除。</p>\n<h2 id=\"克隆远程仓库\"><a class=\"anchor\" href=\"#克隆远程仓库\">#</a> 克隆远程仓库</h2>\n<p>知道仓库的 SSH 后，通过 <code>git clone SSH</code>  命令克隆到本地</p>\n",
            "tags": [
                "git"
            ]
        }
    ]
}