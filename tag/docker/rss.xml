<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>MikeMao&#39;s blog • Posts by &#34;docker&#34; tag</title>
        <link>http://example.com</link>
        <description>a student of NJU &amp;&amp; record learning experience</description>
        <language>zh-CN</language>
        <pubDate>Tue, 27 Jun 2023 17:54:04 +0800</pubDate>
        <lastBuildDate>Tue, 27 Jun 2023 17:54:04 +0800</lastBuildDate>
        <category>C++</category>
        <category>git</category>
        <category>C++ 读书笔记</category>
        <category>Linux</category>
        <category>Maven</category>
        <category>STL C++</category>
        <category>python 爬虫 计算机网络</category>
        <category>python 爬虫</category>
        <category>go语言</category>
        <category>python</category>
        <category>爬虫</category>
        <category>数理逻辑</category>
        <category>docker</category>
        <category>分布式</category>
        <category>TVM 深度学习 机器学习 编译</category>
        <category>编译原理</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/06/27/%E4%BA%91%E5%8E%9F%E7%94%9F-docker%E5%85%A5%E9%97%A8/</guid>
            <title>云原生-docker入门</title>
            <link>http://example.com/2023/06/27/%E4%BA%91%E5%8E%9F%E7%94%9F-docker%E5%85%A5%E9%97%A8/</link>
            <category>docker</category>
            <pubDate>Tue, 27 Jun 2023 17:54:04 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;云原生-docker-k8s-springboot&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云原生-docker-k8s-springboot&#34;&gt;#&lt;/a&gt; 云原生 docker + k8s + springboot&lt;/h1&gt;
&lt;h2 id=&#34;云原生的本质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云原生的本质&#34;&gt;#&lt;/a&gt; 云原生的本质&lt;/h2&gt;
&lt;p&gt;根据微服务将应用进行细分，将每一部分打包放入对应的容器，动态统筹管理容器，实现资源利用最大化。&lt;/p&gt;
&lt;h2 id=&#34;什么是docker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是docker&#34;&gt;#&lt;/a&gt; 什么是 Docker&lt;/h2&gt;
&lt;p&gt;Docker 是 Docker 公司开源的一种最流行的容器实现方案，极大方便了应用服务部署。&lt;/p&gt;
&lt;p&gt;Docker 可以将应用、配置、和环境打包，形成了一个独立的类似于 iOS APP 形式的 &lt;strong&gt;应用&lt;/strong&gt;，此应用可以直接分发到任意一个支持 Docker 的环境中，通过简单的命令即可运行。&lt;/p&gt;
&lt;p&gt;Docker 使得容器化技术使用非常方便，极大地推进了容器行业的发展与容器技术标准化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker 口号： build once, run anywhere&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker的优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker的优势&#34;&gt;#&lt;/a&gt; Docker 的优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;环境一致性&lt;/li&gt;
&lt;li&gt;资源独立与隔离&lt;/li&gt;
&lt;li&gt;轻量化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通过docker容器配置nginx静态网页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过docker容器配置nginx静态网页&#34;&gt;#&lt;/a&gt; 通过 docker 容器配置 Nginx 静态网页&lt;/h2&gt;
&lt;p&gt;从 docker 仓库下载具有默认 Nginx 配置的容器：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;现在有了镜像，但是镜像和容器的关系就像类和实例，要真正运行还要创建一个容器：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; docker-nginx &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;:80 nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run 是创建新容器的命令&lt;/li&gt;
&lt;li&gt;--name 标志是指定容器名称的方式。如果为空，将分配一个生成的名称。&lt;/li&gt;
&lt;li&gt;-p 以 - p local-machine-port:internal-container-port 的格式指定公开的端口，比如这里将容器中的端口：80 映射到宿主机的端口：80&lt;/li&gt;
&lt;li&gt;nginx 是镜像名称，也就是刚刚 pull 下来的镜像，没有 tag 表示用最新 (latest)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时在浏览器输入本地 ip 可看到 nginx 默认登录界面：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230627181050252.png&#34; alt=&#34;image-20230627181050252&#34;&gt;&lt;/p&gt;
&lt;p&gt;此时必须用 CTRL+c 在命令行中停止容器运行。可以使用 docker ps -a 查看此时的容器状态。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230627181625674.png&#34; alt=&#34;image-20230627181625674&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以使用&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-vf&lt;/span&gt; docker-nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;删除现有的 dorker-nginx 容器。&lt;/p&gt;
&lt;h2 id=&#34;daemon模式下运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#daemon模式下运行&#34;&gt;#&lt;/a&gt; Daemon 模式下运行&lt;/h2&gt;
&lt;p&gt;上面启动的容器还未与 terminal 分离，必须手动 CTRL+c 停止运行 才能输入后续指令，而在 daemon 模式下我们可以将容器交给 Daemon 进程，即一个守护进程托管，让其在后台运行。&lt;/p&gt;
&lt;p&gt;创建一个保存网页内容的文件夹：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; ~/docker-nginx/html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; ~/docker-nginx/html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; index.html&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编写网页内容：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Docker nginx Tutorial&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;container&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Hello World&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;this page is provided by nginx&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后使用命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; docker-nginx &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;:80 &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; ~/docker-nginx/html:/usr/share/nginx/html nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-v 标志开启挂载功能，: 的左侧是服务器（宿主机）上的位置：右侧是链接到的容器内的位置&lt;/li&gt;
&lt;li&gt;-d 采用 daemon 模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/share/nginx/html&lt;/code&gt;  是 nginx 服务器默认用于存储静态 HTML 网页和其他资源的位置，通常情况下会在这个目录中存放可由 Web 浏览器访问的 HTML 文件、CSS 文件、JavaScript 文件和图像文件等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230627183153353.png&#34; alt=&#34;image-20230627183153353&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用dockerfile创建本地镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用dockerfile创建本地镜像&#34;&gt;#&lt;/a&gt; 使用 Dockerfile 创建本地镜像&lt;/h2&gt;
&lt;h3 id=&#34;什么是dockerfile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是dockerfile&#34;&gt;#&lt;/a&gt; 什么是 Dockerfile&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230627190343246.png&#34; alt=&#34;image-20230627190343246&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用dockerfile创建2048镜像并运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用dockerfile创建2048镜像并运行&#34;&gt;#&lt;/a&gt; 使用 Dockerfile 创建 2048 镜像并运行&lt;/h3&gt;
&lt;p&gt;Dockerfile 的内容如下：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;figcaption data-lang=&#34;Docker&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Pull base image.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;FROM&lt;/span&gt; nginx:latest&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token instruction&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;COPY&lt;/span&gt; 2048-master /usr/share/nginx/html&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 Dockerfile 的同级目录下存放了 2048-master 文件夹，其中包含了 2048 网页版的资源&lt;/p&gt;
&lt;p&gt;使用命令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; build &lt;span class=&#34;token parameter variable&#34;&gt;-t&lt;/span&gt; my-2048 &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建一个名为 my-2048 的镜像 最后的。表示 Dockerfile 在当前目录下。&lt;/p&gt;
&lt;p&gt;-t 指定镜像的名字&lt;/p&gt;
&lt;p&gt;然后使用&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2048&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;:80 my-2048&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建并启动一个容器&lt;/p&gt;
&lt;p&gt;此时打开 localhost：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230627191156151.png&#34; alt=&#34;image-20230627191156151&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker镜像管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker镜像管理&#34;&gt;#&lt;/a&gt; Docker 镜像管理&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230627192134665.png&#34; alt=&#34;image-20230627192134665&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker容器管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker容器管理&#34;&gt;#&lt;/a&gt; Docker 容器管理&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230627192437509.png&#34; alt=&#34;image-20230627192437509&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker原理&#34;&gt;#&lt;/a&gt; Docker 原理&lt;/h2&gt;
&lt;h3 id=&#34;docker组成架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker组成架构&#34;&gt;#&lt;/a&gt; Docker 组成架构&lt;/h3&gt;
&lt;p&gt;Docker 采用 C/S 架构，client 通过接口与 Server 进程通信实现容器的构建，运行和发布。&lt;/p&gt;
&lt;p&gt;Docker 由五个部分组成&lt;/p&gt;
&lt;p&gt;－&lt;strong&gt;Docker Client&lt;/strong&gt; &lt;strong&gt;客户端&lt;/strong&gt;，负责向服务端（Docker Daemon 守护进程）发起请求&lt;/p&gt;
&lt;p&gt;－&lt;strong&gt;Docker Daemon&lt;/strong&gt; &lt;strong&gt;守护进程&lt;/strong&gt;，负责 从 Docker Registry 下载 Docker 镜像和通过 Docker 镜像 启动 Docker 容器&lt;/p&gt;
&lt;p&gt;－&lt;strong&gt;Docker Registry&lt;/strong&gt; &lt;strong&gt;仓库&lt;/strong&gt;，负责存储 Docker 镜像&lt;/p&gt;
&lt;p&gt;－&lt;strong&gt;Docker Container&lt;/strong&gt; &lt;strong&gt;容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;－&lt;strong&gt;Docker Image&lt;/strong&gt; &lt;strong&gt;镜像&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230628141358473.png&#34; alt=&#34;image-20230628141358473&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker运行容器流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker运行容器流程&#34;&gt;#&lt;/a&gt; Docker 运行容器流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Docker Client 执行 docker run，Docker Daemon 收到来自 client 的请求；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker Daemon 优先查找本地镜像，如果本地没有，Docker daemon 会从远端镜像仓库拉取所需镜像；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 Linux Namespace 配置，设置指定的 Cgroups 参数，挂载 rootfs（容器镜像），切换进程的根目录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器运行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230628141534884.png&#34; alt=&#34;image-20230628141534884&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker容器文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#docker容器文件系统&#34;&gt;#&lt;/a&gt; Docker 容器文件系统&lt;/h2&gt;
&lt;p&gt;Docker 容器的 rootfs 使用的是 UnionFS（联合文件系统）。&lt;/p&gt;
&lt;p&gt;UnionFS 是通过联合挂载多个文件目录得到的一个完整的文件系统。容器 rootfs 看起来是一个可读、可写的具备完整功能的独立文件系统，但实际上由多层只读层和一个专属于该容器的读写层联合挂载而成。&lt;/p&gt;
&lt;p&gt;Linux 中支持的 UnionFS 实现有 overlay2、aufs、btrfs，其中最常用的就是 overlay2。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230628145756899.png&#34; alt=&#34;image-20230628145756899&#34;&gt;&lt;/p&gt;
&lt;p&gt;在准备容器 rootfs 时联合挂载用到的多层目录是哪来的呢？&lt;/p&gt;
&lt;p&gt;－&lt;strong&gt;读写层&lt;/strong&gt;，每个容器都有自己专属的读写层，该层由 docker 在创建此容器时创建的。&lt;/p&gt;
&lt;p&gt;－&lt;strong&gt;只读层&lt;/strong&gt;，每个容器的 rootfs 都会包含好几层只读层，该层由 docker 在拉取镜像时将镜像中的各层解压到 docker 的数据目录得到的。&lt;/p&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;－容器镜像与容器 rootfs 的关联&lt;/p&gt;
&lt;p&gt;Docker 拉取镜像解压到 docker 数据目录后得到只读层；&lt;/p&gt;
&lt;p&gt;Docker 创建容器时使用数据目录中的读写层联合挂载得到容器 rootfs&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230628145830246.png&#34; alt=&#34;image-20230628145830246&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;kubernetes&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kubernetes&#34;&gt;#&lt;/a&gt; kubernetes&lt;/h1&gt;
&lt;h2 id=&#34;什么是kubernetes&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是kubernetes&#34;&gt;#&lt;/a&gt; 什么是 kubernetes&lt;/h2&gt;
&lt;p&gt;kubernetes 是开源的容器集群管理项目，诞生于 2014 年，有 Google 公司发起，试图为基于容器的应用部署和管理打造一个强大引擎。使用 go 语言构造。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个基于容器技术的分布式架构领先方案&lt;/li&gt;
&lt;li&gt;一个生产级容器编排工具&lt;/li&gt;
&lt;li&gt;一个完备的分布式学习通支撑平台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;竞品： Mesos， Docker Swarm&lt;/p&gt;
&lt;p&gt;我们在应用容器化的过程中会涉及到封装、调度单容器，也会涉及到解决各个容器间的类型关系，比如 web 容器会涉及到与 DB 容器的交互，可以通过建立 “link” 来将 DB 容器中的信息注入到 web 容器中。但这样做的缺陷在于缺少普适性，随着系统的扩大，容器间的 “link” 会越来越复杂。&lt;/p&gt;
&lt;p&gt;Kubernetes 的优势就在于：从设计之初就&lt;strong&gt;以统一的方式定义任务之间的各种关系&lt;/strong&gt;， 并且为将来支持更多种类的关系留有余地，能够按照用户的意愿和整个系统的规则，完全自动化地处理好容器之间的各种关系，这个过程也就是&lt;strong&gt;编排&lt;/strong&gt;。而其他很多集群管理项目（比如 Yarn、Mesos，以及 Swarm）擅长的，把一个容器按规则，放置在某个最佳节点上运行的功能则称为&lt;strong&gt;调度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;容器本质是进程，那 Kubernetes 作为具有普遍意义的容器编排工具，就是云操作系统。&lt;/p&gt;
&lt;p&gt;理解 Kubernetes 设计理念是学习 Kubernetes 的前提。我们需要聚焦在两个问题：&lt;/p&gt;
&lt;p&gt;l &lt;strong&gt;如何处理应用与应用之间的关系？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;l &lt;strong&gt;如何恰当的容器化一个应用？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一个问题，应用与应用之间的关系可以细化为容器间的关系，具体来说是两类：一类关系是 “紧密交互” 的，即：这些应用之间需要频繁交互、访问，或者会直接通过本地文件进行信息交换。Kubernetes 把这类关系涉及到的一组容器划分为一个 &lt;strong&gt;“ Pod ”&lt;/strong&gt;（ Kuberntes 最小调度单位），在这里面可以进行高效信息交换。&lt;/p&gt;
&lt;p&gt;另一类关系则是常见的应用间的普通访问，Kuberntes 通过定义 “&lt;strong&gt;服务对象&lt;/strong&gt;” 来描述。比如 web 应用和数据库应用的交互，涉及到固定 IP 地址和端口以负载均衡的方式访问，就产生了 Service 对象来处理；加密授权的关系需求，则可由 Secret 对象解决等等。&lt;/p&gt;
&lt;p&gt;第二个问题，以 Pod 为基础为解决不同的场景需求衍生出了不同的解决方案，也就是&lt;strong&gt;基于 Pod 改进后的对象资源，称为 “编排对象”&lt;/strong&gt;。比如被称为 DaemonSet 的对象资源，它可以像守护进程一样在每个宿主机上有且只能有一个 pod 副本；再比如 CronJob ，它专门用来描述定时任务等等。&lt;/p&gt;
&lt;p&gt;如下图所示，由 “Pod” 产生各类 “&lt;strong&gt;编排对象&lt;/strong&gt;”，再为解决各种关系问题产生了类似 Service、Ingress 等 “&lt;strong&gt;服务对象&lt;/strong&gt; ”。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20230629231456801.png&#34; alt=&#34;image-20230629231456801&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#架构&#34;&gt;#&lt;/a&gt; 架构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230723114238163.png&#34; alt=&#34;image-20230723114238163&#34;&gt;&lt;/p&gt;
&lt;p&gt;k8s 有一个 Master 节点负责与用户的通信和管理工作节点等工作，而每一个工作节点 (Node 节点) 对应一个真实的物理机或虚拟机，承担工作负载，Node 负责监控并汇报容器的状态，同时根据 Master 的要求管理容器生命周期。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;master 节点组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;API Server&lt;/strong&gt;。&lt;strong&gt;K8S 的请求入口服务&lt;/strong&gt;。API Server 负责接收 K8S 所有请求（来自 UI 界面或者 CLI 命令行工具），然后，API Server 根据用户的具体请求，去通知其他组件干活。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;。&lt;strong&gt;K8S 所有 Worker Node 的调度器&lt;/strong&gt;。当用户要部署服务时，Scheduler 会选择最合适的 Worker Node（服务器）来部署。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller Manager&lt;/strong&gt;。&lt;strong&gt;K8S 所有 Worker Node 的监控器&lt;/strong&gt;。Controller Manager 有很多具体的 Controller，在文章 **&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy9tZWRpdW0uY29tLyU0MGt1bWFyZ2F1cmF2MTI0Ny9jb21wb25lbnRzLW9mLWt1YmVybmV0ZXMtYXJjaGl0ZWN0dXJlLTZmZWVhNGQ1YzcxMg==&#34;&gt;Components of Kubernetes Architecture&lt;/span&gt;** 中提到的有 Node Controller、Service Controller、Volume Controller 等。Controller 负责监控和调整在 Worker Node 上部署的服务的状态，比如用户要求 A 服务部署 2 个副本，那么当其中一个服务挂了的时候，Controller 会马上调整，让 Scheduler 再选择一个 Worker Node 重新部署服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;etcd&lt;/strong&gt;。&lt;strong&gt;K8S 的存储服务&lt;/strong&gt;。etcd 存储了 K8S 的关键配置和用户配置，K8S 中仅 API Server 才具备读写权限，其他组件必须通过 API Server 的接口才能读写数据（见 **&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzJTNBLy90aGVuZXdzdGFjay5pby9ob3ctZG9lcy1rdWJlcm5ldGVzLXdvcmsv&#34;&gt;Kubernetes Works Like an Operating System&lt;/span&gt;**）。				--zhihu&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;node 节点组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubelet&lt;/strong&gt;。&lt;strong&gt;Worker Node 的监视器，以及与 Master Node 的通讯器&lt;/strong&gt;。Kubelet 是 Master Node 安插在 Worker Node 上的 “眼线”，它会定期向 Worker Node 汇报自己 Node 上运行的服务的状态，并接受来自 Master Node 的指示采取调整措施。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kube-Proxy&lt;/strong&gt;。&lt;strong&gt;K8S 的网络代理&lt;/strong&gt;。私以为称呼为 Network-Proxy 可能更适合？Kube-Proxy 负责 Node 在 K8S 的网络通讯、以及对外部网络流量的负载均衡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Runtime&lt;/strong&gt;。&lt;strong&gt;Worker Node 的运行环境&lt;/strong&gt;。即安装了容器化所需的软件环境确保容器化程序能够跑起来，比如 Docker Engine。大白话就是帮忙装好了 Docker 运行环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logging Layer&lt;/strong&gt;。&lt;strong&gt;K8S 的监控状态收集器&lt;/strong&gt;。私以为称呼为 Monitor 可能更合适？Logging Layer 负责采集 Node 上所有服务的 CPU、内存、磁盘、网络等监控项信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add-Ons&lt;/strong&gt;。&lt;strong&gt;K8S 管理运维 Worker Node 的插件组件&lt;/strong&gt;。有些文章认为 Worker Node 只有三大组件，不包含 Add-On，但笔者认为 K8S 系统提供了 Add-On 机制，让用户可以扩展更多定制化功能，是很不错的亮点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;k8s优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#k8s优势&#34;&gt;#&lt;/a&gt; k8s 优势&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;强大的容器编排能力&lt;/li&gt;
&lt;li&gt;轻量级&lt;/li&gt;
&lt;li&gt;开放开源&lt;/li&gt;
&lt;li&gt;优秀的 API 设计&lt;/li&gt;
&lt;li&gt;基于微服务模式的多层资源抽象模型&lt;/li&gt;
&lt;li&gt;可扩展性好&lt;/li&gt;
&lt;li&gt;自动化程度高&lt;/li&gt;
&lt;li&gt;部署支持多种环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;k8s常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#k8s常用命令&#34;&gt;#&lt;/a&gt; k8s 常用命令&lt;/h2&gt;
&lt;h3 id=&#34;createapply&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#createapply&#34;&gt;#&lt;/a&gt; create/apply&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kubectl apply/create -f [FILE NAME]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;kubectl create 属于&lt;/p&gt;
&lt;h3 id=&#34;get&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get&#34;&gt;#&lt;/a&gt; get&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kubectl get pods|replicationcontrollers|services|namespaces|nodes|...|events [options]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;describe&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#describe&#34;&gt;#&lt;/a&gt; describe&lt;/h3&gt;
&lt;p&gt;查看资源详细信息&lt;/p&gt;
&lt;h3 id=&#34;logs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#logs&#34;&gt;#&lt;/a&gt; logs&lt;/h3&gt;
&lt;p&gt;查看 pod 内容器日志&lt;/p&gt;
&lt;h3 id=&#34;exec&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#exec&#34;&gt;#&lt;/a&gt; exec&lt;/h3&gt;
&lt;p&gt;在 pod 容器中执行命令&lt;/p&gt;
&lt;h3 id=&#34;edit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#edit&#34;&gt;#&lt;/a&gt; edit&lt;/h3&gt;
&lt;p&gt;编辑资源&lt;/p&gt;
&lt;h3 id=&#34;delete&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#delete&#34;&gt;#&lt;/a&gt; delete&lt;/h3&gt;
&lt;p&gt;删除资源&lt;/p&gt;
&lt;h3 id=&#34;故障检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#故障检测&#34;&gt;#&lt;/a&gt; 故障检测&lt;/h3&gt;
&lt;p&gt;放张图备用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;v2-9437b19801b2a08dea506005a4dd2eb2_1440w.webp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;springboot-入门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springboot-入门&#34;&gt;#&lt;/a&gt; Springboot 入门&lt;/h1&gt;
&lt;h2 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;独立运行的 spring 项目     spring boot 可以以 jar 包的形式独立运行&lt;/li&gt;
&lt;li&gt;内嵌 servlet 容器，应用无需打成 WAR 包。&lt;/li&gt;
&lt;li&gt;提供 starter 简化 Maven 配置&lt;/li&gt;
&lt;li&gt;提供了大量的自动配置&lt;/li&gt;
&lt;li&gt;自带应用监控&lt;/li&gt;
&lt;li&gt;无代码生成和 XML 配置&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
