{
    "version": "https://jsonfeed.org/version/1",
    "title": "MikeMao's blog • All posts by \"docker\" tag",
    "description": "a student of NJU who use this website to record learning experience",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/06/27/%E4%BA%91%E5%8E%9F%E7%94%9F-docker%E5%85%A5%E9%97%A8/",
            "url": "http://example.com/2023/06/27/%E4%BA%91%E5%8E%9F%E7%94%9F-docker%E5%85%A5%E9%97%A8/",
            "title": "云原生-docker入门",
            "date_published": "2023-06-27T09:54:04.000Z",
            "content_html": "<h1 id=\"云原生-docker-入门\"><a class=\"anchor\" href=\"#云原生-docker-入门\">#</a> 云原生 docker 入门</h1>\n<h2 id=\"什么是docker\"><a class=\"anchor\" href=\"#什么是docker\">#</a> 什么是 Docker</h2>\n<p>Docker 是 Docker 公司开源的一种最流行的容器实现方案，极大方便了应用服务部署。</p>\n<p>Docker 可以将应用、配置、和环境打包，形成了一个独立的类似于 iOS APP 形式的 <strong>应用</strong>，此应用可以直接分发到任意一个支持 Docker 的环境中，通过简单的命令即可运行。</p>\n<p>Docker 使得容器化技术使用非常方便，极大地推进了容器行业的发展与容器技术标准化。</p>\n<blockquote>\n<p>docker 口号： build once, run anywhere</p>\n</blockquote>\n<h2 id=\"docker的优势\"><a class=\"anchor\" href=\"#docker的优势\">#</a> Docker 的优势</h2>\n<ul>\n<li>环境一致性</li>\n<li>资源独立与隔离</li>\n<li>轻量化</li>\n</ul>\n<h2 id=\"通过docker容器配置nginx静态网页\"><a class=\"anchor\" href=\"#通过docker容器配置nginx静态网页\">#</a> 通过 docker 容器配置 Nginx 静态网页</h2>\n<p>从 docker 仓库下载具有默认 Nginx 配置的容器：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull nginx</pre></td></tr></table></figure><p>现在有了镜像，但是镜像和容器的关系就像类和实例，要真正运行还要创建一个容器：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> docker-nginx <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 nginx</pre></td></tr></table></figure><p>参数说明：</p>\n<ul>\n<li>run 是创建新容器的命令</li>\n<li>--name 标志是指定容器名称的方式。如果为空，将分配一个生成的名称。</li>\n<li>-p 以 - p local-machine-port:internal-container-port 的格式指定公开的端口，比如这里将容器中的端口：80 映射到宿主机的端口：80</li>\n<li>nginx 是镜像名称，也就是刚刚 pull 下来的镜像，没有 tag 表示用最新 (latest)</li>\n</ul>\n<p>此时在浏览器输入本地 ip 可看到 nginx 默认登录界面：</p>\n<p><img data-src=\"image-20230627181050252.png\" alt=\"image-20230627181050252\"></p>\n<p>此时必须用 CTRL+c 在命令行中停止容器运行。可以使用 docker ps -a 查看此时的容器状态。</p>\n<p><img data-src=\"image-20230627181625674.png\" alt=\"image-20230627181625674\"></p>\n<p>可以使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-vf</span> docker-nginx</pre></td></tr></table></figure><p>删除现有的 dorker-nginx 容器。</p>\n<h2 id=\"daemon模式下运行\"><a class=\"anchor\" href=\"#daemon模式下运行\">#</a> Daemon 模式下运行</h2>\n<p>上面启动的容器还未与 terminal 分离，必须手动 CTRL+c 停止运行 才能输入后续指令，而在 daemon 模式下我们可以将容器交给 Daemon 进程，即一个守护进程托管，让其在后台运行。</p>\n<p>创建一个保存网页内容的文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> ~/docker-nginx/html</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~/docker-nginx/html</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">vim</span> index.html</pre></td></tr></table></figure><p>编写网页内容：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Docker nginx Tutorial<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>this page is provided by nginx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后使用命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> docker-nginx <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-v</span> ~/docker-nginx/html:/usr/share/nginx/html nginx</pre></td></tr></table></figure><p>参数说明：</p>\n<ul>\n<li>-v 标志开启挂载功能，: 的左侧是服务器（宿主机）上的位置：右侧是链接到的容器内的位置</li>\n<li>-d 采用 daemon 模式</li>\n<li><code>/usr/share/nginx/html</code>  是 nginx 服务器默认用于存储静态 HTML 网页和其他资源的位置，通常情况下会在这个目录中存放可由 Web 浏览器访问的 HTML 文件、CSS 文件、JavaScript 文件和图像文件等。</li>\n</ul>\n<p>结果：</p>\n<p><img data-src=\"image-20230627183153353.png\" alt=\"image-20230627183153353\"></p>\n<h2 id=\"使用dockerfile创建本地镜像\"><a class=\"anchor\" href=\"#使用dockerfile创建本地镜像\">#</a> 使用 Dockerfile 创建本地镜像</h2>\n<h3 id=\"什么是dockerfile\"><a class=\"anchor\" href=\"#什么是dockerfile\">#</a> 什么是 Dockerfile</h3>\n<p><img data-src=\"image-20230627190343246.png\" alt=\"image-20230627190343246\"></p>\n<h3 id=\"使用dockerfile创建2048镜像并运行\"><a class=\"anchor\" href=\"#使用dockerfile创建2048镜像并运行\">#</a> 使用 Dockerfile 创建 2048 镜像并运行</h3>\n<p>Dockerfile 的内容如下：</p>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Pull base image.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> nginx:latest</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> 2048-master /usr/share/nginx/html</span></pre></td></tr></table></figure><p>在 Dockerfile 的同级目录下存放了 2048-master 文件夹，其中包含了 2048 网页版的资源</p>\n<p>使用命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> my-2048 <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>创建一个名为 my-2048 的镜像 最后的。表示 Dockerfile 在当前目录下。</p>\n<p>-t 指定镜像的名字</p>\n<p>然后使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> <span class=\"token number\">2048</span> <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 my-2048</pre></td></tr></table></figure><p>创建并启动一个容器</p>\n<p>此时打开 localhost：</p>\n<p><img data-src=\"image-20230627191156151.png\" alt=\"image-20230627191156151\"></p>\n<h2 id=\"docker镜像管理\"><a class=\"anchor\" href=\"#docker镜像管理\">#</a> Docker 镜像管理</h2>\n<p><img data-src=\"image-20230627192134665.png\" alt=\"image-20230627192134665\"></p>\n<h2 id=\"docker容器管理\"><a class=\"anchor\" href=\"#docker容器管理\">#</a> Docker 容器管理</h2>\n<p><img data-src=\"image-20230627192437509.png\" alt=\"image-20230627192437509\"></p>\n",
            "tags": [
                "docker"
            ]
        }
    ]
}