{
    "version": "https://jsonfeed.org/version/1",
    "title": "MikeMao's blog • All posts by \"编译原理\" tag",
    "description": "a student of NJU who use this website to record learning experience",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/",
            "title": "编译原理01-词法分析",
            "date_published": "2023-03-09T02:58:10.000Z",
            "content_html": "<h1 id=\"编译原理01-词法分析\"><a class=\"anchor\" href=\"#编译原理01-词法分析\">#</a> 编译原理 01 - 词法分析</h1>\n<p>词法分析： 输入（程序文本 / 字符串 s）--&gt; 输出（词法单元流）</p>\n<p><span id=\"more\"></span></p>\n<p><img data-src=\"image-20230309110603730.png\" alt=\"image-20230309110603730\"></p>\n<h2 id=\"词法分析器的三种设计方法由易到难\"><a class=\"anchor\" href=\"#词法分析器的三种设计方法由易到难\">#</a> 词法分析器的三种设计方法（由易到难）</h2>\n<ol>\n<li>词法分析器生成器（如 ANTLR）</li>\n<li>手写词法分析器</li>\n<li>自动化词法分析器 (自己实现一个词法分析器生成器)</li>\n</ol>\n<p>生产环境下的编译器（如 gcc）通常选择手写词法分析器</p>\n<h2 id=\"antrl的使用\"><a class=\"anchor\" href=\"#antrl的使用\">#</a> antrl 的使用</h2>\n<p>输入： 词法单元的规约 -<strong>SimpleExpr.g4</strong></p>\n<p>输出：词法分析器 -  <strong>SimpleExprLexer.java</strong></p>\n<p>​\t\t\t\tSimpleExprLexer.java 编译后 接受输入文件 并输出 token 流</p>\n<h2 id=\"g4文件的结构\"><a class=\"anchor\" href=\"#g4文件的结构\">#</a> .g4 文件的结构</h2>\n<p>第一行： <code>grammar SimpleExpr ;</code>  给接下来的文法起个名字 名字要与文件名一致</p>\n<p>​\t\t\t\t\t** 如果文件里只包含词法部分 用 lexer grammar SysYLexer **</p>\n<p>​\t\t\t\t\t 每一行都要以分号结尾</p>\n<p>@header {} 括号里的东西会自动拷贝到到 java 文件中</p>\n<p>语法规则见下面示例</p>\n<p>SimpleExpr.g4:</p>\n<pre><code class=\"language-Antlr\">grammar SimpleExpr;\n\nimport SimpleExprRules;\n\n@header&#123;\npackage simpleexpr;\n&#125;\n\nprog : stat* EOF ;\n\nstat : expr ';'\n     | ID '=' expr ';'\n     | 'if' expr ';'\n     ;\n\nexpr : expr ('*' | '/') expr\n     | expr ('+' | '-') expr\n     | '(' expr ')'\n     | ID\n     | INT\n     | FLOAT\n     ;\n    // 到这里描述的其实还是语法结构\n</code></pre>\n<p>SimpleExprRules.g4:</p>\n<pre><code class=\"language-Antlr\">lexer grammar SimpleExprRules;\n\nSEMI : ';' ;\nASSIGN : '=' ;\nIF : 'if' ;\nMUL : '*' ;\nDIV : '/' ;\nADD : '+' ;\nSUB : '-' ;\nLPAREN : '(' ;\nRPAREN : ')' ;\n\nID : (LETTER | '_') WORD* ;\nINT : '0' | ([1-9] DIGIT*) ;\nFLOAT : INT '.' DIGIT*\n      | '.' DIGIT+\n      ;\n\nWS : [ \\t\\r\\n]+ -&gt; skip ;\n\n//SL_COMMENT : '//' .*? '\\n' -&gt; skip ;\nSL_COMMENT2 : '//' ~[\\n]* '\\n' -&gt; skip;\nDOC_COMMENT : '/**' .*? '*/' -&gt; skip ;\nML_COMMENT : '/*' .*? '*/' -&gt; skip ;\n\nfragment LETTER : [a-zA-Z] ;\nfragment DIGIT : [0-9] ;\nfragment WORD : LETTER | DIGIT | '_' ;\n//以上才是真正的词法部分\n\n</code></pre>\n<h2 id=\"用编程方式使用antlr-4-生成的xxxlexerjava\"><a class=\"anchor\" href=\"#用编程方式使用antlr-4-生成的xxxlexerjava\">#</a> 用编程方式使用 ANTLR 4 生成的 xxxlexer.java</h2>\n<pre><code>package simpleexpr;\n\nimport org.antlr.v4.runtime.CharStream;\nimport org.antlr.v4.runtime.CharStreams;\nimport org.antlr.v4.runtime.CommonTokenStream;\nimport org.antlr.v4.runtime.Token;\nimport org.antlr.v4.runtime.tree.ParseTree;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class SimpleExprTest &#123;\n  public static void main(String[] args) throws IOException &#123;\n    System.out.println(&quot;SimpleExprTest ...&quot;);\n\n    InputStream is = System.in;\n\n    String file;\n    if (args.length &gt; 0) &#123;\n      file = args[0];\n      is = new FileInputStream(file);\n    &#125;\n\n    CharStream input = CharStreams.fromStream(is);\n    //SimpleExprLexer 是.g4文件生成的java类 input必须是CharStream格式\n    SimpleExprLexer lexer = new SimpleExprLexer(input);\n\t\n    lexer.getAllTokens().forEach(System.out::println);\n  &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h2>\n<p>基本的知识就不记录了 记录一些重要的</p>\n<ul>\n<li>非贪婪匹配  <code>,*?</code></li>\n<li>反向引用 要引用的用（）括起来，后面引用通过子表达式下标访问，如 \\1，下标从 1 开始</li>\n<li>look ahead ?&lt;= 符号，表示前面字符要满足 xxx，但不匹配 xxx</li>\n<li>look back  ?= 符号，表示后面字符要满足 xxx，但不匹配 xxx</li>\n</ul>\n<h2 id=\"nfa与dfa\"><a class=\"anchor\" href=\"#nfa与dfa\">#</a> NFA 与 DFA</h2>\n<p>NFA：非确定性自动机  DFA: 确定性自动机</p>\n<p>区别：其中 L (A) 是使当前自动机能进入接受状态的输入集合</p>\n<ul>\n<li>\n<p>NFA 简洁易于理解，便于描述语言 L (A)</p>\n</li>\n<li>\n<p>DFA 易于判断 x 属于 L (A)，适合产生词法分析器</p>\n</li>\n</ul>\n<h2 id=\"汤普森构造法\"><a class=\"anchor\" href=\"#汤普森构造法\">#</a> 汤普森构造法</h2>\n<p><img data-src=\"image-20230315141912075.png\" alt=\"image-20230315141912075\"></p>\n<p><img data-src=\"image-20230315142444609.png\" alt=\"image-20230315142444609\"></p>\n<p>举个例子：(a|b)*abb 的构造</p>\n<p><img data-src=\"image-20230315142551213.png\" alt=\"image-20230315142551213\"></p>\n<h2 id=\"从nfa到dfa的转换\"><a class=\"anchor\" href=\"#从nfa到dfa的转换\">#</a> 从 NFA 到 DFA 的转换：</h2>\n<p><img data-src=\"image-20230315142711571.png\" alt=\"image-20230315142711571\"></p>\n<p><img data-src=\"image-20230315143847385.png\" alt=\"image-20230315143847385\"></p>\n<p>符号化的表示：</p>\n<p><img data-src=\"image-20230315143949988.png\" alt=\"image-20230315143949988\"></p>\n<p><strong>复杂度：NFA 有 n 个状态 DFA 最多有 2 的 n 次方个状态 指数爆炸</strong></p>\n<h2 id=\"dfa最小化算法\"><a class=\"anchor\" href=\"#dfa最小化算法\">#</a> DFA 最小化算法</h2>\n<p>核心思想<strong>做划分而非合并</strong></p>\n<h3 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h3>\n<p>太复杂了</p>\n<h3 id=\"为什么dfa最小化算法是正确的\"><a class=\"anchor\" href=\"#为什么dfa最小化算法是正确的\">#</a> 为什么 DFA 最小化算法是正确的</h3>\n<h3 id=\"最小化dfa是唯一的吗\"><a class=\"anchor\" href=\"#最小化dfa是唯一的吗\">#</a> 最小化 DFA 是唯一的吗</h3>\n<h2 id=\"根据dfa得到re非重点\"><a class=\"anchor\" href=\"#根据dfa得到re非重点\">#</a> 根据 DFA 得到 RE (非重点)</h2>\n<h2 id=\"lab-1\"><a class=\"anchor\" href=\"#lab-1\">#</a> lab 1</h2>\n<p>编程一小时 配置环境一天的典型代表。</p>\n<p>从 lab1 知道了以后应该恶补 ssh 远程连接 linux 命令行 makefile .gitignore 导入依赖 java 基本语法 IDEA 的使用......</p>\n<h3 id=\"实验输入\"><a class=\"anchor\" href=\"#实验输入\">#</a> 实验输入</h3>\n<p>本次实验的输入是一个包含了 <code>SysY</code>  源代码的文件，你的程序需要接受一个文件名作为参数</p>\n<h3 id=\"实验内容\"><a class=\"anchor\" href=\"#实验内容\">#</a> 实验内容</h3>\n<h3 id=\"part1-词法分析\"><a class=\"anchor\" href=\"#part1-词法分析\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD1wYXJ0MS0lRTglQUYlOEQlRTYlQjMlOTUlRTUlODglODYlRTYlOUUlOTA=\">Part1 词法分析</span></h3>\n<ul>\n<li>本次实验你需要完成一个词法分析器对使用 SysY 语言书写的源代码进行词法分析，要求如下\n<ul>\n<li>本次实验要求通过<strong>标准错误输出（stderr, 如 System.err 等）</strong>， 打印程序的 <strong>所有</strong> 运行结果。</li>\n<li>当<strong>包含词法错误时</strong>：对于包含词法错误的文件，你需要打印<strong>所有</strong>错误信息，格式为： <code>Error type A at Line [lineNo]:[errorMessage]</code> ，其中 <code>lineNo</code>  为出错的 <code>token</code>  首个字符所在行的行号， <code>errorMessage</code>  可自行定义，本实验不做要求，只要冒号前的信息正确即可。</li>\n<li>当<strong>不包含词法错误时</strong>：对于没有任何词法错误的文件，你需要打印所有识别到的 <code>Tokens</code>  信息，具体输出格式可以参见<strong>样例一</strong>。特别要求：输出时忽略所有注释，对十六进制和八进制数字常量输出 <code>token</code>  文本时需输出其十进制的值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"样例\"><a class=\"anchor\" href=\"#样例\">#</a> 样例</h3>\n<p>输入</p>\n<pre><code class=\"language-SysY\">int main() \n&#123;\n   // line comment\n   /* \n     block comment\n   */\n   int i = 0x1;\n&#125;\n</code></pre>\n<p>输出</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">INT</span> <span class=\"token keyword\">int</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token constant\">IDENT</span> main at <span class=\"token class-name\">Line</span> <span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">L_PAREN</span> <span class=\"token punctuation\">(</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">R_PAREN</span> <span class=\"token punctuation\">)</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">L_BRACE</span> <span class=\"token punctuation\">&#123;</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">2.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">INT</span> <span class=\"token keyword\">int</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">IDENT</span> i at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">ASSIGN</span> <span class=\"token operator\">=</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token constant\">INTEGER_CONST</span> <span class=\"token number\">1</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token constant\">SEMICOLON</span> <span class=\"token punctuation\">;</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token constant\">R_BRACE</span> <span class=\"token punctuation\">&#125;</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">8.</span></pre></td></tr></table></figure><p>解释：</p>\n<p>每行输出一个 token 的信息，输出格式为</p>\n<pre><code>[token类型] [token文本] at Line [此token首个字符所在行的行号].复制到剪贴板复制失败复制成功!\n</code></pre>\n<p><strong>输出时忽略所有注释，对十六进制和八进制数字常量输出 token 文本时需输出其十进制的值</strong></p>\n<p>特别注意，遇到如 <code>int 2i = 08;</code>  这种输入时，请将 <code>2i</code>  识别为 <code>INTEGER_CONST</code>  和 <code>IDENT</code> ， <code>08</code>  识别为两个 <code>INTEGER_CONST</code> ，这种我们不认为是词法错误，这种错误将在后面的实验中处理</p>\n<h3 id=\"样例二\"><a class=\"anchor\" href=\"#样例二\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD0lRTYlQTAlQjclRTQlQkUlOEIlRTQlQkElOEM=\">样例二</span></h3>\n<p>输入:</p>\n<pre><code class=\"language-SysY\">int main()&#123;\n  int i = 1;\n  int j = ~i;\n&#125;复制到剪贴板复制失败复制成功!\n</code></pre>\n<p>输出：</p>\n<pre><code>Error type A at Line 3: Mysterious character &quot;~&quot;.\n</code></pre>\n<h2 id=\"实验过程\"><a class=\"anchor\" href=\"#实验过程\">#</a> 实验过程</h2>\n<ul>\n<li>\n<p>第一个难题就是怎么在 windows 里的 IDEA 编程，但是运行和调试环境是虚拟机中的 ubuntu20.04+lab0 配置好的环境 想法就是用 IDEA 的 remote deployment 功能，在网上搜索教程后发现我的 IDEA 竟然没有这个功能，原因是我的是 community 版本，所以卸载了之前的 IDEA 装了专业版。然后 remote deployment 原理应该是使用 ssh 连接，虽然虚拟机是装在电脑里，但其实和与远程服务器相连原理是一样的。</p>\n</li>\n<li>\n<p>然后编写.g4 文件比较顺利，生成了 SysYlexer.java 文件，但是在 main 函数中使用 SysYlexer 类也遇见了困难，首先是导入 antlr，IDEA 一直报错无法解析 symbol antlr，但是 lab0 中我应该是配好了 antlr 环境的，不知道为什么，所以还是用 IDEA 的 libraries 中导入了 antlr 才好</p>\n</li>\n<li>\n<p>第三个难题就是删除 SysYLexer 中自带的 ErrorListeners, 使用自己编写的 errorlisteners，这里老师上课应该是没有讲的，所以也是无从下手。后面借助搜索引擎和 ChatGPT 学了很久才会。原理很简单，先放上自己实现的 myErrorListener 如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> myErrorListener <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseErrorListener</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syntaxError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Recognizer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> recognizer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">Object</span> offendingSymbol<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> charPositionInLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">RecognitionException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error type A at Line \"</span><span class=\"token operator\">+</span>line<span class=\"token operator\">+</span><span class=\"token string\">\": \"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\terror <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要是重写了 syntaxError 这个函数，他里面的参数应该是报错相关的信息，这里只用到了 line（出错的行）和 msg（具体的报错信息），其它的是什么意思忘记了。应该是每出现一个错误就会调用一次 syntaxError 函数。</p>\n</li>\n<li>\n<p>然后放一下 main 函数部分：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>antlr<span class=\"token punctuation\">.</span>v4<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> error <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input path is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> source <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">CharStream</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">CharStreams</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromFileName</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">SysYLexer</span> sysYLexer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SysYLexer</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tsysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">removeErrorListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tsysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">addErrorListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">myErrorListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">></span></span> tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> sysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">getAllTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rulenames <span class=\"token operator\">=</span> sysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">getRuleNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span> token <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> tokenType <span class=\"token operator\">=</span> rulenames<span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> tokenText <span class=\"token operator\">=</span> <span class=\"token function\">toDemical</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> tokenLine <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">+</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>tokenType <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> tokenText <span class=\"token operator\">+</span> <span class=\"token string\">\" at Line \"</span><span class=\"token operator\">+</span>tokenLine<span class=\"token operator\">+</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> myErrorListener <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseErrorListener</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syntaxError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Recognizer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> recognizer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">Object</span> offendingSymbol<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> charPositionInLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">RecognitionException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error type A at Line \"</span><span class=\"token operator\">+</span>line<span class=\"token operator\">+</span><span class=\"token string\">\": \"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\terror <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toDemical</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0[0-7]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0[xX][0-9a-fA-F]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>反正做的时候除了文档里给的框架几乎每一行都想了很久。</p>\n</li>\n<li>\n<p>代码写完后上传又有问题，可能是之前 make compile , make clean 太多次了，导致压缩包超过了 10M 的限制，后来参考助教给的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xNzA4\">记一次删除 Git 记录中的大文件的过程 - HollisChuang's Blog</span> 按里面的步骤一步步做才完成上传，比较幸运的是一次就 AC 了。（至于为什么压缩包会那么大，我的理解是改动了太多次代码 make compile 了太多次，且每次 git 都会保存版本信息以便于回退，所以改动的所有版本其实都还在 git 保存的隐藏文件夹下的，所以整个目录就会变得很大了）</p>\n</li>\n</ul>\n",
            "tags": [
                "编译原理"
            ]
        }
    ]
}