{
    "version": "https://jsonfeed.org/version/1",
    "title": "MikeMao's blog • All posts by \"编译原理\" tag",
    "description": "a student of NJU who use this website to record learning experience",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/12/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8603-%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2023/04/12/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8603-%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90/",
            "title": "编译原理03-语义分析",
            "date_published": "2023-04-12T07:46:23.000Z",
            "content_html": "<h1 id=\"语义分析\"><a class=\"anchor\" href=\"#语义分析\">#</a> 语义分析</h1>\n<h2 id=\"符号表\"><a class=\"anchor\" href=\"#符号表\">#</a> 符号表</h2>\n<p><img data-src=\"image-20230412154717575.png\" alt=\"image-20230412154717575\"></p>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2023/03/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8602-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2023/03/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8602-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/",
            "title": "编译原理02-语法分析",
            "date_published": "2023-03-24T06:05:42.000Z",
            "content_html": "<h1 id=\"编译原理02-语法分析\"><a class=\"anchor\" href=\"#编译原理02-语法分析\">#</a> 编译原理 02 - 语法分析</h1>\n<p>主要内容：如何用 antlr4 生成一个语法分析器。手写语法分析器比较困难，不作要求。</p>\n<p>lesson1 任务： 用 cymbol 语言（龙书中提供的一种简化版 c 语言）写一段程序，并生成如下的函数调用关系图。</p>\n<p><img data-src=\"image-20230326120955042.png\" alt=\"image-20230326120955042\"></p>\n<p>lesson2 任务：写一个简单的计算器</p>\n<p>在为自己的语言编写语法分析器时，可能会遇到一些问题。</p>\n<h2 id=\"问题一二义性文法\"><a class=\"anchor\" href=\"#问题一二义性文法\">#</a> 问题一：二义性文法</h2>\n<p>考虑下列定义：</p>\n<p><img data-src=\"image-20230324142546278.png\" alt=\"image-20230324142546278\"></p>\n<p><code>if a then if b then c else d</code>  可以有两种解释</p>\n<p><img data-src=\"image-20230324142701632.png\" alt=\"image-20230324142701632\"></p>\n<p>龙书上给的无二义性语法：</p>\n<p><img data-src=\"image-20230324143323221.png\" alt=\"image-20230324143323221\"></p>\n<p>难题是如何证明没有二义性（见龙书）</p>\n<p>在 antlr4 中，写在前面的定义如果能被匹配到，就会优先选择写在前面的定义，以防止歧义出现的错误。</p>\n<h3 id=\"运算符的结合性带来的二义性\"><a class=\"anchor\" href=\"#运算符的结合性带来的二义性\">#</a> 运算符的结合性带来的二义性</h3>\n<p><img data-src=\"image-20230324143744282.png\" alt=\"image-20230324143744282\"></p>\n<p>没有规定是左结合还是右结合，可以有两种解释，导致结果不一样。</p>\n<p>antlr4 规定运算符默认是左结合的，以消除这种歧义。</p>\n<p>如何明确指明是右结合的（如乘方运算符要规定为右结合的）：</p>\n<p><img data-src=\"image-20230324143947465.png\" alt=\"image-20230324143947465\"></p>\n<h3 id=\"运算符优先级带来的二义性\"><a class=\"anchor\" href=\"#运算符优先级带来的二义性\">#</a> 运算符优先级带来的二义性</h3>\n<p><img data-src=\"image-20230324144400266.png\" alt=\"image-20230324144400266\"></p>\n<p>在 antlr4 里，写在前面的运算符优先级更高。</p>\n<p>如果不是 antlr4，比如在某些比较古老的工具中，需要我们自己处理。</p>\n<h2 id=\"如何根据代码生成函数调用图\"><a class=\"anchor\" href=\"#如何根据代码生成函数调用图\">#</a> 如何根据代码生成函数调用图</h2>\n<p>先用 antlr4 生成语法分析树，然后用 dfs 方法遍历语法树。</p>\n<h3 id=\"铺垫\"><a class=\"anchor\" href=\"#铺垫\">#</a> 铺垫</h3>\n<p>antlr4 提供了 listener, 在 antlr 帮我们遍历语法树时，当 antlr4 进入一类节点时，会触发 enter 节点事件，离开时会触发 exit 节点事件。</p>\n<p>问题：需要细分，比如函数调用和 赋值语句都是 expr，那么进入 expr 节点的时候都会触发 enterExpr 事件，不好针对特定情况处理。</p>\n<p>情况一：</p>\n<p>​\tfunction call 和 赋值语句都是 expr，因此触发了 enterExpr 时间后也无法细分是哪类 expr。</p>\n<p>解决方法：在 g4 文件对应的定义后加上  <code># fuctioncall</code> , 要加的话后面的也要加上</p>\n<p>情况二： <code>expr ('*' |  '/') expr</code>  被定义为 MutiDiv, 则进入 MutiDiv 的时候不知道是还是除法。</p>\n<p>解决方法：</p>\n<p><code> expr (op = '*' | op = '/') expr</code>  进入时判断变量 op 的值是什么便可</p>\n<h2 id=\"如何生成一个调用图\"><a class=\"anchor\" href=\"#如何生成一个调用图\">#</a> 如何生成一个调用图</h2>\n<p>按 Graphviz 语法编写.dot 文件，会自动生成调用图</p>\n<p><img data-src=\"image-20230326201151771.png\" alt=\"image-20230326201151771\"></p>\n<h2 id=\"实现一个简单的计算器\"><a class=\"anchor\" href=\"#实现一个简单的计算器\">#</a> 实现一个简单的计算器</h2>\n<h3 id=\"listener模式的一个弊端\"><a class=\"anchor\" href=\"#listener模式的一个弊端\">#</a> listener 模式的一个弊端</h3>\n<p>antlr 提供的 listener 模式方法的返回值是 void，但是我们想实现一个计算器的话，在 dfs 语法树的时候就必须利用子节点的值来计算。为了解决这个问题，antlr4 提供了一个标注（Annotate) 语法树的功能。</p>\n<p>eg:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//calcuListener 里的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exitParens</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CymbolParser<span class=\"token punctuation\">.</span>ParensContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">expr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exitAddSub</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CymbolParser<span class=\"token punctuation\">.</span>AddSubContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> lvalue <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>lhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//lhs (left hand side) 在.g4 文件中赋值为前面的 expr</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> rvalue <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>op<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">ADD</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> lvalue<span class=\"token operator\">+</span>rvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span>lvalue<span class=\"token operator\">-</span>rvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"上下文无关文法\"><a class=\"anchor\" href=\"#上下文无关文法\">#</a> 上下文无关文法</h2>\n<p><img data-src=\"image-20230329150049799.png\" alt=\"image-20230329150049799\"></p>\n<p>编写 g4 文件时实际上用的就是上下文无关文法</p>\n<h3 id=\"什么是上下文相关文法\"><a class=\"anchor\" href=\"#什么是上下文相关文法\">#</a> 什么是上下文相关文法</h3>\n<p><img data-src=\"image-20230329150412566.png\" alt=\"image-20230329150412566\"></p>\n<p>以第三行与第七行为例：B 是展开为 Z 还是 b 与它的上下文（这里是前面的字符）有关</p>\n<p>这段文法表示的是 a<sup>n*b</sup>n*c^n ，可以证明用上下文无关文法是无法描述这个语言的。</p>\n<h3 id=\"推导\"><a class=\"anchor\" href=\"#推导\">#</a> 推导</h3>\n<p><img data-src=\"image-20230329150648976.png\" alt=\"image-20230329150648976\"></p>\n<p><img data-src=\"image-20230329150810626.png\" alt=\"image-20230329150810626\"></p>\n<h3 id=\"为什么不使用正则表达式去描述语法\"><a class=\"anchor\" href=\"#为什么不使用正则表达式去描述语法\">#</a> 为什么不使用正则表达式去描述语法</h3>\n<p><img data-src=\"image-20230329153448085.png\" alt=\"image-20230329153448085\"></p>\n<p>证明如下：</p>\n<p><img data-src=\"image-20230329153850498.png\" alt=\"image-20230329153850498\"></p>\n<p><img data-src=\"image-20230329154356116.png\" alt=\"image-20230329154356116\"></p>\n<p>因为 m &gt; k, 所以一定存在状态 si ，在 si 停留了两次，假设又经过了 j 步能够到达第二次 si</p>\n<p>根据假设，a<sup>ib</sup>i 能够到达终止状态，那么 a<sup>(i+j)b</sup>i 也能到达终止状态，与假设矛盾，证明完毕。</p>\n<h2 id=\"ll1语法分析器\"><a class=\"anchor\" href=\"#ll1语法分析器\">#</a> LL (1) 语法分析器</h2>\n<h3 id=\"总览\"><a class=\"anchor\" href=\"#总览\">#</a> 总览</h3>\n<p><img data-src=\"image-20230411205542981.png\" alt=\"image-20230411205542981\"></p>\n<p><img data-src=\"image-20230331143754540.png\" alt=\"image-20230331143754540\"></p>\n<h3 id=\"自顶向下的含义\"><a class=\"anchor\" href=\"#自顶向下的含义\">#</a> 自顶向下的含义</h3>\n<p><img data-src=\"image-20230331140837017.png\" alt=\"image-20230331140837017\"></p>\n<h3 id=\"两个l的含义\"><a class=\"anchor\" href=\"#两个l的含义\">#</a> 两个 L 的含义</h3>\n<p><img data-src=\"image-20230331141034044.png\" alt=\"image-20230331141034044\"></p>\n<h3 id=\"递归下降的含义\"><a class=\"anchor\" href=\"#递归下降的含义\">#</a> 递归下降的含义</h3>\n<p><img data-src=\"image-20230331141214747.png\" alt=\"image-20230331141214747\"></p>\n<p>eg: 先默认选择产生式的问题已经被解决了，只演示递归下降的过程</p>\n<p><img data-src=\"image-20230331141731554.png\" alt=\"image-20230331141731554\"></p>\n<p><img data-src=\"image-20230331142317647.png\" alt=\"image-20230331142317647\"></p>\n<h3 id=\"如何选择产生式\"><a class=\"anchor\" href=\"#如何选择产生式\">#</a> 如何选择产生式</h3>\n<p><img data-src=\"image-20230331142728269.png\" alt=\"image-20230331142728269\"></p>\n<p><img data-src=\"image-20230331142916987.png\" alt=\"image-20230331142916987\"></p>\n<h3 id=\"什么是ll1文法\"><a class=\"anchor\" href=\"#什么是ll1文法\">#</a> 什么是 LL (1) 文法</h3>\n<p><img data-src=\"image-20230331143057195.png\" alt=\"image-20230331143057195\"></p>\n<p><strong>LL（1）中 1 的含义：只需要查看当前的输入符号就可以确定选择哪条产生式进行展开</strong></p>\n<h3 id=\"ll1的伪代码\"><a class=\"anchor\" href=\"#ll1的伪代码\">#</a> LL (1) 的伪代码</h3>\n<p><strong>假设预测分析表已经有了</strong></p>\n<p><img data-src=\"image-20230331143540005.png\" alt=\"image-20230331143540005\"></p>\n<p><img data-src=\"image-20230331143718582.png\" alt=\"image-20230331143718582\"></p>\n<h3 id=\"难点如何生成预测分析表\"><a class=\"anchor\" href=\"#难点如何生成预测分析表\">#</a> 难点：如何生成预测分析表</h3>\n<p><img data-src=\"image-20230331150322238.png\" alt=\"image-20230331150322238\"></p>\n<p>竖着看：什么时候选择展开为 func_call, 还是 decl。很简单，看当前输入的前面是 int 还是 ID。</p>\n<p>横着看：如何确定 optional_init 是否展开为空串</p>\n<p>问题：什么时候可以选择空串展开？ 见后</p>\n<p><img data-src=\"image-20230331151147854.png\" alt=\"image-20230331151147854\"></p>\n<p><img data-src=\"image-20230331151439293.png\" alt=\"image-20230331151439293\"></p>\n<p><img data-src=\"image-20230331151512669.png\" alt=\"image-20230331151512669\"></p>\n<p><img data-src=\"image-20230331152131492.png\" alt=\"image-20230331152131492\"></p>\n<p>为什么中间两步要去除空串，比如：因为即使 Y1 可以被展开为空串，后面的 Y2-YK 不一定能展开为空串，X 的开头不一定是空串。空串要单独判断</p>\n<p><img data-src=\"image-20230331152345075.png\" alt=\"image-20230331152345075\"></p>\n<p><img data-src=\"image-20230411223059716.png\" alt=\"image-20230411223059716\"></p>\n<p>dollar 符是文件结束符号</p>\n<p>因为 follow 集合考虑的是终结符，所以规则 3 要去掉空串</p>\n<p><img data-src=\"image-20230407140712901.png\" alt=\"image-20230407140712901\"></p>\n<p>例子：</p>\n<p><img data-src=\"image-20230407140907285.png\" alt=\"image-20230407140907285\"></p>\n<p>这个例子中只看 c 无法确定 Y 是由 3 号还是 4 号规则展开，则不是 LL (1) 文法</p>\n<h3 id=\"非递归的预测分析算法不作要求\"><a class=\"anchor\" href=\"#非递归的预测分析算法不作要求\">#</a> 非递归的预测分析算法（不作要求）</h3>\n<p><img data-src=\"image-20230407141535578.png\" alt=\"image-20230407141535578\"></p>\n<h2 id=\"改造为ll1文法\"><a class=\"anchor\" href=\"#改造为ll1文法\">#</a> 改造为 LL (1) 文法</h2>\n<p><img data-src=\"image-20230407141907838.png\" alt=\"image-20230407141907838\"></p>\n<p>为什么左递归不是 LL (1) 文法：</p>\n<p>LL (1) 的递归下降算法会出问题：</p>\n<p>E 展开为 E+T，然后 E+T 中的 E 展开为 E+T。。。</p>\n<p><img data-src=\"image-20230407142036246.png\" alt=\"image-20230407142036246\"></p>\n<p><img data-src=\"image-20230407142224345.png\" alt=\"image-20230407142224345\"></p>\n<p>问题：改写成右递归比较复杂，而且改造后可读性较差</p>\n<h3 id=\"直接左递归的改造\"><a class=\"anchor\" href=\"#直接左递归的改造\">#</a> 直接左递归的改造</h3>\n<p>改造的模板：</p>\n<p><img data-src=\"image-20230407142538910.png\" alt=\"image-20230407142538910\"></p>\n<h3 id=\"间接左递归的改造\"><a class=\"anchor\" href=\"#间接左递归的改造\">#</a> 间接左递归的改造</h3>\n<p><img data-src=\"image-20230407142905861.png\" alt=\"image-20230407142905861\"></p>\n<p>思路：改造后的文法中的每一条展开式都应该满足红框里的条件 因为展开后的编号越来越大，就永远回不到自己。</p>\n<p>例子：</p>\n<ol>\n<li>首先对所有的非终结符编号： S：A1， A：A2， B：A3</li>\n<li>看所有的非终结符的展开式是否满足单调递增性质</li>\n</ol>\n<p><img data-src=\"image-20230407143533868.png\" alt=\"image-20230407143533868\"></p>\n<ol start=\"3\">\n<li>发现 B-&gt; Sa|a 不满足改造条件， 将非终结符慢慢展开，发现展开为最后一行时变成了直接左递归，直接左递归用上面的方法处理。</li>\n</ol>\n<h3 id=\"左递归改造算法要求\"><a class=\"anchor\" href=\"#左递归改造算法要求\">#</a> 左递归改造算法要求：</h3>\n<p><img data-src=\"image-20230407143729991.png\" alt=\"image-20230407143729991\"></p>\n<h3 id=\"左公因子的改造\"><a class=\"anchor\" href=\"#左公因子的改造\">#</a> 左公因子的改造</h3>\n<p><img data-src=\"image-20230407144035629.png\" alt=\"image-20230407144035629\"></p>\n<p>为什么左公因子不行 ，比如第八行原来的 decl 内容，两个展开式开头都是 'int'。</p>\n<p>改造方法简单，如第 13 行的定义</p>\n<h2 id=\"adaptive-ll语法分析算法\"><a class=\"anchor\" href=\"#adaptive-ll语法分析算法\">#</a> Adaptive LL (*) 语法分析算法</h2>\n<p>也称 ALL STAR 算法，antrl4 采用这种算法</p>\n<p>ChatGPT 评价：</p>\n<p><img data-src=\"image-20230407144342359.png\" alt=\"image-20230407144342359\"></p>\n<p>第 2,3 行 含有 LL (1) 的特性：不用猜测 自顶向下</p>\n<p>第 4 行： 解决二义性</p>\n<p>第 7 行：解决左递归</p>\n<p><img data-src=\"image-20230407145002698.png\" alt=\"image-20230407145002698\"></p>\n<h3 id=\"antrl4对左递归的改造将左递归改造成循环迭代\"><a class=\"anchor\" href=\"#antrl4对左递归的改造将左递归改造成循环迭代\">#</a> antrl4 对左递归的改造，将左递归改造成循环 (迭代)</h3>\n<p><img data-src=\"image-20230407150629592.png\" alt=\"image-20230407150629592\"></p>\n<p>参数_p 指的是优先级，优先级按下面书写的顺序（ID 1,INT 2, 加法 3 乘法 4） 当 3 &gt;= _p 时 才能展开为加法。展开后变成了 expr [4]，优先级升了一级（优先级上升算法名称的由来）</p>\n<p><img data-src=\"image-20230407152404434.png\" alt=\"image-20230407152404434\"></p>\n<p>以 1+2+3 为例，右侧手写部分为算法伪代码</p>\n<p><img data-src=\"image-20230407152625774.png\" alt=\"image-20230407152625774\"></p>\n<p>以 1+2*3 为例</p>\n<h3 id=\"右结合运算符的处理\"><a class=\"anchor\" href=\"#右结合运算符的处理\">#</a> 右结合运算符的处理</h3>\n<p>想让一个运算符为右结合，再递归调用的时候传入的优先级应该不变。</p>\n<h2 id=\"antlr4是如何进行错误报告的\"><a class=\"anchor\" href=\"#antlr4是如何进行错误报告的\">#</a> antlr4 是如何进行错误报告的</h2>\n<p><img data-src=\"image-20230407154816857.png\" alt=\"image-20230407154816857\"></p>\n<p>NoViableAltException: 面对当前的输入时，要展开当前的非终结符，发现没有备选分支可选</p>\n<p>InputMismatchException: 根据选择好的备选分支展开时，发生终结符不匹配错误。</p>\n<p><img data-src=\"image-20230412141343590.png\" alt=\"image-20230412141343590\"></p>\n<p><strong>四项基本原则</strong>：</p>\n<ul>\n<li>特殊情况，特殊处理</li>\n<li>一般情况，统一处理</li>\n<li>统一处理，精细控制</li>\n<li>自定义错误处理策略</li>\n</ul>\n<h3 id=\"特殊情况特殊处理\"><a class=\"anchor\" href=\"#特殊情况特殊处理\">#</a> 特殊情况，特殊处理</h3>\n<p><img data-src=\"image-20230412141619597.png\" alt=\"image-20230412141619597\"></p>\n<h3 id=\"一般情况统一处理\"><a class=\"anchor\" href=\"#一般情况统一处理\">#</a> 一般情况，统一处理</h3>\n<p>例子：</p>\n<p><img data-src=\"image-20230412142107657.png\" alt=\"image-20230412142107657\"></p>\n<p>antlr4 看到一个中括号，可以报错：中间缺失一个 expr</p>\n<p>antlr 通过递归调用匹配，发现当前终结符匹配不了，于是递归返回，每一层看当前符号是不是一个<strong>想要的符号</strong>（所谓想要的符号，即假装当前想匹配的非终结符已经匹配成功，接下来应该遇到什么终结符，类似 Follow 集合，但不等价，称为 Following 集合）, 恢复到 expr 层，假装 expr 已经匹配成功，右中括号可以匹配，然后继续解析后面的。</p>\n<p>注意 Follow（静态）集合与 Following（动态）集合的区别。</p>\n<h3 id=\"统一处理精细控制\"><a class=\"anchor\" href=\"#统一处理精细控制\">#</a> 统一处理，精细控制</h3>\n<p><img data-src=\"image-20230412143257921.png\" alt=\"image-20230412143257921\"></p>\n<p>例子：</p>\n<p><img data-src=\"image-20230412143706102.png\" alt=\"image-20230412143706102\"></p>\n<p>不优雅的错误恢复：匹配 member 的时候，看到 y 不属于一个 member，直接退出 while 循环。</p>\n<p>优雅的错误恢复，相当于在匹配 member 的 while 循环中加了一个 continue，继续匹配。</p>\n<h3 id=\"自定义错误处理策略\"><a class=\"anchor\" href=\"#自定义错误处理策略\">#</a> 自定义错误处理策略</h3>\n<p>比如，（已知语法正确）关闭默认错误处理功能，提高运行效率</p>\n<p>比如，（出错代价太大）在遇到第一个语法错误时，就停止分析</p>\n<p>使用 antrl4 提供的 strategy 模式：</p>\n<p><img data-src=\"image-20230412144102502.png\" alt=\"image-20230412144102502\"></p>\n<h2 id=\"构建lookahead-dfa\"><a class=\"anchor\" href=\"#构建lookahead-dfa\">#</a> 构建 lookahead DFA</h2>\n<p><img data-src=\"image-20230412150939866.png\" alt=\"image-20230412150939866\"></p>\n<p>策略：既然不知道要选哪条备选分支，就并行地探索所有的备选分支</p>\n<p><img data-src=\"image-20230412151956767.png\" alt=\"image-20230412151956767\"></p>\n<p><img data-src=\"image-20230412154019808.png\" alt=\"image-20230412154019808\"></p>\n<h2 id=\"lab2\"><a class=\"anchor\" href=\"#lab2\">#</a> lab2</h2>\n<h3 id=\"实验内容\"><a class=\"anchor\" href=\"#实验内容\">#</a> 实验内容</h3>\n<ul>\n<li>本次实验需要完成语法分析与高亮，要求如下\n<ul>\n<li>根据实验指导内提供的文档完成 SysyParser.g4 并将 SysYParser.g4 中按下面已经给出的写法将 exp 和 cond 写成左递归</li>\n<li>当<strong>输入文件存在语法错误时</strong>：输出语法错误在哪一行，格式为 <code>Error type B at Line [lineNo]:[errorMessage]</code>  其中 lineNo 为出错的 token 首个字符所在行的行号，errorMessage 可自行定义，本实验不做要求，只要冒号前的信息正确即可，需要输出所有的错误</li>\n<li>当<strong>输入文件不存在语法错误时</strong>：按照规定格式输出语法树 (含高亮)，输出格式详见<strong>样例一</strong></li>\n<li>使用 ** 标准错误输出（System.err）** 打印所有运行结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实验过程\"><a class=\"anchor\" href=\"#实验过程\">#</a> 实验过程</h3>\n<p>仍然需要重写 BaseErrorListener 实现一个自己的 myErrorListener。与实验一不同的是，除法 ErrorListener 的方式不同，本次实验要在语法分析的过程中进行错误检查。改写的 main 函数如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input path is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> source <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">CharStream</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">CharStreams</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromFileName</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//\t\tSysYLexer sysYLexer = new SysYLexer(input);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//\t\tsysYLexer.removeErrorListeners();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//\t\tsysYLexer.addErrorListener(new myErrorListener());</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//\t\tList&lt;Token> tokens = (List&lt;Token>) sysYLexer.getAllTokens();</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">SysYLexer</span> sysYLexer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SysYLexer</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">CommonTokenStream</span> tokens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonTokenStream</span><span class=\"token punctuation\">(</span>sysYLexer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">SysYParser</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SysYParser</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tparser<span class=\"token punctuation\">.</span><span class=\"token function\">removeErrorListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tparser<span class=\"token punctuation\">.</span><span class=\"token function\">addErrorListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">myErrorListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">ParseTree</span> tree <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">Visitor</span> visitor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Visitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tvisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//\t\tString[] rulenames = sysYLexer.getRuleNames();</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//\t\tfor (Token token : tokens) &#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//\t\t\tString tokenType = rulenames[token.getType()-1];</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//\t\t\tString tokenText = toDemical(token.getText());</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//\t\t\tString tokenLine = \"\"+token.getLine();</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//\t\t\tSystem.err.println(tokenType + \" \" + tokenText + \" at Line \"+tokenLine+'.');</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//\t\t&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中注释掉的部分是实验一的代码。这次要将 errorlistener 加到语法分析器 parser 上 并且利用 parser.program () 触发错误检查并生成语法树。注意，之所以用 program () 方法当做入口方法是因为 SysYParser.g4 的定义中 program 是最高的语言层次。</p>\n<p>本次实验最重要的内容就是重写了一个继承自 SysYParserBaseVisitor 的类 Vistor 代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Visitor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SysYParserBaseVisitor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Void</span> <span class=\"token function\">visitChildren</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RuleNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token class-name\">Void</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\tsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getRuleContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuleIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> ruleName <span class=\"token operator\">=</span> <span class=\"token class-name\">SysYParser</span><span class=\"token punctuation\">.</span>ruleNames<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\truleName <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span>ruleName<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ruleName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ruleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">shouldVisitNextChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\tdepth <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ParseTree</span> c <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getChild</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">Void</span> childResult <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\tresult <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">aggregateResult</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> childResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\tdepth <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Void</span> <span class=\"token function\">visitTerminal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TerminalNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getSymbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ruleNames<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\tsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">toDemical</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\tsb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ruleNames<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ruleNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"CONST[orange]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INT[orange]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"VOID[orange]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IF[orange]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ELSE[orange]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WHILE[orange]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BREAK[orange]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CONTINUE[orange]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RETURN[orange]\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"PLUS[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MINUS[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MUL[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DIV[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MOD[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ASSIGN[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"EQ[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NEQ[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LT[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GT[blue]\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"LE[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GE[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"AND[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OR[blue]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IDENT[red]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"INTEGER_CONST[green]\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>visitChildren 是当 dfs 遍历每个语法节点时都会触发的方法，一开始没有想到在遍历某个节点时如何得到该节点的深度，后面通过维护一个全局变量 depth 来实现。当进入节点前 depth 会 + 1 退出时会 - 1。</p>\n<p><img data-src=\"image-20230328210917158.png\" alt=\"image-20230328210917158\"></p>\n<p>这里简单的把 accept 方法理解为会调用 visitor.visitChildren (currentnode) 的函数就好了。</p>\n",
            "tags": [
                "编译原理"
            ]
        },
        {
            "id": "http://example.com/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/",
            "title": "编译原理01-词法分析",
            "date_published": "2023-03-09T02:58:10.000Z",
            "content_html": "<h1 id=\"编译原理01-词法分析\"><a class=\"anchor\" href=\"#编译原理01-词法分析\">#</a> 编译原理 01 - 词法分析</h1>\n<p>词法分析： 输入（程序文本 / 字符串 s）--&gt; 输出（词法单元流）</p>\n<p><span id=\"more\"></span></p>\n<p><img data-src=\"image-20230309110603730.png\" alt=\"image-20230309110603730\"></p>\n<h2 id=\"词法分析器的三种设计方法由易到难\"><a class=\"anchor\" href=\"#词法分析器的三种设计方法由易到难\">#</a> 词法分析器的三种设计方法（由易到难）</h2>\n<ol>\n<li>词法分析器生成器（如 ANTLR）</li>\n<li>手写词法分析器</li>\n<li>自动化词法分析器 (自己实现一个词法分析器生成器)</li>\n</ol>\n<p>生产环境下的编译器（如 gcc）通常选择手写词法分析器</p>\n<h2 id=\"antrl的使用\"><a class=\"anchor\" href=\"#antrl的使用\">#</a> antrl 的使用</h2>\n<p>输入： 词法单元的规约 -<strong>SimpleExpr.g4</strong></p>\n<p>输出：词法分析器 -  <strong>SimpleExprLexer.java</strong></p>\n<p>​\t\t\t\tSimpleExprLexer.java 编译后 接受输入文件 并输出 token 流</p>\n<h2 id=\"g4文件的结构\"><a class=\"anchor\" href=\"#g4文件的结构\">#</a> .g4 文件的结构</h2>\n<p>第一行： <code>grammar SimpleExpr ;</code>  给接下来的文法起个名字 名字要与文件名一致</p>\n<p>​\t\t\t\t\t** 如果文件里只包含词法部分 用 lexer grammar SysYLexer **</p>\n<p>​\t\t\t\t\t 每一行都要以分号结尾</p>\n<p>@header {} 括号里的东西会自动拷贝到到 java 文件中</p>\n<p>语法规则见下面示例</p>\n<p>SimpleExpr.g4:</p>\n<pre><code class=\"language-Antlr\">grammar SimpleExpr;\n\nimport SimpleExprRules;\n\n@header&#123;\npackage simpleexpr;\n&#125;\n\nprog : stat* EOF ;\n\nstat : expr ';'\n     | ID '=' expr ';'\n     | 'if' expr ';'\n     ;\n\nexpr : expr ('*' | '/') expr\n     | expr ('+' | '-') expr\n     | '(' expr ')'\n     | ID\n     | INT\n     | FLOAT\n     ;\n    // 到这里描述的其实还是语法结构\n</code></pre>\n<p>SimpleExprRules.g4:</p>\n<pre><code class=\"language-Antlr\">lexer grammar SimpleExprRules;\n\nSEMI : ';' ;\nASSIGN : '=' ;\nIF : 'if' ;\nMUL : '*' ;\nDIV : '/' ;\nADD : '+' ;\nSUB : '-' ;\nLPAREN : '(' ;\nRPAREN : ')' ;\n\nID : (LETTER | '_') WORD* ;\nINT : '0' | ([1-9] DIGIT*) ;\nFLOAT : INT '.' DIGIT*\n      | '.' DIGIT+\n      ;\n\nWS : [ \\t\\r\\n]+ -&gt; skip ;\n\n//SL_COMMENT : '//' .*? '\\n' -&gt; skip ;\nSL_COMMENT2 : '//' ~[\\n]* '\\n' -&gt; skip;\nDOC_COMMENT : '/**' .*? '*/' -&gt; skip ;\nML_COMMENT : '/*' .*? '*/' -&gt; skip ;\n\nfragment LETTER : [a-zA-Z] ;\nfragment DIGIT : [0-9] ;\nfragment WORD : LETTER | DIGIT | '_' ;\n//以上才是真正的词法部分\n\n</code></pre>\n<h2 id=\"用编程方式使用antlr-4-生成的xxxlexerjava\"><a class=\"anchor\" href=\"#用编程方式使用antlr-4-生成的xxxlexerjava\">#</a> 用编程方式使用 ANTLR 4 生成的 xxxlexer.java</h2>\n<pre><code>package simpleexpr;\n\nimport org.antlr.v4.runtime.CharStream;\nimport org.antlr.v4.runtime.CharStreams;\nimport org.antlr.v4.runtime.CommonTokenStream;\nimport org.antlr.v4.runtime.Token;\nimport org.antlr.v4.runtime.tree.ParseTree;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class SimpleExprTest &#123;\n  public static void main(String[] args) throws IOException &#123;\n    System.out.println(&quot;SimpleExprTest ...&quot;);\n\n    InputStream is = System.in;\n\n    String file;\n    if (args.length &gt; 0) &#123;\n      file = args[0];\n      is = new FileInputStream(file);\n    &#125;\n\n    CharStream input = CharStreams.fromStream(is);\n    //SimpleExprLexer 是.g4文件生成的java类 input必须是CharStream格式\n    SimpleExprLexer lexer = new SimpleExprLexer(input);\n\t\n    lexer.getAllTokens().forEach(System.out::println);\n  &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h2>\n<p>基本的知识就不记录了 记录一些重要的</p>\n<ul>\n<li>非贪婪匹配  <code>,*?</code></li>\n<li>反向引用 要引用的用（）括起来，后面引用通过子表达式下标访问，如 \\1，下标从 1 开始</li>\n<li>look ahead ?&lt;= 符号，表示前面字符要满足 xxx，但不匹配 xxx</li>\n<li>look back  ?= 符号，表示后面字符要满足 xxx，但不匹配 xxx</li>\n</ul>\n<h2 id=\"nfa与dfa\"><a class=\"anchor\" href=\"#nfa与dfa\">#</a> NFA 与 DFA</h2>\n<p>NFA：非确定性自动机  DFA: 确定性有穷自动机（Deterministic Finite Automaton)</p>\n<p><img data-src=\"image-20230320200945838.png\" alt=\"image-20230320200945838\"></p>\n<p>区别：</p>\n<ul>\n<li>NFA 简洁易于理解，便于描述语言 L (A)</li>\n<li>DFA 易于判断 x 属于 L (A)，适合产生词法分析器</li>\n</ul>\n<p>​    其中 L (A) 是使当前自动机能进入接受状态的输入集合</p>\n<p>一般用 NFA 描述语言，用 DFA 实现词法分析器</p>\n<p><strong>实现词法分析器的步骤：RE --&gt; NFA --&gt; DFA --&gt; 词法分析器</strong></p>\n<p>如图： 根据 DFA 生成 RE 不需要掌握</p>\n<p><img data-src=\"image-20230320201739378.png\" alt=\"image-20230320201739378\"></p>\n<h2 id=\"thompson构造法从re-到-nfa\"><a class=\"anchor\" href=\"#thompson构造法从re-到-nfa\">#</a> Thompson 构造法（从 RE 到 NFA）</h2>\n<p><img data-src=\"image-20230315141912075.png\" alt=\"image-20230315141912075\"></p>\n<p>构造方法如下：</p>\n<p><img data-src=\"image-20230320203523098.png\" alt=\"image-20230320203523098\"></p>\n<p><img data-src=\"image-20230320203542881.png\" alt=\"image-20230320203542881\"></p>\n<p><img data-src=\"image-20230320203600728.png\" alt=\"image-20230320203600728\"></p>\n<p><img data-src=\"image-20230320203629409.png\" alt=\"image-20230320203629409\"></p>\n<p><img data-src=\"image-20230320203705399.png\" alt=\"image-20230320203705399\"></p>\n<p><img data-src=\"image-20230320203721076.png\" alt=\"image-20230320203721076\"></p>\n<p><img data-src=\"image-20230315142444609.png\" alt=\"image-20230315142444609\"></p>\n<p>举个例子：(a|b)*abb 的构造（考试会考）</p>\n<p><img data-src=\"image-20230315142551213.png\" alt=\"image-20230315142551213\"></p>\n<h2 id=\"从nfa到dfa的转换\"><a class=\"anchor\" href=\"#从nfa到dfa的转换\">#</a> 从 NFA 到 DFA 的转换：</h2>\n<p><img data-src=\"image-20230315142711571.png\" alt=\"image-20230315142711571\"></p>\n<p>规则如下 其中 s 是单个状态 T 是一个状态子集</p>\n<p>这个过程一定会有一个终点</p>\n<p><img data-src=\"image-20230315143847385.png\" alt=\"image-20230315143847385\"></p>\n<p>符号化的表示：</p>\n<p><img data-src=\"image-20230315143949988.png\" alt=\"image-20230315143949988\"></p>\n<p><strong>复杂度：NFA 有 n 个状态 DFA 最多有 2 的 n 次方个状态 指数爆炸</strong></p>\n<h2 id=\"dfa最小化算法\"><a class=\"anchor\" href=\"#dfa最小化算法\">#</a> DFA 最小化算法</h2>\n<p>问题一： 如何定义等价状态</p>\n<p>想法一： 其中波浪号意为等价</p>\n<p>​\t\t\t\t\t即 s 状态等价与 t 状态 当且仅当 任意 a 属于字母表 s 与 t 在 a 输入下发生转移后的状态是等价的</p>\n<p><img data-src=\"image-20230320210948252.png\" alt=\"image-20230320210948252\"></p>\n<p>但是这个定义是错误的 课件上有反例</p>\n<p>反过来是正确做法：</p>\n<p>核心思想<strong>做划分而非合并</strong></p>\n<p>接受状态与非接受状态必定不等价 ，然后接着划分，知道不能再分为止。每一步做迭代 对一个状态集合的任意两个状态，如果在字符 a 的驱动下跑到了不同的组，则这两个状态一定不等价。</p>\n<p>做之前要补齐死状态。</p>\n<h3 id=\"复杂度\"><a class=\"anchor\" href=\"#复杂度\">#</a> 复杂度</h3>\n<p>太复杂了</p>\n<h2 id=\"从dfa得到词法分析器\"><a class=\"anchor\" href=\"#从dfa得到词法分析器\">#</a> 从 DFA 得到词法分析器</h2>\n<p>需要消除死状态 ，避免徒劳消耗输入流</p>\n<p>模拟运行该 DFA, 直到无法继续为止（输入结束或状态无转移）：假设此时状态为 s，若 s 为接受状态，则识别成功，否则，回溯（包括状态与输入流）至最近一次经过的接受状态，识别成功；若没有经过任何接受状态，则报错（忽略第一个字符，重新开始）</p>\n<p>用在词法分析器场景下的 DFA 的最小化第一步不同，所有的接受状态一定不等价</p>\n<h2 id=\"根据dfa得到re非重点\"><a class=\"anchor\" href=\"#根据dfa得到re非重点\">#</a> 根据 DFA 得到 RE (非重点)</h2>\n<h2 id=\"lab-1\"><a class=\"anchor\" href=\"#lab-1\">#</a> lab 1</h2>\n<p>编程一小时 配置环境一天的典型代表。</p>\n<p>从 lab1 知道了以后应该恶补 ssh 远程连接 linux 命令行 makefile .gitignore 导入依赖 java 基本语法 IDEA 的使用......</p>\n<h3 id=\"实验输入\"><a class=\"anchor\" href=\"#实验输入\">#</a> 实验输入</h3>\n<p>本次实验的输入是一个包含了 <code>SysY</code>  源代码的文件，你的程序需要接受一个文件名作为参数</p>\n<h3 id=\"实验内容\"><a class=\"anchor\" href=\"#实验内容\">#</a> 实验内容</h3>\n<h3 id=\"part1-词法分析\"><a class=\"anchor\" href=\"#part1-词法分析\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD1wYXJ0MS0lRTglQUYlOEQlRTYlQjMlOTUlRTUlODglODYlRTYlOUUlOTA=\">Part1 词法分析</span></h3>\n<ul>\n<li>本次实验你需要完成一个词法分析器对使用 SysY 语言书写的源代码进行词法分析，要求如下\n<ul>\n<li>本次实验要求通过<strong>标准错误输出（stderr, 如 System.err 等）</strong>， 打印程序的 <strong>所有</strong> 运行结果。</li>\n<li>当<strong>包含词法错误时</strong>：对于包含词法错误的文件，你需要打印<strong>所有</strong>错误信息，格式为： <code>Error type A at Line [lineNo]:[errorMessage]</code> ，其中 <code>lineNo</code>  为出错的 <code>token</code>  首个字符所在行的行号， <code>errorMessage</code>  可自行定义，本实验不做要求，只要冒号前的信息正确即可。</li>\n<li>当<strong>不包含词法错误时</strong>：对于没有任何词法错误的文件，你需要打印所有识别到的 <code>Tokens</code>  信息，具体输出格式可以参见<strong>样例一</strong>。特别要求：输出时忽略所有注释，对十六进制和八进制数字常量输出 <code>token</code>  文本时需输出其十进制的值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"样例\"><a class=\"anchor\" href=\"#样例\">#</a> 样例</h3>\n<p>输入</p>\n<pre><code class=\"language-SysY\">int main() \n&#123;\n   // line comment\n   /* \n     block comment\n   */\n   int i = 0x1;\n&#125;\n</code></pre>\n<p>输出</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">INT</span> <span class=\"token keyword\">int</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token constant\">IDENT</span> main at <span class=\"token class-name\">Line</span> <span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">L_PAREN</span> <span class=\"token punctuation\">(</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">R_PAREN</span> <span class=\"token punctuation\">)</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">1.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">L_BRACE</span> <span class=\"token punctuation\">&#123;</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">2.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">INT</span> <span class=\"token keyword\">int</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">IDENT</span> i at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">ASSIGN</span> <span class=\"token operator\">=</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token constant\">INTEGER_CONST</span> <span class=\"token number\">1</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token constant\">SEMICOLON</span> <span class=\"token punctuation\">;</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">7.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token constant\">R_BRACE</span> <span class=\"token punctuation\">&#125;</span> at <span class=\"token class-name\">Line</span> <span class=\"token number\">8.</span></pre></td></tr></table></figure><p>解释：</p>\n<p>每行输出一个 token 的信息，输出格式为</p>\n<pre><code>[token类型] [token文本] at Line [此token首个字符所在行的行号].复制到剪贴板复制失败复制成功!\n</code></pre>\n<p><strong>输出时忽略所有注释，对十六进制和八进制数字常量输出 token 文本时需输出其十进制的值</strong></p>\n<p>特别注意，遇到如 <code>int 2i = 08;</code>  这种输入时，请将 <code>2i</code>  识别为 <code>INTEGER_CONST</code>  和 <code>IDENT</code> ， <code>08</code>  识别为两个 <code>INTEGER_CONST</code> ，这种我们不认为是词法错误，这种错误将在后面的实验中处理</p>\n<h3 id=\"样例二\"><a class=\"anchor\" href=\"#样例二\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD0lRTYlQTAlQjclRTQlQkUlOEIlRTQlQkElOEM=\">样例二</span></h3>\n<p>输入:</p>\n<pre><code class=\"language-SysY\">int main()&#123;\n  int i = 1;\n  int j = ~i;\n&#125;复制到剪贴板复制失败复制成功!\n</code></pre>\n<p>输出：</p>\n<pre><code>Error type A at Line 3: Mysterious character &quot;~&quot;.\n</code></pre>\n<h2 id=\"实验过程\"><a class=\"anchor\" href=\"#实验过程\">#</a> 实验过程</h2>\n<ul>\n<li>\n<p>第一个难题就是怎么在 windows 里的 IDEA 编程，但是运行和调试环境是虚拟机中的 ubuntu20.04+lab0 配置好的环境 想法就是用 IDEA 的 remote deployment 功能，在网上搜索教程后发现我的 IDEA 竟然没有这个功能，原因是我的是 community 版本，所以卸载了之前的 IDEA 装了专业版。然后 remote deployment 原理应该是使用 ssh 连接，虽然虚拟机是装在电脑里，但其实和与远程服务器相连原理是一样的。</p>\n</li>\n<li>\n<p>然后编写.g4 文件比较顺利，生成了 SysYlexer.java 文件，但是在 main 函数中使用 SysYlexer 类也遇见了困难，首先是导入 antlr，IDEA 一直报错无法解析 symbol antlr，但是 lab0 中我应该是配好了 antlr 环境的，不知道为什么，所以还是用 IDEA 的 libraries 中导入了 antlr 才好</p>\n</li>\n<li>\n<p>第三个难题就是删除 SysYLexer 中自带的 ErrorListeners, 使用自己编写的 errorlisteners，这里老师上课应该是没有讲的，所以也是无从下手。后面借助搜索引擎和 ChatGPT 学了很久才会。原理很简单，先放上自己实现的 myErrorListener 如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> myErrorListener <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseErrorListener</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syntaxError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Recognizer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> recognizer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">Object</span> offendingSymbol<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> charPositionInLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">RecognitionException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error type A at Line \"</span><span class=\"token operator\">+</span>line<span class=\"token operator\">+</span><span class=\"token string\">\": \"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\terror <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主要是重写了 syntaxError 这个函数，他里面的参数应该是报错相关的信息，这里只用到了 line（出错的行）和 msg（具体的报错信息），其它的是什么意思忘记了。应该是每出现一个错误就会调用一次 syntaxError 函数。</p>\n</li>\n<li>\n<p>然后放一下 main 函数部分：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>antlr<span class=\"token punctuation\">.</span>v4<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> error <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input path is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> source <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">CharStream</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">CharStreams</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromFileName</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">SysYLexer</span> sysYLexer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SysYLexer</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tsysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">removeErrorListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tsysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">addErrorListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">myErrorListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">></span></span> tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> sysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">getAllTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rulenames <span class=\"token operator\">=</span> sysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">getRuleNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span> token <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> tokenType <span class=\"token operator\">=</span> rulenames<span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> tokenText <span class=\"token operator\">=</span> <span class=\"token function\">toDemical</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> tokenLine <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">+</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>tokenType <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> tokenText <span class=\"token operator\">+</span> <span class=\"token string\">\" at Line \"</span><span class=\"token operator\">+</span>tokenLine<span class=\"token operator\">+</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> myErrorListener <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseErrorListener</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syntaxError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Recognizer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> recognizer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">Object</span> offendingSymbol<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> charPositionInLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token class-name\">RecognitionException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error type A at Line \"</span><span class=\"token operator\">+</span>line<span class=\"token operator\">+</span><span class=\"token string\">\": \"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\terror <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toDemical</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0[0-7]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0[xX][0-9a-fA-F]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>反正做的时候除了文档里给的框架几乎每一行都想了很久。</p>\n</li>\n<li>\n<p>代码写完后上传又有问题，可能是之前 make compile , make clean 太多次了，导致压缩包超过了 10M 的限制，后来参考助教给的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xNzA4\">记一次删除 Git 记录中的大文件的过程 - HollisChuang's Blog</span> 按里面的步骤一步步做才完成上传，比较幸运的是一次就 AC 了。（至于为什么压缩包会那么大，我的理解是改动了太多次代码 make compile 了太多次，且每次 git 都会保存版本信息以便于回退，所以改动的所有版本其实都还在 git 保存的隐藏文件夹下的，所以整个目录就会变得很大了）</p>\n</li>\n</ul>\n",
            "tags": [
                "编译原理"
            ]
        }
    ]
}