<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>MikeMao&#39;s blog • Posts by &#34;编译原理&#34; tag</title>
    <link href="http://example.com" />
    <updated>2023-06-02T06:38:27.000Z</updated>
    <category term="C++" />
    <category term="git" />
    <category term="Linux" />
    <category term="Maven" />
    <category term="STL C++" />
    <category term="python 爬虫 计算机网络" />
    <category term="python 爬虫" />
    <category term="python" />
    <category term="爬虫" />
    <category term="TVM 深度学习 机器学习 编译" />
    <category term="编译原理" />
    <category term="docker" />
    <entry>
        <id>http://example.com/2023/06/02/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8605-%E7%9B%AE%E6%A0%87%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</id>
        <title>编译原理05-目标代码生成</title>
        <link rel="alternate" href="http://example.com/2023/06/02/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8605-%E7%9B%AE%E6%A0%87%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
        <content type="html">&lt;h1 id=&#34;编译原理05-目标代码生成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译原理05-目标代码生成&#34;&gt;#&lt;/a&gt; 编译原理 05 - 目标代码生成&lt;/h1&gt;
&lt;h2 id=&#34;risc-v指令集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#risc-v指令集&#34;&gt;#&lt;/a&gt; RISC-V 指令集&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230602144012905.png&#34; alt=&#34;image-20230602144012905&#34;&gt;&lt;/p&gt;
&lt;p&gt;精简指令集，精简的含义就是一条指令要么做运算，要么存，取内存。&lt;/p&gt;
&lt;h3 id=&#34;寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#寄存器&#34;&gt;#&lt;/a&gt; 寄存器&lt;/h3&gt;
&lt;p&gt;RISC-V 有 32 个寄存器，名称分别为 X0,X1...X31&lt;/p&gt;
&lt;p&gt;但实际上不会按这些名称来使用，而是按照约定来使用，一些寄存器有专门的用途&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230602150421869.png&#34; alt=&#34;image-20230602150421869&#34;&gt;&lt;/p&gt;
&lt;p&gt;X0： zero 寄存器，专门存放数字 0&lt;/p&gt;
&lt;p&gt;ra： 存放 return address&lt;/p&gt;
&lt;p&gt;pc(X31): program counter&lt;/p&gt;
&lt;h3 id=&#34;指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令&#34;&gt;#&lt;/a&gt; 指令&lt;/h3&gt;
&lt;p&gt;li ： 加载立即数	li t0,0&lt;/p&gt;
&lt;p&gt;add: 加法，有三个操作数： add t5,t3,t4 , t5 = t3+t4&lt;/p&gt;
&lt;p&gt;addi： 加法，但有一个操作数是立即数&lt;/p&gt;
&lt;p&gt;risc-v 里没有 mov 指令，或者说 mov 指令是一个伪指令，实际上是用 add， target, source, zero 来实现的&lt;/p&gt;
&lt;p&gt;在.data 段声明全局变量：&lt;/p&gt;
&lt;p&gt;.data:&lt;/p&gt;
&lt;p&gt;g:  .word 0	想.word 这样的是给汇编器看的，表示占用 4B&lt;/p&gt;
&lt;p&gt;数组：&lt;/p&gt;
&lt;p&gt;g: .word 0,1,2&lt;/p&gt;
&lt;p&gt;字符串：&lt;/p&gt;
&lt;p&gt;msg: .string &amp;quot;The result is :&amp;quot; #后面会自动加上 &#39;\0&#39; 不想加就用.ascii&lt;/p&gt;
&lt;p&gt;使用全局变量：&lt;/p&gt;
&lt;p&gt;la t0, g  	#la; load address&lt;/p&gt;
&lt;p&gt;lw t0, 0 (t0)	#lw: load word 这里 0 表示偏移量 并且以字节为单位&lt;/p&gt;
</content>
        <category term="编译原理" />
        <updated>2023-06-02T06:38:27.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/05/05/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8604-%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</id>
        <title>编译原理04-中间代码生成</title>
        <link rel="alternate" href="http://example.com/2023/05/05/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8604-%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
        <content type="html">&lt;h1 id=&#34;编译原理04-中间代码生成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译原理04-中间代码生成&#34;&gt;#&lt;/a&gt; 编译原理 04 - 中间代码生成&lt;/h1&gt;
&lt;h2 id=&#34;llvm-ir简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#llvm-ir简介&#34;&gt;#&lt;/a&gt; LLVM IR 简介&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230505140807839.png&#34; alt=&#34;image-20230505140807839&#34;&gt;&lt;/p&gt;
&lt;p&gt;LLVM 这个项目与最初的名字含义已经完全不同了，可以将 LLVM 理解为全称。目前 LLVM 是开发新的编译器的&lt;strong&gt;基础&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230505141735207.png&#34; alt=&#34;image-20230505141735207&#34;&gt;&lt;/p&gt;
&lt;p&gt;前端经过语法分析，词法分析，生成 IR&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“IR 设计的优秀与否决定着整个编译器的好坏”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230505141928962.png&#34; alt=&#34;image-20230505141928962&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个.c 文件对应生成一个.ll 文件。Module 实际上就是一个文件 file, Module 里有多个函数，一个函数具有多个&lt;strong&gt;基本块 (Basic Block)&lt;/strong&gt;, 每一个基本块都由多个指令构成。&lt;/p&gt;
&lt;p&gt;使用 clang &lt;strong&gt;-S -emit-llvm&lt;/strong&gt; factorial0.c -o f0-opt0.ll 表示用 clang 生成到 llvm 中间代码阶段停止。&lt;/p&gt;
&lt;p&gt;中间代码示例：&lt;br&gt;
&lt;img data-src=&#34;image-20230505143323681.png&#34; alt=&#34;image-20230505143323681&#34;&gt;&lt;/p&gt;
&lt;p&gt;像 %3 %4 这样的是分配一个虚拟寄存器， alloca 表示内存分配， align 表示内存对齐&lt;/p&gt;
&lt;p&gt;&lt;code&gt;store i32 0, i32* %3&lt;/code&gt;  表示把 0 存到 %3 寄存器中&lt;/p&gt;
&lt;p&gt;call 一行表示函数调用&lt;/p&gt;
&lt;p&gt;下一行表示结果与 7 相乘， nsw 表示 no signed wrap&lt;/p&gt;
&lt;p&gt;zext: zero - extension 将一 bit 的 %8 扩展为 32 位&lt;/p&gt;
&lt;p&gt;%2 哪去了？ 被分配为 entry 基本块的名称&lt;/p&gt;
&lt;p&gt;限制：任何一个变量都只能一次赋值， 好处是使用变量时明确知道在什么时候定义过的。&lt;/p&gt;
&lt;h2 id=&#34;控制流图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制流图&#34;&gt;#&lt;/a&gt; 控制流图&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230505150416543.png&#34; alt=&#34;image-20230505150416543&#34;&gt;&lt;/p&gt;
&lt;p&gt;控制流图的定义：&lt;br&gt;
&lt;img data-src=&#34;image-20230505150719324.png&#34; alt=&#34;image-20230505150719324&#34;&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;br&gt;
&lt;img data-src=&#34;image-20230505151157414.png&#34; alt=&#34;image-20230505151157414&#34;&gt;&lt;/p&gt;
&lt;p&gt;中间代码的数据流图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230505151318630.png&#34; alt=&#34;image-20230505151318630&#34;&gt;&lt;/p&gt;
&lt;p&gt;问题：%6 和 %7 基本块中要约定好把想 ret 的结果放在某一个寄存器中&lt;/p&gt;
&lt;p&gt;开了 o1 优化后：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230505152003795.png&#34; alt=&#34;image-20230505152003795&#34;&gt;&lt;/p&gt;
&lt;p&gt;o1 优化会去掉所有的内存分配，store load 指令。&lt;/p&gt;
&lt;p&gt;phi 指令 根据从哪个块跳转出来决定赋值给 %8 寄存器的值&lt;/p&gt;
&lt;p&gt;然而 phi 指令只是为了简化中间代码的大小产生的，是一个虚拟指令，实际上仍然可能会使用基本方案。&lt;/p&gt;
&lt;h2 id=&#34;llvm-java-api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#llvm-java-api&#34;&gt;#&lt;/a&gt; LLVM JAVA API&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506141752865.png&#34; alt=&#34;image-20230506141752865&#34;&gt;&lt;/p&gt;
&lt;p&gt;在配置文件中加依赖&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506142227366.png&#34; alt=&#34;image-20230506142227366&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以参照 LLVM 官方的教程，c++ 语言如何翻译为中间代码。&lt;/p&gt;
&lt;h2 id=&#34;中间代码翻译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中间代码翻译&#34;&gt;#&lt;/a&gt; 中间代码翻译&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506143047512.png&#34; alt=&#34;image-20230506143047512&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里的 || 符号是 then 的意思，不是或者。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506144459580.png&#34; alt=&#34;image-20230506144459580&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506144737646.png&#34; alt=&#34;image-20230506144737646&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506145121379.png&#34; alt=&#34;image-20230506145121379&#34;&gt;&lt;/p&gt;
&lt;p&gt;例子： int a [2] [3]; c + a [i] [j];&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506150834033.png&#34; alt=&#34;image-20230506150834033&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 llvm IR 中：会用 getelementptr（GEP）指令处理数组引用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506151202417.png&#34; alt=&#34;image-20230506151202417&#34;&gt;&lt;/p&gt;
&lt;p&gt;GEP 指令有四个参数，其中第四个参数不限个数，可以有多个 index。&lt;/p&gt;
&lt;p&gt;第一个 index 比较特殊，表示 base-type 的一个元素的大小，用于 a++ 这样的操作，后面的 index 才用于进入数组获取元素，即没多一个 index 脱掉一层中括号。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506151901102.png&#34; alt=&#34;image-20230506151901102&#34;&gt;&lt;/p&gt;
&lt;p&gt;GEP provides a way to access arrays and manipulate pointers.&lt;/p&gt;
&lt;p&gt;GEP abstract away details like size of types.&lt;/p&gt;
&lt;p&gt;有了 GEP 指令后就不用像上面那样递归的计算偏移量了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230506154154393.png&#34; alt=&#34;image-20230506154154393&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;控制流语句的翻译&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#控制流语句的翻译&#34;&gt;#&lt;/a&gt; 控制流语句的翻译&lt;/h3&gt;
&lt;p&gt;简单的思路会带来冗余的代码&lt;/p&gt;
&lt;p&gt;要生成简短高效的代码，就需要&lt;strong&gt;创造困难&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单 mode：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230510141125754.png&#34; alt=&#34;image-20230510141125754&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 B 的值保存到临时变量 t1 中，翻译 if 语句时用 br 语句测试 t1 的值并根据情况跳转到两个基本块中。&lt;/p&gt;
&lt;p&gt;以 Control 语言为例：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230510142838861.png&#34; alt=&#34;image-20230510142838861&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择实现方式的范围： Listeners, Visitors, Attributed Grammar&lt;/p&gt;
&lt;p&gt;前两种方法能做到的 属性方法都能做到，但是属性文法本身比较困难，所以在前两种中方法中选择。&lt;/p&gt;
&lt;p&gt;Listener 模式有一个问题： 比如 B -&amp;gt; B1 || B2 的翻译：&lt;/p&gt;
&lt;p&gt;要在 exitB () 方法拼接 B1.code 和 B2.code 。但是考虑出现了短路求值的问题时，由于在 exitB 的时候 B1 和 B2 的代码都生成好了，因此要在拼接 B1.code 和 B2.code 中间插入判断短路求值的代码，不能及时输出生成的中间代码，不能避免频繁的字符串拼接操作。简要来说，访问完 B1，将中间代码保存下来，才能进行接下来的操作，不能在访问 B1 和访问 B2 中间插入一些操作，这是 Listener 模式的缺陷。&lt;/p&gt;
&lt;p&gt;具体代码见代码仓库&lt;em&gt; 2023-compilers-coding-0/src/main/java/codegen/CodeGenVisitor.java&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;true 和 false 的翻译：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230510144428568.png&#34; alt=&#34;image-20230510144428568&#34;&gt;&lt;/p&gt;
&lt;p&gt;AND 语句：&lt;/p&gt;
&lt;p&gt;有一个小错误 String temp = getNewTemp () 要放在 emitLabel (trueLabel) 之上。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230510151933288.png&#34; alt=&#34;image-20230510151933288&#34;&gt;&lt;/p&gt;
&lt;p&gt;if 语句：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230510151955477.png&#34; alt=&#34;image-20230510151955477&#34;&gt;&lt;/p&gt;
&lt;p&gt;while 语句：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230510152502018.png&#34; alt=&#34;image-20230510152502018&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个问题：break 语句怎么翻译，多层嵌套的循环语句怎么办&lt;/p&gt;
&lt;p&gt;解决方法：使用一个栈，保存 break 语句要跳转到的地方。，参照 while 语句中的压栈出栈语句。&lt;/p&gt;
&lt;p&gt;短路求值问题： 参照 And 中的实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复杂 mode&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230510154721641.png&#34; alt=&#34;image-20230510154721641&#34;&gt;&lt;/p&gt;
&lt;p&gt;为什么让事情变得更复杂：&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517140632912.png&#34; alt=&#34;image-20230517140632912&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果使用简单方案，将会生成 12 行中间代码，然而实际上这是一个死循环&lt;/p&gt;
&lt;p&gt;解决方案：利用继承属性让布尔表达式知道要跳转到哪&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517141735294.png&#34; alt=&#34;image-20230517141735294&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;需要的继承属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#需要的继承属性&#34;&gt;#&lt;/a&gt; 需要的继承属性&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517142425226.png&#34; alt=&#34;image-20230517142425226&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;if语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if语句&#34;&gt;#&lt;/a&gt; if 语句&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517142712190.png&#34; alt=&#34;image-20230517142712190&#34;&gt;&lt;/p&gt;
&lt;p&gt;S.next 是之前准备好的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517143447956.png&#34; alt=&#34;image-20230517143447956&#34;&gt;&lt;/p&gt;
&lt;p&gt;bool 表达式直接翻译成 goto 语句&lt;/p&gt;
&lt;h3 id=&#34;if-else-语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if-else-语句&#34;&gt;#&lt;/a&gt; if else 语句&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517144609460.png&#34; alt=&#34;image-20230517144609460&#34;&gt;&lt;/p&gt;
&lt;p&gt;eg：&lt;img data-src=&#34;image-20230517144946527.png&#34; alt=&#34;image-20230517144946527&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;while语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while语句&#34;&gt;#&lt;/a&gt; while 语句&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517150821390.png&#34; alt=&#34;image-20230517150821390&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;顺序语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序语句&#34;&gt;#&lt;/a&gt; 顺序语句：&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517152329272.png&#34; alt=&#34;image-20230517152329272&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;短路求值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#短路求值&#34;&gt;#&lt;/a&gt; 短路求值&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517153441075.png&#34; alt=&#34;image-20230517153441075&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230517153732513.png&#34; alt=&#34;image-20230517153732513&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;地址回填技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#地址回填技术&#34;&gt;#&lt;/a&gt; 地址回填技术&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519140559966.png&#34; alt=&#34;image-20230519140559966&#34;&gt;&lt;/p&gt;
&lt;p&gt;java 字节码中不使用符号化的标签作为跳转目标，而采用直接的地址值作为跳转目标。&lt;/p&gt;
&lt;p&gt;问题：往回跳简单，往前跳不知道跳转的地址，如何一趟扫描中就知道跳转目标的真实地址？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519141028791.png&#34; alt=&#34;image-20230519141028791&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519141358466.png&#34; alt=&#34;image-20230519141358466&#34;&gt;&lt;/p&gt;
&lt;p&gt;解决方案： B 在 goto 语句后面空着，交给父节点 S 来回填。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519141905148.png&#34; alt=&#34;image-20230519141905148&#34;&gt;&lt;/p&gt;
&lt;p&gt;从底向上看怎么使用地址回填技术：(每幅图的下半部分是之前的翻译方案)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519143110842.png&#34; alt=&#34;image-20230519143110842&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519143543907.png&#34; alt=&#34;image-20230519143543907&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519143840206.png&#34; alt=&#34;image-20230519143840206&#34;&gt;&lt;/p&gt;
&lt;p&gt;到这里已经可以确定一些跳转的地址了：&lt;/p&gt;
&lt;p&gt;M 是一个辅助的符号，用来确定 B2 第一个指令的地址的值是多少&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519144434026.png&#34; alt=&#34;image-20230519144434026&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519150121225.png&#34; alt=&#34;image-20230519150121225&#34;&gt;&lt;/p&gt;
&lt;p&gt;布尔表达式结束 到达更高层：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image-20230519151840965.png&#34; alt=&#34;image-20230519151840965&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519152628678.png&#34; alt=&#34;image-20230519152628678&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519153118656.png&#34; alt=&#34;image-20230519153118656&#34;&gt;&lt;/p&gt;
&lt;p&gt;顺序语句：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519153706714.png&#34; alt=&#34;image-20230519153706714&#34;&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230519154323985.png&#34; alt=&#34;image-20230519154323985&#34;&gt;&lt;/p&gt;
</content>
        <category term="编译原理" />
        <updated>2023-05-05T06:02:27.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/04/12/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8603-%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90/</id>
        <title>编译原理03-语义分析</title>
        <link rel="alternate" href="http://example.com/2023/04/12/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8603-%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;h1 id=&#34;语义分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语义分析&#34;&gt;#&lt;/a&gt; 语义分析&lt;/h1&gt;
&lt;h2 id=&#34;符号表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#符号表&#34;&gt;#&lt;/a&gt; 符号表&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412154717575.png&#34; alt=&#34;image-20230412154717575&#34;&gt;&lt;/p&gt;
&lt;p&gt;用符号表保存我们已经定义了的变量或者函数以及其相关信息，在遍历语法分析树时，如果发现当前新出现的某些单元与符号表中的信息有冲突，我们就可以发现语义错误。&lt;/p&gt;
&lt;h3 id=&#34;实现符号表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现符号表&#34;&gt;#&lt;/a&gt; 实现符号表&lt;/h3&gt;
&lt;p&gt;首先构建作用域树：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230419140503102.png&#34; alt=&#34;image-20230419140503102&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们在这里犯了一个小错误&lt;/strong&gt;，即把函数参数的作用域单独独立出来了，以便于我们编码，实际上函数参数作用域和函数作用域应该是要合并的。&lt;/p&gt;
&lt;p&gt;作用域的指针指向父作用域，在查找某个变量是在哪个作用域时要循环从当前作用域到父作用域遍历。&lt;/p&gt;
&lt;p&gt;之后可以通过递归遍历等方式进行语义相关的检查。&lt;/p&gt;
&lt;p&gt;某个利用 antlr4 实现符号表的类图：&lt;/p&gt;
&lt;p&gt;scope 是作用域（持有一个 Map (name, symbol) 的符号表数据类型），symbol 是符号 (持有 name 和 type，是符号表的基本单元)，type 是符号所持有的类型（比如基本类型，array), 通过遍历时&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230419141503552.png&#34; alt=&#34;image-20230419141503552&#34;&gt;&lt;/p&gt;
&lt;p&gt;浅绿框起来的是接口。&lt;/p&gt;
&lt;h2 id=&#34;属性文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性文法&#34;&gt;#&lt;/a&gt; 属性文法&lt;/h2&gt;
&lt;h3 id=&#34;为什么要引入属性文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么要引入属性文法&#34;&gt;#&lt;/a&gt; 为什么要引入属性文法&lt;/h3&gt;
&lt;p&gt;之前引入上下文无关文法的时候，是因为正则表达式无法表达 a&lt;sup&gt;nb&lt;/sup&gt;n 这样的表达式，但是上下文无关文法也有局限，&lt;strong&gt;无法帮助我们进行语义相关的检查&lt;/strong&gt;。于是引入 Knuth 发明的属性文法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421140916771.png&#34; alt=&#34;image-20230421140916771&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来以实现一个&lt;strong&gt;交互式&lt;/strong&gt;的简易计算器为例&lt;/p&gt;
&lt;p&gt;前几节课写的简易计算器采用的是 offline 的方法：&lt;br&gt;
&lt;img data-src=&#34;image-20230421141650214.png&#34; alt=&#34;image-20230421141650214&#34;&gt;&lt;/p&gt;
&lt;p&gt;本次将采用 online 的方式实现，即在构建语法分析树的过程中加入我们想实现的 action。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421142018201.png&#34; alt=&#34;image-20230421142018201&#34;&gt;&lt;/p&gt;
&lt;p&gt;之前实现计算器的时候遇到了一个问题，listener 模式下，访问某个节点的 enterXXX 与 exitXXX 方法没有返回值，而当前节点的 value 依赖于子节点 value 的值，当时采用了标注语法树的方法。&lt;/p&gt;
&lt;p&gt;antlr4 的另一个解决方案：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421143635663.png&#34; alt=&#34;image-20230421143635663&#34;&gt;&lt;/p&gt;
&lt;p&gt;在.g4 文件的 expr 定义后 加上 returns [int val] 后，在 antlr4 生成的 expr 对应的节点类中会附带一个 val 属性。&lt;/p&gt;
&lt;p&gt;每一行后大括号裹起来的黑体字是会在语法分析时我们加入的 java 代码，具体可在生成的 parser 类中查看。之后在 @package 中加入需要的头文件并在 @members 中加入 eval，memory 等的 java 实现。(实际上可在 @parser::members 中加入，这样在 lexer 中就不会生成这些无用的代码)&lt;/p&gt;
&lt;p&gt;像 expr 这种从子节点的 expr 值计算得到的属性，叫做综合属性。&lt;/p&gt;
&lt;p&gt;至于 “交互式” 的实现，主要是 main 函数的实现方式，参照代码仓库。&lt;/p&gt;
&lt;p&gt;第二个例子：类型声明文法：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421145230801.png&#34; alt=&#34;image-20230421145230801&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一条语义规则的问题：将 L 的类型赋值为 T 的类型，可是在递归调用的时候，L 并不知道 T 返回了一个类型是 float 还是 int。&lt;/p&gt;
&lt;p&gt;解决方法，给 L 一个 inh (inherit) 属性值，这种从左兄弟或者父节点继承来的值，叫做继承属性。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421151150679.png&#34; alt=&#34;image-20230421151150679&#34;&gt;&lt;/p&gt;
&lt;p&gt;antlr4 实现的语法：&lt;br&gt;
&lt;img data-src=&#34;image-20230421151912395.png&#34; alt=&#34;image-20230421151912395&#34;&gt;&lt;/p&gt;
&lt;p&gt;vars [String typeStr] 代表 vars 节点将携带一个属性 TypeStr。&lt;/p&gt;
&lt;h3 id=&#34;语法制导定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法制导定义&#34;&gt;#&lt;/a&gt; 语法制导定义&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421152800113.png&#34; alt=&#34;image-20230421152800113&#34;&gt;&lt;/p&gt;
&lt;p&gt;像上面的 g4 语法定义都属于 SDD，每个节点可以有多个属性&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421153313913.png&#34; alt=&#34;image-20230421153313913&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421153702902.png&#34; alt=&#34;image-20230421153702902&#34;&gt;&lt;/p&gt;
&lt;p&gt;继承属性用于在表达式中从左向右传递中间计算结果&lt;/p&gt;
&lt;p&gt;比如：累乘的右递归文法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421154158430.png&#34; alt=&#34;image-20230421154158430&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230421154959302.png&#34; alt=&#34;image-20230421154959302&#34;&gt;&lt;/p&gt;
&lt;p&gt;信息流向：先从左到右利用继承属性传递信息，再利用综合属性从下到上传递信息。&lt;/p&gt;
&lt;p&gt;属性文法的本质：信息的有序流动&lt;/p&gt;
&lt;h3 id=&#34;l属性定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#l属性定义&#34;&gt;#&lt;/a&gt; L 属性定义&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230426140830620.png&#34; alt=&#34;image-20230426140830620&#34;&gt;&lt;/p&gt;
&lt;p&gt;例子 1：&lt;/p&gt;
&lt;p&gt;用属性文法实现得到表达式的后缀表示形式&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230426141239902.png&#34; alt=&#34;image-20230426141239902&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230426141906728.png&#34; alt=&#34;image-20230426141906728&#34;&gt;&lt;/p&gt;
&lt;p&gt;例子 2：得到数组的类型表达式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比如 int [2] [3] -&amp;gt; (2,(3,int))&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230504101715454.png&#34; alt=&#34;image-20230504101715454&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230426142516412.png&#34; alt=&#34;image-20230426142516412&#34;&gt;&lt;/p&gt;
&lt;p&gt;antlr4 实现文法：&lt;br&gt;
&lt;img data-src=&#34;image-20230426143619377.png&#34; alt=&#34;image-20230426143619377&#34;&gt;&lt;/p&gt;
&lt;p&gt;例子 3：判断赋值号左右类型是否相等&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230426151226852.png&#34; alt=&#34;image-20230426151226852&#34;&gt;&lt;/p&gt;
&lt;p&gt;数组声明相关文法已经在例子 2 中完成了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230504121851839.png&#34; alt=&#34;image-20230504121851839&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体代码可在 github 代码仓库中查找。&lt;/p&gt;
&lt;p&gt;属性文法缺点：要在 antlr 中编写 java 代码，而且要完成编译器的话会需要很多代码，这些代码与 antlr 的文法混合在一起。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230426152847006.png&#34; alt=&#34;image-20230426152847006&#34;&gt;&lt;/p&gt;
&lt;p&gt;两种语义分析方法，各有优势。Offline 简单，Online 性能更高。&lt;/p&gt;
</content>
        <category term="编译原理" />
        <updated>2023-04-12T07:46:23.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/03/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8602-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</id>
        <title>编译原理02-语法分析</title>
        <link rel="alternate" href="http://example.com/2023/03/24/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8602-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;h1 id=&#34;编译原理02-语法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译原理02-语法分析&#34;&gt;#&lt;/a&gt; 编译原理 02 - 语法分析&lt;/h1&gt;
&lt;p&gt;主要内容：如何用 antlr4 生成一个语法分析器。手写语法分析器比较困难，不作要求。&lt;/p&gt;
&lt;p&gt;lesson1 任务： 用 cymbol 语言（龙书中提供的一种简化版 c 语言）写一段程序，并生成如下的函数调用关系图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230326120955042.png&#34; alt=&#34;image-20230326120955042&#34;&gt;&lt;/p&gt;
&lt;p&gt;lesson2 任务：写一个简单的计算器&lt;/p&gt;
&lt;p&gt;在为自己的语言编写语法分析器时，可能会遇到一些问题。&lt;/p&gt;
&lt;h2 id=&#34;问题一二义性文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题一二义性文法&#34;&gt;#&lt;/a&gt; 问题一：二义性文法&lt;/h2&gt;
&lt;p&gt;考虑下列定义：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324142546278.png&#34; alt=&#34;image-20230324142546278&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if a then if b then c else d&lt;/code&gt;  可以有两种解释&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324142701632.png&#34; alt=&#34;image-20230324142701632&#34;&gt;&lt;/p&gt;
&lt;p&gt;龙书上给的无二义性语法：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324143323221.png&#34; alt=&#34;image-20230324143323221&#34;&gt;&lt;/p&gt;
&lt;p&gt;难题是如何证明没有二义性（见龙书）&lt;/p&gt;
&lt;p&gt;在 antlr4 中，写在前面的定义如果能被匹配到，就会优先选择写在前面的定义，以防止歧义出现的错误。&lt;/p&gt;
&lt;h3 id=&#34;运算符的结合性带来的二义性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符的结合性带来的二义性&#34;&gt;#&lt;/a&gt; 运算符的结合性带来的二义性&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324143744282.png&#34; alt=&#34;image-20230324143744282&#34;&gt;&lt;/p&gt;
&lt;p&gt;没有规定是左结合还是右结合，可以有两种解释，导致结果不一样。&lt;/p&gt;
&lt;p&gt;antlr4 规定运算符默认是左结合的，以消除这种歧义。&lt;/p&gt;
&lt;p&gt;如何明确指明是右结合的（如乘方运算符要规定为右结合的）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324143947465.png&#34; alt=&#34;image-20230324143947465&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;运算符优先级带来的二义性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符优先级带来的二义性&#34;&gt;#&lt;/a&gt; 运算符优先级带来的二义性&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230324144400266.png&#34; alt=&#34;image-20230324144400266&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 antlr4 里，写在前面的运算符优先级更高。&lt;/p&gt;
&lt;p&gt;如果不是 antlr4，比如在某些比较古老的工具中，需要我们自己处理。&lt;/p&gt;
&lt;h2 id=&#34;如何根据代码生成函数调用图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何根据代码生成函数调用图&#34;&gt;#&lt;/a&gt; 如何根据代码生成函数调用图&lt;/h2&gt;
&lt;p&gt;先用 antlr4 生成语法分析树，然后用 dfs 方法遍历语法树。&lt;/p&gt;
&lt;h3 id=&#34;铺垫&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#铺垫&#34;&gt;#&lt;/a&gt; 铺垫&lt;/h3&gt;
&lt;p&gt;antlr4 提供了 listener, 在 antlr 帮我们遍历语法树时，当 antlr4 进入一类节点时，会触发 enter 节点事件，离开时会触发 exit 节点事件。&lt;/p&gt;
&lt;p&gt;问题：需要细分，比如函数调用和 赋值语句都是 expr，那么进入 expr 节点的时候都会触发 enterExpr 事件，不好针对特定情况处理。&lt;/p&gt;
&lt;p&gt;情况一：&lt;/p&gt;
&lt;p&gt;​	function call 和 赋值语句都是 expr，因此触发了 enterExpr 时间后也无法细分是哪类 expr。&lt;/p&gt;
&lt;p&gt;解决方法：在 g4 文件对应的定义后加上  &lt;code&gt;# fuctioncall&lt;/code&gt; , 要加的话后面的也要加上&lt;/p&gt;
&lt;p&gt;情况二： &lt;code&gt;expr (&#39;*&#39; |  &#39;/&#39;) expr&lt;/code&gt;  被定义为 MutiDiv, 则进入 MutiDiv 的时候不知道是还是除法。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt; expr (op = &#39;*&#39; | op = &#39;/&#39;) expr&lt;/code&gt;  进入时判断变量 op 的值是什么便可&lt;/p&gt;
&lt;h2 id=&#34;如何生成一个调用图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何生成一个调用图&#34;&gt;#&lt;/a&gt; 如何生成一个调用图&lt;/h2&gt;
&lt;p&gt;按 Graphviz 语法编写.dot 文件，会自动生成调用图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230326201151771.png&#34; alt=&#34;image-20230326201151771&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;实现一个简单的计算器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现一个简单的计算器&#34;&gt;#&lt;/a&gt; 实现一个简单的计算器&lt;/h2&gt;
&lt;h3 id=&#34;listener模式的一个弊端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#listener模式的一个弊端&#34;&gt;#&lt;/a&gt; listener 模式的一个弊端&lt;/h3&gt;
&lt;p&gt;antlr 提供的 listener 模式方法的返回值是 void，但是我们想实现一个计算器的话，在 dfs 语法树的时候就必须利用子节点的值来计算。为了解决这个问题，antlr4 提供了一个标注（Annotate) 语法树的功能。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//calcuListener 里的方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;exitParens&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;CymbolParser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ParensContext&lt;/span&gt; ctx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;exitAddSub&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;CymbolParser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;AddSubContext&lt;/span&gt; ctx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; lvalue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lhs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//lhs (left hand side) 在.g4 文件中赋值为前面的 expr&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; rvalue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rhs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;op&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;ADD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; lvalue&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;rvalue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;lvalue&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;rvalue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;上下文无关文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上下文无关文法&#34;&gt;#&lt;/a&gt; 上下文无关文法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230329150049799.png&#34; alt=&#34;image-20230329150049799&#34;&gt;&lt;/p&gt;
&lt;p&gt;编写 g4 文件时实际上用的就是上下文无关文法&lt;/p&gt;
&lt;h3 id=&#34;什么是上下文相关文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是上下文相关文法&#34;&gt;#&lt;/a&gt; 什么是上下文相关文法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230329150412566.png&#34; alt=&#34;image-20230329150412566&#34;&gt;&lt;/p&gt;
&lt;p&gt;以第三行与第七行为例：B 是展开为 Z 还是 b 与它的上下文（这里是前面的字符）有关&lt;/p&gt;
&lt;p&gt;这段文法表示的是 a&lt;sup&gt;n*b&lt;/sup&gt;n*c^n ，可以证明用上下文无关文法是无法描述这个语言的。&lt;/p&gt;
&lt;h3 id=&#34;推导&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#推导&#34;&gt;#&lt;/a&gt; 推导&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230329150648976.png&#34; alt=&#34;image-20230329150648976&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230329150810626.png&#34; alt=&#34;image-20230329150810626&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;为什么不使用正则表达式去描述语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么不使用正则表达式去描述语法&#34;&gt;#&lt;/a&gt; 为什么不使用正则表达式去描述语法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230329153448085.png&#34; alt=&#34;image-20230329153448085&#34;&gt;&lt;/p&gt;
&lt;p&gt;证明如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230329153850498.png&#34; alt=&#34;image-20230329153850498&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中 Ai 对应的是 DFA 中的第 i-1 个状态&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230329154356116.png&#34; alt=&#34;image-20230329154356116&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为 m &amp;gt; k, 所以一定存在状态 si ，在 si 停留了两次，假设又经过了 j 步能够到达第二次 si&lt;/p&gt;
&lt;p&gt;根据假设，a&lt;sup&gt;ib&lt;/sup&gt;i 能够到达终止状态，那么 a&lt;sup&gt;(i+j)b&lt;/sup&gt;i 也能到达终止状态，与假设矛盾，证明完毕。&lt;/p&gt;
&lt;h2 id=&#34;ll1语法分析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ll1语法分析器&#34;&gt;#&lt;/a&gt; LL (1) 语法分析器&lt;/h2&gt;
&lt;h3 id=&#34;总览&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总览&#34;&gt;#&lt;/a&gt; 总览&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230411205542981.png&#34; alt=&#34;image-20230411205542981&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331143754540.png&#34; alt=&#34;image-20230331143754540&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自顶向下的含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自顶向下的含义&#34;&gt;#&lt;/a&gt; 自顶向下的含义&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331140837017.png&#34; alt=&#34;image-20230331140837017&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;两个l的含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两个l的含义&#34;&gt;#&lt;/a&gt; 两个 L 的含义&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331141034044.png&#34; alt=&#34;image-20230331141034044&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;递归下降的含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#递归下降的含义&#34;&gt;#&lt;/a&gt; 递归下降的含义&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331141214747.png&#34; alt=&#34;image-20230331141214747&#34;&gt;&lt;/p&gt;
&lt;p&gt;eg: 先默认选择产生式的问题已经被解决了，只演示递归下降的过程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331141731554.png&#34; alt=&#34;image-20230331141731554&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331142317647.png&#34; alt=&#34;image-20230331142317647&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;如何选择产生式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何选择产生式&#34;&gt;#&lt;/a&gt; 如何选择产生式&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331142728269.png&#34; alt=&#34;image-20230331142728269&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331142916987.png&#34; alt=&#34;image-20230331142916987&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;什么是ll1文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是ll1文法&#34;&gt;#&lt;/a&gt; 什么是 LL (1) 文法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331143057195.png&#34; alt=&#34;image-20230331143057195&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LL（1）中 1 的含义：只需要查看当前的输入符号就可以确定选择哪条产生式进行展开&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ll1的伪代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ll1的伪代码&#34;&gt;#&lt;/a&gt; LL (1) 的伪代码&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;假设预测分析表已经有了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331143540005.png&#34; alt=&#34;image-20230331143540005&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331143718582.png&#34; alt=&#34;image-20230331143718582&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;难点如何生成预测分析表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#难点如何生成预测分析表&#34;&gt;#&lt;/a&gt; 难点：如何生成预测分析表&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331150322238.png&#34; alt=&#34;image-20230331150322238&#34;&gt;&lt;/p&gt;
&lt;p&gt;竖着看：什么时候选择展开为 func_call, 还是 decl。很简单，看当前输入的前面是 int 还是 ID。&lt;/p&gt;
&lt;p&gt;横着看：如何确定 optional_init 是否展开为空串&lt;/p&gt;
&lt;p&gt;问题：什么时候可以选择空串展开？ 见后&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331151147854.png&#34; alt=&#34;image-20230331151147854&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331151439293.png&#34; alt=&#34;image-20230331151439293&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331151512669.png&#34; alt=&#34;image-20230331151512669&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331152131492.png&#34; alt=&#34;image-20230331152131492&#34;&gt;&lt;/p&gt;
&lt;p&gt;为什么中间两步要去除空串，比如：因为即使 Y1 可以被展开为空串，后面的 Y2-YK 不一定能展开为空串，X 的开头不一定是空串。空串要单独判断&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230331152345075.png&#34; alt=&#34;image-20230331152345075&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230411223059716.png&#34; alt=&#34;image-20230411223059716&#34;&gt;&lt;/p&gt;
&lt;p&gt;dollar 符是文件结束符号&lt;/p&gt;
&lt;p&gt;因为 follow 集合考虑的是终结符，所以规则 3 要去掉空串&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407140712901.png&#34; alt=&#34;image-20230407140712901&#34;&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407140907285.png&#34; alt=&#34;image-20230407140907285&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个例子中只看 c 无法确定 Y 是由 3 号还是 4 号规则展开，则不是 LL (1) 文法&lt;/p&gt;
&lt;h3 id=&#34;非递归的预测分析算法不作要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非递归的预测分析算法不作要求&#34;&gt;#&lt;/a&gt; 非递归的预测分析算法（不作要求）&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407141535578.png&#34; alt=&#34;image-20230407141535578&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;改造为ll1文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#改造为ll1文法&#34;&gt;#&lt;/a&gt; 改造为 LL (1) 文法&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407141907838.png&#34; alt=&#34;image-20230407141907838&#34;&gt;&lt;/p&gt;
&lt;p&gt;为什么左递归不是 LL (1) 文法：&lt;/p&gt;
&lt;p&gt;LL (1) 的递归下降算法会出问题：&lt;/p&gt;
&lt;p&gt;E 展开为 E+T，然后 E+T 中的 E 展开为 E+T。。。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407142036246.png&#34; alt=&#34;image-20230407142036246&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407142224345.png&#34; alt=&#34;image-20230407142224345&#34;&gt;&lt;/p&gt;
&lt;p&gt;问题：改写成右递归比较复杂，而且改造后可读性较差&lt;/p&gt;
&lt;h3 id=&#34;直接左递归的改造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直接左递归的改造&#34;&gt;#&lt;/a&gt; 直接左递归的改造&lt;/h3&gt;
&lt;p&gt;改造的模板：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407142538910.png&#34; alt=&#34;image-20230407142538910&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;间接左递归的改造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#间接左递归的改造&#34;&gt;#&lt;/a&gt; 间接左递归的改造&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407142905861.png&#34; alt=&#34;image-20230407142905861&#34;&gt;&lt;/p&gt;
&lt;p&gt;思路：改造后的文法中的每一条展开式都应该满足红框里的条件 因为展开后的编号越来越大，就永远回不到自己。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先对所有的非终结符编号： S：A1， A：A2， B：A3&lt;/li&gt;
&lt;li&gt;看所有的非终结符的展开式是否满足单调递增性质&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407143533868.png&#34; alt=&#34;image-20230407143533868&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;发现 B-&amp;gt; Sa|a 不满足改造条件， 将非终结符慢慢展开，发现展开为最后一行时变成了直接左递归，直接左递归用上面的方法处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;左递归改造算法要求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#左递归改造算法要求&#34;&gt;#&lt;/a&gt; 左递归改造算法要求：&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407143729991.png&#34; alt=&#34;image-20230407143729991&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;左公因子的改造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#左公因子的改造&#34;&gt;#&lt;/a&gt; 左公因子的改造&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407144035629.png&#34; alt=&#34;image-20230407144035629&#34;&gt;&lt;/p&gt;
&lt;p&gt;为什么左公因子不行 ，比如第八行原来的 decl 内容，两个展开式开头都是 &#39;int&#39;。&lt;/p&gt;
&lt;p&gt;改造方法简单，如第 13 行的定义&lt;/p&gt;
&lt;h2 id=&#34;adaptive-ll语法分析算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adaptive-ll语法分析算法&#34;&gt;#&lt;/a&gt; Adaptive LL (*) 语法分析算法&lt;/h2&gt;
&lt;p&gt;也称 ALL STAR 算法，antrl4 采用这种算法&lt;/p&gt;
&lt;p&gt;ChatGPT 评价：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407144342359.png&#34; alt=&#34;image-20230407144342359&#34;&gt;&lt;/p&gt;
&lt;p&gt;第 2,3 行 含有 LL (1) 的特性：不用猜测 自顶向下&lt;/p&gt;
&lt;p&gt;第 4 行： 解决二义性&lt;/p&gt;
&lt;p&gt;第 7 行：解决左递归&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407145002698.png&#34; alt=&#34;image-20230407145002698&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;antrl4对左递归的改造将左递归改造成循环迭代&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#antrl4对左递归的改造将左递归改造成循环迭代&#34;&gt;#&lt;/a&gt; antrl4 对左递归的改造，将左递归改造成循环 (迭代)&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407150629592.png&#34; alt=&#34;image-20230407150629592&#34;&gt;&lt;/p&gt;
&lt;p&gt;参数_p 指的是优先级，优先级按下面书写的顺序（ID 1,INT 2, 加法 3 乘法 4） 当 3 &amp;gt;= _p 时 才能展开为加法。展开后变成了 expr [4]，优先级升了一级（优先级上升算法名称的由来）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407152404434.png&#34; alt=&#34;image-20230407152404434&#34;&gt;&lt;/p&gt;
&lt;p&gt;以 1+2+3 为例，右侧手写部分为算法伪代码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407152625774.png&#34; alt=&#34;image-20230407152625774&#34;&gt;&lt;/p&gt;
&lt;p&gt;以 1+2*3 为例&lt;/p&gt;
&lt;h3 id=&#34;右结合运算符的处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#右结合运算符的处理&#34;&gt;#&lt;/a&gt; 右结合运算符的处理&lt;/h3&gt;
&lt;p&gt;想让一个运算符为右结合，再递归调用的时候传入的优先级应该不变。&lt;/p&gt;
&lt;h2 id=&#34;antlr4是如何进行错误报告的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#antlr4是如何进行错误报告的&#34;&gt;#&lt;/a&gt; antlr4 是如何进行错误报告的&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230407154816857.png&#34; alt=&#34;image-20230407154816857&#34;&gt;&lt;/p&gt;
&lt;p&gt;LexerNoViableAltException: 词法分析的时候遇到未知字符，出现错误&lt;/p&gt;
&lt;p&gt;NoViableAltException: 面对当前的输入时，要展开当前的非终结符，发现没有备选分支可选&lt;/p&gt;
&lt;p&gt;InputMismatchException: 根据选择好的备选分支展开时，发生终结符不匹配错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;antlr4 的强大之处在于其报错之后不会马上结束程序，而是以报错， 恢复， 继续分析的流程来解析程序&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;antlr4的基本策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#antlr4的基本策略&#34;&gt;#&lt;/a&gt; antlr4 的基本策略&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412141343590.png&#34; alt=&#34;image-20230412141343590&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四项基本原则&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特殊情况，特殊处理&lt;/li&gt;
&lt;li&gt;一般情况，统一处理&lt;/li&gt;
&lt;li&gt;统一处理，精细控制&lt;/li&gt;
&lt;li&gt;自定义错误处理策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;特殊情况特殊处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊情况特殊处理&#34;&gt;#&lt;/a&gt; 特殊情况，特殊处理&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412141619597.png&#34; alt=&#34;image-20230412141619597&#34;&gt;&lt;/p&gt;
&lt;p&gt;单词法符号移除： class &lt;strong&gt;9&lt;/strong&gt; T {int i;} 9 会被移除&lt;/p&gt;
&lt;p&gt;单词法符号补全： class {int i;} 会在 class 后面补一个符号&lt;/p&gt;
&lt;h3 id=&#34;一般情况统一处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一般情况统一处理&#34;&gt;#&lt;/a&gt; 一般情况，统一处理&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230417235837973.png&#34; alt=&#34;image-20230417235837973&#34;&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412142107657.png&#34; alt=&#34;image-20230412142107657&#34;&gt;&lt;/p&gt;
&lt;p&gt;antlr4 看到一个中括号，可以报错：中间缺失一个 expr&lt;/p&gt;
&lt;p&gt;antlr 通过递归调用匹配，发现当前终结符匹配不了，于是递归返回，每一层看当前符号是不是一个&lt;strong&gt;想要的符号&lt;/strong&gt;（所谓想要的符号，即假装当前想匹配的非终结符已经匹配成功，接下来应该遇到什么终结符，类似 Follow 集合，但不等价，称为 Following 集合）, 恢复到 expr 层，假装 expr 已经匹配成功，右中括号可以匹配，然后继续解析后面的。&lt;/p&gt;
&lt;p&gt;注意 Follow（静态）集合与 Following（动态）集合的区别。&lt;/p&gt;
&lt;p&gt;恢复时的动作是：丢弃词法单元直到碰到当前 Following 集合中的某个词法单元，然后从当前规则中恢复，也就是返回上一层，继续分析。比如，在 [] 例子中（见上图），atom 期望 INT/ID，与] 不匹配，则不断丢弃输入中的词法单元，直到遇到 ^ 或者 ]。对于这个例子，恰巧当前词法单元就是 ]，所以并没有丢弃任何词法单元，就能从 atom 中恢复，返回到 expr 层。expr 期望看到 ^，与 ] 也不匹配，则不断丢弃词法单元直到遇到 ]。这里同样也没有丢弃任何词法单元，就能从 expr 中恢复，返回到 group 层。group 期望看到 ]，与当前词法单元匹配，成功恢复。&lt;/p&gt;
&lt;h3 id=&#34;统一处理精细控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统一处理精细控制&#34;&gt;#&lt;/a&gt; 统一处理，精细控制&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412143257921.png&#34; alt=&#34;image-20230412143257921&#34;&gt;&lt;/p&gt;
&lt;p&gt;所谓优雅：即以最小的代价恢复过来&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412143706102.png&#34; alt=&#34;image-20230412143706102&#34;&gt;&lt;/p&gt;
&lt;p&gt;类的文法定义为 &lt;em&gt;&lt;strong&gt;class ID { member+ }&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;不优雅的错误恢复：匹配 member 的时候，看到 y 不属于一个 member，直接退出 while 循环，即整个 member + 匹配失败。&lt;/p&gt;
&lt;p&gt;优雅的错误恢复，相当于在匹配 member 的 while 循环中加了一个 continue，继续匹配之后的 member。&lt;/p&gt;
&lt;h3 id=&#34;自定义错误处理策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自定义错误处理策略&#34;&gt;#&lt;/a&gt; 自定义错误处理策略&lt;/h3&gt;
&lt;p&gt;比如，（已知语法正确）关闭默认错误处理功能，提高运行效率&lt;/p&gt;
&lt;p&gt;比如，（出错代价太大）在遇到第一个语法错误时，就停止分析&lt;/p&gt;
&lt;p&gt;使用 antrl4 提供的 strategy 模式：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412144102502.png&#34; alt=&#34;image-20230412144102502&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;all-star算法的基本思想-构建lookahead-dfa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#all-star算法的基本思想-构建lookahead-dfa&#34;&gt;#&lt;/a&gt; All Star 算法的基本思想  构建 lookahead DFA&lt;/h2&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230418234205988.png&#34; alt=&#34;image-20230418234205988&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个文法不属于 LL（k) 文法 因为它表示的字符串为 **(a*b)(c|d)**。但给出 bc 或 bd antlr4 能判断出从 Ac 和 Ad 哪条展开式展开。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412150939866.png&#34; alt=&#34;image-20230412150939866&#34;&gt;&lt;/p&gt;
&lt;p&gt;对每一个非终结符都画一个增强迁移网络 ATN (Augmented Transitjion Network), 如上图所示。All star 算法的核心思想: **Incrementally and dynamically build up a lookahead DFA that map lookahead phrases to predicated productions.** 关键：增量式构造，“向前看” DFA。&lt;/p&gt;
&lt;p&gt;lookahead DFA 作用：帮助选择备选分支。（比如当看到 S 不知道选哪条展开式，使用 DFA 辅助判断）。&lt;/p&gt;
&lt;p&gt;策略：既然不知道要选哪条备选分支，就并行地探索所有的备选分支。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412151956767.png&#34; alt=&#34;image-20230412151956767&#34;&gt;&lt;/p&gt;
&lt;p&gt;期望情况：只有一条路径成功走到了最后&lt;/p&gt;
&lt;p&gt;有歧义问题：多条路径还在走的时候，没有了输入，或者多条路径处理时汇合。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230412154019808.png&#34; alt=&#34;image-20230412154019808&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个状态有三个分量：第一个是状态名，第二个是选择的备选分支，第三个分量表示递归调用完当前 DFA 后到达的状态。状态是怎么定的：注意通过 ε 能到达的节点是分不开的。（求每个节点的 ε 闭包）&lt;/p&gt;
&lt;p&gt;看到 d 和 c 后就能发现第二个分量分离了，即能确定用哪条分支展开了。&lt;/p&gt;
&lt;h2 id=&#34;lr0-语法分析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lr0-语法分析器&#34;&gt;#&lt;/a&gt; LR (0) 语法分析器&lt;/h2&gt;
&lt;p&gt;LL (k) 的弱点：&lt;/p&gt;
&lt;p&gt;​	在仅看到右部的前 k 个词法单元时就必须预测要使用哪条产生式&lt;/p&gt;
&lt;p&gt;LR (k) 的优点：&lt;/p&gt;
&lt;p&gt;​	看到与正在考虑的这个产生式的整个右部对应的词法单元之后再决定&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524141208555.png&#34; alt=&#34;image-20230524141208555&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524141434136.png&#34; alt=&#34;image-20230524141434136&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524141809217.png&#34; alt=&#34;image-20230524141809217&#34;&gt;&lt;/p&gt;
&lt;p&gt;rm： right most 最右推导&lt;/p&gt;
&lt;p&gt;为什么是最右推导：&lt;/p&gt;
&lt;p&gt;​		因为规约的顺序实际上是一个反向最右推导的过程，为了我们要从左往右扫描输入相匹配&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524142410243.png&#34; alt=&#34;image-20230524142410243&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524142507347.png&#34; alt=&#34;image-20230524142507347&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524143658693.png&#34; alt=&#34;image-20230524143658693&#34;&gt;&lt;/p&gt;
&lt;p&gt;在栈中，交替进行移入和规约操作&lt;/p&gt;
&lt;p&gt;问题转化为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524143738090.png&#34; alt=&#34;image-20230524143738090&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524143946746.png&#34; alt=&#34;image-20230524143946746&#34;&gt;&lt;/p&gt;
&lt;p&gt;利用 LR 分析表指导语法分析过程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524144146911.png&#34; alt=&#34;image-20230524144146911&#34;&gt;&lt;/p&gt;
&lt;p&gt;一开始处于 0 号状态，看到当前词法单元为 id，进行 s5 操作。&lt;/p&gt;
&lt;p&gt;s5 操作含义：&lt;/p&gt;
&lt;p&gt;​	s： shift 移入， 将 id 移入栈中&lt;/p&gt;
&lt;p&gt;​	5： 调整当前语法分析器状态为 5&lt;/p&gt;
&lt;p&gt;​	然后要右移指向当前词法单元的指针（小点）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524144356599.png&#34; alt=&#34;image-20230524144356599&#34;&gt;&lt;/p&gt;
&lt;p&gt;右边 “GOTO” 的小表中的数字前应该有一个 g&lt;/p&gt;
&lt;p&gt;比如 0 号状态下压入一个 F ，查表发现应该实现 g3，即将 F 压入栈，转向 3 号状态。&lt;/p&gt;
&lt;h3 id=&#34;栈上操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈上操作&#34;&gt;#&lt;/a&gt; “栈” 上操作&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230623163900518.png&#34; alt=&#34;image-20230623163900518&#34;&gt;&lt;/p&gt;
&lt;p&gt;一开始栈中不为空，要压入一个 s0，表示起始处于 0 号状态，s 表示开始。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遇到 id 查表发现 0 号状态遇到 id 是 s5，则将 id 压入栈中，并在右边加上数字 5 表示当前处于 5 号状态。即压入 id5。指针右移指向 * 号。&lt;/li&gt;
&lt;li&gt;查表，5 号状态遇到 * 号，做 r6 操作。用 6 号产生式规约，将栈顶的 id5 弹出，此时底下剩一个 s0，处于 0 号状态，然后要压入 F，查表，0 号状态移入 F 要 g3，压入 F3，转向 3 号状态。&lt;strong&gt;指针不变&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;lr分析表如何生成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lr分析表如何生成&#34;&gt;#&lt;/a&gt; LR 分析表如何生成&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524151050006.png&#34; alt=&#34;image-20230524151050006&#34;&gt;&lt;/p&gt;
&lt;p&gt;什么是句柄：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524151111643.png&#34; alt=&#34;image-20230524151111643&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;一个永远正确的定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一个永远正确的定理&#34;&gt;#&lt;/a&gt; 一个永远正确的定理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;这个定理的推导不需掌握，但是这个定理是正确的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524151625361.png&#34; alt=&#34;image-20230524151625361&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524152213719.png&#34; alt=&#34;image-20230524152213719&#34;&gt;&lt;/p&gt;
&lt;p&gt;LR 自动机在追踪所有产生式的状态&lt;/p&gt;
&lt;p&gt;小点表示当前追踪到了哪一个位置&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230623170950451.png&#34; alt=&#34;image-20230623170950451&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;增广文法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#增广文法&#34;&gt;#&lt;/a&gt; 增广文法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524152728413.png&#34; alt=&#34;image-20230524152728413&#34;&gt;&lt;/p&gt;
&lt;p&gt;S 是开始符号，仅仅是技术上的一些处理。&lt;/p&gt;
&lt;h3 id=&#34;lr0状态机的构造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lr0状态机的构造&#34;&gt;#&lt;/a&gt; LR (0) 状态机的构造&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524153005769.png&#34; alt=&#34;image-20230524153005769&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果要期望看到的文法符号串开头是一个非终结符，要做闭包！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如 0 号状态一开始只有 E&#39;-&amp;gt; . E&lt;/p&gt;
&lt;p&gt;下面想要看到一个 E，但是 E 是一个非终结符，它可以展开为 1 号和 2 号产生式，2 号产生式又可以做闭包，直到所有产生式都包含进来了。&lt;/p&gt;
&lt;p&gt;LR (0) 语法分析器在做句柄识别的时候，依赖的是一个 LR (0) 句柄识别有穷状态机&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I1 状态是怎么构造的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I0 看到一个 E，发现满足第一行和第二行的需求，于是将第一行与第二行移入 I1，并将小点右移。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I4 状态是怎么构造的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I0 状态看到（ ，发现倒数第二行满足，于是将倒数第二行移入 I4，并将小点右移，然后发现接下来期望看到的 E 是一个非终结符，于是对 E 进行闭包展开。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230623173005062.png&#34; alt=&#34;image-20230623173005062&#34;&gt;&lt;/p&gt;
&lt;p&gt;哪些是接受状态？ 图中红框圈出来的是，因为其中包含了一些项，小点已经走到了末尾，表示发现了一个完整的句柄。而至于要不要规约，是接下来的事。&lt;/p&gt;
&lt;h3 id=&#34;根据lr0自动机怎么构建分析表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据lr0自动机怎么构建分析表&#34;&gt;#&lt;/a&gt; 根据 LR (0) 自动机怎么构建分析表&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230524154927521.png&#34; alt=&#34;image-20230524154927521&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这张表与之前的那张表不太一样。之前的表是在构造了 LR (0) 语法分析器后，&lt;strong&gt;利用 SLR&lt;/strong&gt; 的语法规范构造的表。而上图的表是利用 LR (0) 的规范构造的。&lt;/p&gt;
&lt;p&gt;如何填写右边的表？&lt;/p&gt;
&lt;p&gt;先填所有的 s 和 g。比如 0 号状态碰到 id 变到 5 号状态，则在 action 对应位置填入 s5。0 号状态碰到 E 进入 1 号状态，则在 goto 表中填入 g1。这是前两条规则。&lt;/p&gt;
&lt;p&gt;填 r 的规则如下图的规则 3，在 LR (0) 中，如果碰到了可以做规约的第 k 个表达式，并且表达式的左部不是增广文法中的开始条件，则在 action 表对应位置填入 rk。&lt;/p&gt;
&lt;p&gt;比如下图中的 I2 状态有一个可以规约的 E-&amp;gt;T. 其中 E—&amp;gt;T 对应 2 号产生式，则在 2 号状态下遇到所有的符号都做规约，即 2 号产生式对应的行都填入 r2。同理 10 号产生式对应的行都填入 r3&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531140938844.png&#34; alt=&#34;image-20230531140938844&#34;&gt;&lt;/p&gt;
&lt;p&gt;之前规定了 A 不能是开始符号，如果是开始符号，采用规则 4。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531141121981.png&#34; alt=&#34;image-20230531141121981&#34;&gt;&lt;/p&gt;
&lt;p&gt;四条规则总结：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531141214903.png&#34; alt=&#34;image-20230531141214903&#34;&gt;&lt;/p&gt;
&lt;p&gt;要求 A 不是增广文法中扩展的 S&#39;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531141304037.png&#34; alt=&#34;image-20230531141304037&#34;&gt;&lt;/p&gt;
&lt;p&gt;上表中 s7,s2 s7,s1 有移入规约冲突，所以不是 LR (0) 文法&lt;/p&gt;
&lt;p&gt;以 2 号产生式 E-&amp;gt;T 为例，可以求出 FOLLOW (E) = {+,),$} 如果在二号状态遇到了 * 号，如果进行 r2 操作，即将栈里的 T 变成 E，则现在 E 的后边就跟着一个 * 号了 这是错误的。&lt;/p&gt;
&lt;h2 id=&#34;lr1语法分析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lr1语法分析器&#34;&gt;#&lt;/a&gt; LR (1) 语法分析器&lt;/h2&gt;
&lt;h3 id=&#34;slr1语法分析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#slr1语法分析器&#34;&gt;#&lt;/a&gt; SLR (1) 语法分析器&lt;/h3&gt;
&lt;p&gt;S 的含义：simple&lt;/p&gt;
&lt;p&gt;把 L (0) 语法分析表构建的第三条规则修改后，就可以得到 SLR (1) 分析表&lt;/p&gt;
&lt;p +，),$&gt;可算出 FOLLOW (E)=&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531141739236.png&#34; alt=&#34;image-20230531141739236&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;image-20230531142412456.png&#34; alt=&#34;image-20230531142412456&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531143303240.png&#34; alt=&#34;image-20230531143303240&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531144019374.png&#34; alt=&#34;image-20230531144019374&#34;&gt;&lt;/p&gt;
&lt;p&gt;为什么优于 SLR (1)， 因为 FIRST (gamma) 包含于 FOLLOW (A)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531150929602.png&#34; alt=&#34;image-20230531150929602&#34;&gt;&lt;/p&gt;
&lt;p&gt;为什么 β 后面跟着 a，因为 β 可能是空串&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531152400747.png&#34; alt=&#34;image-20230531152400747&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531153030143.png&#34; alt=&#34;image-20230531153030143&#34;&gt;&lt;/p&gt;
&lt;p&gt;LR(0) &amp;lt; LALR(1) &amp;lt; LR(1)&lt;/p&gt;
&lt;p&gt;问题：合并后会不会影响到关联的其它状态？&lt;/p&gt;
&lt;p&gt;不会，LR (0) 项相同，出边和对应的到达状态也是可以合并的&lt;/p&gt;
&lt;p&gt;但是合并还是可能引起冲突的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531154243826.png&#34; alt=&#34;image-20230531154243826&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230531154844166.png&#34; alt=&#34;image-20230531154844166&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;lr算法的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lr算法的特点&#34;&gt;#&lt;/a&gt; LR 算法的特点&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230602141654975.png&#34; alt=&#34;image-20230602141654975&#34;&gt;&lt;/p&gt;
&lt;p&gt;为什么？ 因为一个 L 语言可以用 G1 文法和 G2 文法表示，这时 G1 可能刚好满足 SLR（1），G2 刚好满足 LR（1）&lt;/p&gt;
&lt;p&gt;要区分 &lt;strong&gt;文法&lt;/strong&gt; 和 &lt;strong&gt;语言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是一个语言能写出 LR (1) 的文法，就一定能写出 SLR (1) 的文法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230602142434949.png&#34; alt=&#34;image-20230602142434949&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230602142715980.png&#34; alt=&#34;image-20230602142715980&#34;&gt;&lt;/p&gt;
&lt;p&gt;{+,*} 属于 FOLLOW (E)&lt;/p&gt;
&lt;p&gt;譬如这里的 I7 状态： + 号即属于 Follow (E) 也是当前看到的下一个符号，因此看到＋号既可以规约也可以移入，产生冲突。&lt;/p&gt;
&lt;p&gt;这里根据实际地考量（优先级与结合性），即如果碰到 E+E+E 应该先算出左边两个 E 相加的结果，因此 E+E . 碰到＋号应该选择规约&lt;/p&gt;
&lt;h2 id=&#34;lab2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lab2&#34;&gt;#&lt;/a&gt; lab2&lt;/h2&gt;
&lt;h3 id=&#34;实验内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验内容&#34;&gt;#&lt;/a&gt; 实验内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本次实验需要完成语法分析与高亮，要求如下
&lt;ul&gt;
&lt;li&gt;根据实验指导内提供的文档完成 SysyParser.g4 并将 SysYParser.g4 中按下面已经给出的写法将 exp 和 cond 写成左递归&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;输入文件存在语法错误时&lt;/strong&gt;：输出语法错误在哪一行，格式为 &lt;code&gt;Error type B at Line [lineNo]:[errorMessage]&lt;/code&gt;  其中 lineNo 为出错的 token 首个字符所在行的行号，errorMessage 可自行定义，本实验不做要求，只要冒号前的信息正确即可，需要输出所有的错误&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;输入文件不存在语法错误时&lt;/strong&gt;：按照规定格式输出语法树 (含高亮)，输出格式详见&lt;strong&gt;样例一&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用 ** 标准错误输出（System.err）** 打印所有运行结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实验过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验过程&#34;&gt;#&lt;/a&gt; 实验过程&lt;/h3&gt;
&lt;p&gt;仍然需要重写 BaseErrorListener 实现一个自己的 myErrorListener。与实验一不同的是，除法 ErrorListener 的方式不同，本次实验要在语法分析的过程中进行错误检查。改写的 main 函数如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input path is required&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; source &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;CharStream&lt;/span&gt; input &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CharStreams&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fromFileName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;source&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		SysYLexer sysYLexer = new SysYLexer(input);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		sysYLexer.removeErrorListeners();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		sysYLexer.addErrorListener(new myErrorListener());&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		List&amp;lt;Token&gt; tokens = (List&amp;lt;Token&gt;) sysYLexer.getAllTokens();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;SysYLexer&lt;/span&gt; sysYLexer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYLexer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;CommonTokenStream&lt;/span&gt; tokens &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CommonTokenStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;SysYParser&lt;/span&gt; parser &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYParser&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tokens&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		parser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;removeErrorListeners&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		parser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;ParseTree&lt;/span&gt; tree &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; parser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;program&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;Visitor&lt;/span&gt; visitor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Visitor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		visitor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tree&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		String[] rulenames = sysYLexer.getRuleNames();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		for (Token token : tokens) &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//			String tokenType = rulenames[token.getType()-1];&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//			String tokenText = toDemical(token.getText());&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//			String tokenLine = &#34;&#34;+token.getLine();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//			System.err.println(tokenType + &#34; &#34; + tokenText + &#34; at Line &#34;+tokenLine+&#39;.&#39;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//		&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中注释掉的部分是实验一的代码。这次要将 errorlistener 加到语法分析器 parser 上 并且利用 parser.program () 触发错误检查并生成语法树。注意，之所以用 program () 方法当做入口方法是因为 SysYParser.g4 的定义中 program 是最高的语言层次。&lt;/p&gt;
&lt;p&gt;本次实验最重要的内容就是重写了一个继承自 SysYParserBaseVisitor 的类 Vistor 代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Visitor&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYParserBaseVisitor&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; depth &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;visitChildren&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RuleNode&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defaultResult&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt; sb &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;  &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; depth&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuleContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuleIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; ruleName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYParser&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ruleNames&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			ruleName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Character&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toUpperCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ruleName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;charAt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; ruleName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ruleName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getChildCount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;shouldVisitNextChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				depth &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;ParseTree&lt;/span&gt; c &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt; childResult &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;aggregateResult&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; childResult&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				depth &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;visitTerminal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;TerminalNode&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt; sb &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;  &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; depth&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getSymbol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;ruleNames&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toDemical&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getText&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ruleNames&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ruleNames &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;CONST[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;INT[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;VOID[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IF[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ELSE[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;WHILE[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;BREAK[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;CONTINUE[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;RETURN[orange]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;PLUS[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MINUS[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MUL[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;DIV[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;MOD[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ASSIGN[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;EQ[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;NEQ[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;LT[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;GT[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;LE[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;GE[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;NOT[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;AND[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;OR[blue]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;IDENT[red]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;INTEGER_CONST[green]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;visitChildren 是当 dfs 遍历每个语法节点时都会触发的方法，一开始没有想到在遍历某个节点时如何得到该节点的深度，后面通过维护一个全局变量 depth 来实现。当进入节点前 depth 会 + 1 退出时会 - 1。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230328210917158.png&#34; alt=&#34;image-20230328210917158&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里简单的把 accept 方法理解为会调用 visitor.visitChildren (currentnode) 的函数就好了。&lt;/p&gt;
</content>
        <category term="编译原理" />
        <updated>2023-03-24T06:05:42.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</id>
        <title>编译原理01-词法分析</title>
        <link rel="alternate" href="http://example.com/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;h1 id=&#34;编译原理01-词法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译原理01-词法分析&#34;&gt;#&lt;/a&gt; 编译原理 01 - 词法分析&lt;/h1&gt;
&lt;p&gt;词法分析： 输入（程序文本 / 字符串 s）--&amp;gt; 输出（词法单元流）&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230309110603730.png&#34; alt=&#34;image-20230309110603730&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;词法分析器的三种设计方法由易到难&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#词法分析器的三种设计方法由易到难&#34;&gt;#&lt;/a&gt; 词法分析器的三种设计方法（由易到难）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;词法分析器生成器（如 ANTLR）&lt;/li&gt;
&lt;li&gt;手写词法分析器&lt;/li&gt;
&lt;li&gt;自动化词法分析器 (自己实现一个词法分析器生成器)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;生产环境下的编译器（如 gcc）通常选择手写词法分析器&lt;/p&gt;
&lt;h2 id=&#34;antrl的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#antrl的使用&#34;&gt;#&lt;/a&gt; antrl 的使用&lt;/h2&gt;
&lt;p&gt;输入： 词法单元的规约 -&lt;strong&gt;SimpleExpr.g4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输出：词法分析器 -  &lt;strong&gt;SimpleExprLexer.java&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​				SimpleExprLexer.java 编译后 接受输入文件 并输出 token 流&lt;/p&gt;
&lt;h2 id=&#34;g4文件的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#g4文件的结构&#34;&gt;#&lt;/a&gt; .g4 文件的结构&lt;/h2&gt;
&lt;p&gt;第一行： &lt;code&gt;grammar SimpleExpr ;&lt;/code&gt;  给接下来的文法起个名字 名字要与文件名一致&lt;/p&gt;
&lt;p&gt;​					** 如果文件里只包含词法部分 用 lexer grammar SysYLexer **&lt;/p&gt;
&lt;p&gt;​					 每一行都要以分号结尾&lt;/p&gt;
&lt;p&gt;@header {} 括号里的东西会自动拷贝到到 java 文件中&lt;/p&gt;
&lt;p&gt;语法规则见下面示例&lt;/p&gt;
&lt;p&gt;SimpleExpr.g4:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Antlr&#34;&gt;grammar SimpleExpr;

import SimpleExprRules;

@header&amp;#123;
package simpleexpr;
&amp;#125;

prog : stat* EOF ;

stat : expr &#39;;&#39;
     | ID &#39;=&#39; expr &#39;;&#39;
     | &#39;if&#39; expr &#39;;&#39;
     ;

expr : expr (&#39;*&#39; | &#39;/&#39;) expr
     | expr (&#39;+&#39; | &#39;-&#39;) expr
     | &#39;(&#39; expr &#39;)&#39;
     | ID
     | INT
     | FLOAT
     ;
    // 到这里描述的其实还是语法结构
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SimpleExprRules.g4:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Antlr&#34;&gt;lexer grammar SimpleExprRules;

SEMI : &#39;;&#39; ;
ASSIGN : &#39;=&#39; ;
IF : &#39;if&#39; ;
MUL : &#39;*&#39; ;
DIV : &#39;/&#39; ;
ADD : &#39;+&#39; ;
SUB : &#39;-&#39; ;
LPAREN : &#39;(&#39; ;
RPAREN : &#39;)&#39; ;

ID : (LETTER | &#39;_&#39;) WORD* ;
INT : &#39;0&#39; | ([1-9] DIGIT*) ;
FLOAT : INT &#39;.&#39; DIGIT*
      | &#39;.&#39; DIGIT+
      ;

WS : [ \t\r\n]+ -&amp;gt; skip ;

//SL_COMMENT : &#39;//&#39; .*? &#39;\n&#39; -&amp;gt; skip ;
SL_COMMENT2 : &#39;//&#39; ~[\n]* &#39;\n&#39; -&amp;gt; skip;
DOC_COMMENT : &#39;/**&#39; .*? &#39;*/&#39; -&amp;gt; skip ;
ML_COMMENT : &#39;/*&#39; .*? &#39;*/&#39; -&amp;gt; skip ;

fragment LETTER : [a-zA-Z] ;
fragment DIGIT : [0-9] ;
fragment WORD : LETTER | DIGIT | &#39;_&#39; ;
//以上才是真正的词法部分

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;用编程方式使用antlr-4-生成的xxxlexerjava&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用编程方式使用antlr-4-生成的xxxlexerjava&#34;&gt;#&lt;/a&gt; 用编程方式使用 ANTLR 4 生成的 xxxlexer.java&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;package simpleexpr;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.ParseTree;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class SimpleExprTest &amp;#123;
  public static void main(String[] args) throws IOException &amp;#123;
    System.out.println(&amp;quot;SimpleExprTest ...&amp;quot;);

    InputStream is = System.in;

    String file;
    if (args.length &amp;gt; 0) &amp;#123;
      file = args[0];
      is = new FileInputStream(file);
    &amp;#125;

    CharStream input = CharStreams.fromStream(is);
    //SimpleExprLexer 是.g4文件生成的java类 input必须是CharStream格式
    SimpleExprLexer lexer = new SimpleExprLexer(input);
	
    lexer.getAllTokens().forEach(System.out::println);
  &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正则表达式&#34;&gt;#&lt;/a&gt; 正则表达式&lt;/h2&gt;
&lt;p&gt;基本的知识就不记录了 记录一些重要的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非贪婪匹配  &lt;code&gt;.*?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反向引用 要引用的用（）括起来，后面引用通过子表达式下标访问，如 \1，下标从 1 开始&lt;/li&gt;
&lt;li&gt;look ahead ?&amp;lt;= 符号，表示前面字符要满足 xxx，但不匹配 xxx&lt;/li&gt;
&lt;li&gt;look back  ?= 符号，表示后面字符要满足 xxx，但不匹配 xxx&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nfa与dfa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nfa与dfa&#34;&gt;#&lt;/a&gt; NFA 与 DFA&lt;/h2&gt;
&lt;p&gt;NFA：非确定性自动机  DFA: 确定性有穷自动机（Deterministic Finite Automaton)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320200945838.png&#34; alt=&#34;image-20230320200945838&#34;&gt;&lt;/p&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NFA 简洁易于理解，便于描述语言 L (A)&lt;/li&gt;
&lt;li&gt;DFA 易于判断 x 属于 L (A)，适合产生词法分析器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    其中 L (A) 是使当前自动机能进入接受状态的输入集合&lt;/p&gt;
&lt;p&gt;一般用 NFA 描述语言，用 DFA 实现词法分析器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现词法分析器的步骤：RE --&amp;gt; NFA --&amp;gt; DFA --&amp;gt; 词法分析器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如图： 根据 DFA 生成 RE 不需要掌握&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320201739378.png&#34; alt=&#34;image-20230320201739378&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;thompson构造法从re-到-nfa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#thompson构造法从re-到-nfa&#34;&gt;#&lt;/a&gt; Thompson 构造法（从 RE 到 NFA）&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315141912075.png&#34; alt=&#34;image-20230315141912075&#34;&gt;&lt;/p&gt;
&lt;p&gt;构造方法如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203523098.png&#34; alt=&#34;image-20230320203523098&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203542881.png&#34; alt=&#34;image-20230320203542881&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203600728.png&#34; alt=&#34;image-20230320203600728&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203629409.png&#34; alt=&#34;image-20230320203629409&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里是 “一边做构造 一边做证明”，只要保证从最基本的情况开始，每一步 NFA 的构造都保证只会有唯一的开始状态和接受状态即可。综合所有情况下的构造方法，可以看到这一点是正确的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203705399.png&#34; alt=&#34;image-20230320203705399&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320203721076.png&#34; alt=&#34;image-20230320203721076&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315142444609.png&#34; alt=&#34;image-20230315142444609&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于第三点中的运算符合运算分量 gpt 的解释：&lt;/p&gt;
&lt;p&gt;正则表达式语言 r 的运算符和运算分量：&lt;/p&gt;
&lt;p&gt;常见运算符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;|：或运算符，用于匹配两种情况中的一种。&lt;/li&gt;
&lt;li&gt;()：分组运算符，用于将多个运算分量组合起来形成一个单元，进行整体匹配或量词修饰。&lt;/li&gt;
&lt;li&gt;[]：字符类运算符，用于匹配方括号内任意一个字符。&lt;/li&gt;
&lt;li&gt;{}：重复运算符，用于指定运算分量重复出现的次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运算分量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符：指定具体的字符，例如 a、b、c 等。&lt;/li&gt;
&lt;li&gt;元字符：具有特殊意义的字符，例如 *、?、+ 等。&lt;/li&gt;
&lt;li&gt;点号：匹配除换行符以外的任意字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些运算符和运算分量可以组合在一起形成复杂的正则表达式，用于模式匹配和字符串搜索。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在每一步构造的时候，最多加一个起始状态，一个终止状态，总共进行了 | r | 次，所以第三点正确&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子：(a|b)*abb 的构造（考试会考）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315142551213.png&#34; alt=&#34;image-20230315142551213&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;子集构造法从nfa到dfa的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子集构造法从nfa到dfa的转换&#34;&gt;#&lt;/a&gt; 子集构造法 (从 NFA 到 DFA 的转换)：&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315142711571.png&#34; alt=&#34;image-20230315142711571&#34;&gt;&lt;/p&gt;
&lt;p&gt;举个例子： 可以看出简化了很多，并且遇到某一词法单元改走到那一步更加明确了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230610165958021.png&#34; alt=&#34;image-20230610165958021&#34;&gt;&lt;/p&gt;
&lt;p&gt;从 0 号状态开始，通过 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;ϵ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\epsilon&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ϵ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 转移可以到达 1,2,4,7 因此这 5 个状态合为一个状态 A，然后看 A 状态下可以通过 a 字符和 b 字符转移到哪些状态，即下图的规则三，然后利用规则二和规则一求可到达状态的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;ϵ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\epsilon&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ϵ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 闭包，这个过程循环下去直到结束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么时候算结束？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要 DFA 的某个状态所对应的 NFA 中的状态集合中含有接受状态，则 DFA 的这个状态是接受状态&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230610174226627.png&#34; alt=&#34;image-20230610174226627&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里 E 对应的 NFA 状态中有 10 号状态，而 10 号状态是 NFA 的接受状态，所以 E 也是接受状态&lt;/p&gt;
&lt;p&gt;三个基本规则如下 其中 s 是单个状态 T 是一个状态子集&lt;/p&gt;
&lt;p&gt;这个过程一定会有一个终点&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315143847385.png&#34; alt=&#34;image-20230315143847385&#34;&gt;&lt;/p&gt;
&lt;p&gt;原理如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230315143949988.png&#34; alt=&#34;image-20230315143949988&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复杂度：NFA 有 n 个状态 DFA 最多有 2 的 n 次方个状态 指数爆炸&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;dfa最小化算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dfa最小化算法&#34;&gt;#&lt;/a&gt; DFA 最小化算法&lt;/h2&gt;
&lt;p&gt;问题一： 如何定义等价状态&lt;/p&gt;
&lt;p&gt;想法一： 其中波浪号意为等价&lt;/p&gt;
&lt;p&gt;​					即 s 状态等价与 t 状态 当且仅当 任意 a 属于字母表 s 与 t 在 a 输入下发生转移后的状态是等价的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230320210948252.png&#34; alt=&#34;image-20230320210948252&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是这个定义是错误的 课件上有反例&lt;/p&gt;
&lt;p&gt;反过来是正确做法：&lt;/p&gt;
&lt;p&gt;核心思想&lt;strong&gt;做划分而非合并&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接受状态与非接受状态必定不等价 ，然后接着划分，直到不能再分为止。每一步做迭代 对一个状态集合的任意两个状态，如果在字符 a 的驱动下跑到了不同的组，则这两个状态一定不等价。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做之前要补齐死状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为这是所谓的 DFA 最小化算法 首先得保证最小化的是一个 DFA。比如下图中如果一开始只有红字部分，需要加上黄字部分补成一个 DFA。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230622220426917.png&#34; alt=&#34;image-20230622220426917&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果某个等价类包含初始状态，那么合并后这个等价类就是初始状态，如果某个等价类包含结束状态，那么合并后这个等价类就是合并状态。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image-20230610182322478.png&#34; alt=&#34;image-20230610182322478&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;复杂度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复杂度&#34;&gt;#&lt;/a&gt; 复杂度&lt;/h3&gt;
&lt;p&gt;太复杂了&lt;/p&gt;
&lt;h2 id=&#34;从dfa得到词法分析器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从dfa得到词法分析器&#34;&gt;#&lt;/a&gt; 从 DFA 得到词法分析器&lt;/h2&gt;
&lt;p&gt;需要消除死状态 ，避免徒劳消耗输入流&lt;/p&gt;
&lt;p&gt;模拟运行该 DFA, 直到无法继续为止（输入结束或状态无转移）：假设此时状态为 s，若 s 为接受状态，则识别成功，否则，回溯（包括状态与输入流）至最近一次经过的接受状态，识别成功；若没有经过任何接受状态，则报错（忽略第一个字符，重新开始）&lt;/p&gt;
&lt;p&gt;用在词法分析器场景下的 DFA 的最小化第一步不同，所有的接受状态一定不等价&lt;/p&gt;
&lt;h2 id=&#34;根据dfa得到re非重点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根据dfa得到re非重点&#34;&gt;#&lt;/a&gt; 根据 DFA 得到 RE (非重点)&lt;/h2&gt;
&lt;h2 id=&#34;lab-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lab-1&#34;&gt;#&lt;/a&gt; lab 1&lt;/h2&gt;
&lt;p&gt;编程一小时 配置环境一天的典型代表。&lt;/p&gt;
&lt;h3 id=&#34;实验输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验输入&#34;&gt;#&lt;/a&gt; 实验输入&lt;/h3&gt;
&lt;p&gt;本次实验的输入是一个包含了 &lt;code&gt;SysY&lt;/code&gt;  源代码的文件，你的程序需要接受一个文件名作为参数&lt;/p&gt;
&lt;h3 id=&#34;实验内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验内容&#34;&gt;#&lt;/a&gt; 实验内容&lt;/h3&gt;
&lt;h3 id=&#34;part1-词法分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#part1-词法分析&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD1wYXJ0MS0lRTglQUYlOEQlRTYlQjMlOTUlRTUlODglODYlRTYlOUUlOTA=&#34;&gt;Part1 词法分析&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本次实验你需要完成一个词法分析器对使用 SysY 语言书写的源代码进行词法分析，要求如下
&lt;ul&gt;
&lt;li&gt;本次实验要求通过&lt;strong&gt;标准错误输出（stderr, 如 System.err 等）&lt;/strong&gt;， 打印程序的 &lt;strong&gt;所有&lt;/strong&gt; 运行结果。&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;包含词法错误时&lt;/strong&gt;：对于包含词法错误的文件，你需要打印&lt;strong&gt;所有&lt;/strong&gt;错误信息，格式为： &lt;code&gt;Error type A at Line [lineNo]:[errorMessage]&lt;/code&gt; ，其中 &lt;code&gt;lineNo&lt;/code&gt;  为出错的 &lt;code&gt;token&lt;/code&gt;  首个字符所在行的行号， &lt;code&gt;errorMessage&lt;/code&gt;  可自行定义，本实验不做要求，只要冒号前的信息正确即可。&lt;/li&gt;
&lt;li&gt;当&lt;strong&gt;不包含词法错误时&lt;/strong&gt;：对于没有任何词法错误的文件，你需要打印所有识别到的 &lt;code&gt;Tokens&lt;/code&gt;  信息，具体输出格式可以参见&lt;strong&gt;样例一&lt;/strong&gt;。特别要求：输出时忽略所有注释，对十六进制和八进制数字常量输出 &lt;code&gt;token&lt;/code&gt;  文本时需输出其十进制的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;样例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例&#34;&gt;#&lt;/a&gt; 样例&lt;/h3&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-SysY&#34;&gt;int main() 
&amp;#123;
   // line comment
   /* 
     block comment
   */
   int i = 0x1;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;IDENT&lt;/span&gt; main at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;L_PAREN&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;R_PAREN&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;L_BRACE&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;INT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;IDENT&lt;/span&gt; i at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;ASSIGN&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;INTEGER_CONST&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;SEMICOLON&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;R_BRACE&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; at &lt;span class=&#34;token class-name&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解释：&lt;/p&gt;
&lt;p&gt;每行输出一个 token 的信息，输出格式为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[token类型] [token文本] at Line [此token首个字符所在行的行号].复制到剪贴板复制失败复制成功!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;输出时忽略所有注释，对十六进制和八进制数字常量输出 token 文本时需输出其十进制的值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特别注意，遇到如 &lt;code&gt;int 2i = 08;&lt;/code&gt;  这种输入时，请将 &lt;code&gt;2i&lt;/code&gt;  识别为 &lt;code&gt;INTEGER_CONST&lt;/code&gt;  和 &lt;code&gt;IDENT&lt;/code&gt; ， &lt;code&gt;08&lt;/code&gt;  识别为两个 &lt;code&gt;INTEGER_CONST&lt;/code&gt; ，这种我们不认为是词法错误，这种错误将在后面的实验中处理&lt;/p&gt;
&lt;h3 id=&#34;样例二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例二&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD0lRTYlQTAlQjclRTQlQkUlOEIlRTQlQkElOEM=&#34;&gt;样例二&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-SysY&#34;&gt;int main()&amp;#123;
  int i = 1;
  int j = ~i;
&amp;#125;复制到剪贴板复制失败复制成功!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error type A at Line 3: Mysterious character &amp;quot;~&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;实验过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验过程&#34;&gt;#&lt;/a&gt; 实验过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一个难题就是怎么在 windows 里的 IDEA 编程，但是运行和调试环境是虚拟机中的 ubuntu20.04+lab0 配置好的环境 想法就是用 IDEA 的 remote deployment 功能，在网上搜索教程后发现我的 IDEA 竟然没有这个功能，原因是我的是 community 版本，所以卸载了之前的 IDEA 装了专业版。然后 remote deployment 原理应该是使用 ssh 连接，虽然虚拟机是装在电脑里，但其实和与远程服务器相连原理是一样的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后编写.g4 文件比较顺利，生成了 SysYlexer.java 文件，但是在 main 函数中使用 SysYlexer 类也遇见了困难，首先是导入 antlr，IDEA 一直报错无法解析 symbol antlr，但是 lab0 中我应该是配好了 antlr 环境的，不知道为什么，所以还是用 IDEA 的 libraries 中导入了 antlr 才好   (回来再看，IDEA 是可以导入本地的 jar 包的)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三个难题就是删除 SysYLexer 中自带的 ErrorListeners, 使用自己编写的 errorlisteners，这里蚂蚁老师上课应该是没有讲的，所以也是无从下手。后面借助搜索引擎和 ChatGPT 学了很久才会。原理很简单，先放上自己实现的 myErrorListener 如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; myErrorListener &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BaseErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;syntaxError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Recognizer&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; recognizer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; offendingSymbol&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; charPositionInLine&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;RecognitionException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error type A at Line &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;line&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;: &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			error &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;主要是重写了 syntaxError 这个函数，他里面的参数应该是报错相关的信息，这里只用到了 line（出错的行）和 msg（具体的报错信息），其它的是什么意思忘记了。应该是每出现一个错误就会调用一次 syntaxError 函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后放一下 main 函数部分：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;org&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;antlr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;v4&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;runtime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Collection&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token import&#34;&gt;&lt;span class=&#34;token namespace&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;util&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Main&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; error &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input path is required&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; source &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;CharStream&lt;/span&gt; input &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;CharStreams&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fromFileName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;source&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;SysYLexer&lt;/span&gt; sysYLexer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SysYLexer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;removeErrorListeners&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; tokens &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAllTokens&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; rulenames &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sysYLexer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuleNames&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Token&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; tokens&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tokenType &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rulenames&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tokenText &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;toDemical&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getText&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tokenLine &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tokenType &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tokenText &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; at Line &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;tokenLine&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token char&#34;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; myErrorListener &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BaseErrorListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;syntaxError&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Recognizer&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; recognizer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; offendingSymbol&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; charPositionInLine&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; msg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;								&lt;span class=&#34;token class-name&#34;&gt;RecognitionException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Error type A at Line &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;line&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;: &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			error &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;toDemical&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;0[0-7]+&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;0[xX][0-9a-fA-F]+&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; text&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;反正做的时候除了文档里给的框架几乎每一行都想了很久。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码写完后上传又有问题，可能是之前 make compile , make clean 太多次了，导致压缩包超过了 10M 的限制，后来参考助教给的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xNzA4&#34;&gt;记一次删除 Git 记录中的大文件的过程 - HollisChuang&#39;s Blog&lt;/span&gt; 按里面的步骤一步步做才完成上传，比较幸运的是一次就 AC 了。（至于为什么压缩包会那么大，我的理解是改动了太多次代码 make compile 了太多次，且每次 git 都会保存版本信息以便于回退，所以改动的所有版本其实都还在 git 保存的隐藏文件夹下的，所以整个目录就会变得很大了）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编译原理" />
        <updated>2023-03-09T02:58:10.000Z</updated>
    </entry>
</feed>
