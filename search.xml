<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++：移动语义与右值引用</title>
    <url>/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="C-的移动语义与右值引用"><a href="#C-的移动语义与右值引用" class="headerlink" title="C++的移动语义与右值引用"></a>C++的移动语义与右值引用</h1><span id="more"></span>

<p><img src="/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/preview.jpg" alt="Gaze"></p>
<h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><h3 id="为何需要移动语义"><a href="#为何需要移动语义" class="headerlink" title="为何需要移动语义"></a>为何需要移动语义</h3><p>假设有如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; vstr;<span class="comment">// build up a vector of 20000 strings,each of 1000 characters</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">vstr_copy1</span><span class="params">(vstr)</span></span>;</span><br></pre></td></tr></table></figure>

<p>为了初始化 vstr_copy1 先调用vector的复制构造函数，使用new给20000个string对象分配内存，而每个string对象又调用string的复制构造函数，为1000个字符分配内存。这很浪费时间，但如果vstr与vstr_copy1都需要使用，这很难避免。</p>
<p>可有时候这样不太妥当，例如vstr不再被使用时。例如如下定义的函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">allcaps</span><span class="params">(<span class="type">const</span> vector&lt;string&gt; &amp; vs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;string&gt; temp;</span><br><span class="line">    <span class="comment">//让temp存储vs中string的大写版本的代码</span></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并这样使用它：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; vstr;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">vstr_copy1</span><span class="params">(vstr)</span></span>; <span class="comment">//#1</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">vstr_copy2</span><span class="params">(allcaps(vstr))</span></span>; <span class="comment">//#2</span></span><br></pre></td></tr></table></figure>

<p>allcaps()创建了对象temp，该对象管理着20000000个字符；语句二使用vector和string的复制构造函数创建了一个temp的副本，然后删除了temp，做了大量无用功。如果编译器直接把temp对数据的所有权转让给vstr_copy2，将会更好。</p>
<p>实际上，我们可以把实际内容保留在原来地方，而之修改记录，这就是移动语义的本质，它避免了移动原始数据，而转为修改记录。</p>
<p>要实现移动语义，需要采取某种方式，让编译器知道什么时候需要复制。这就是右值引用发挥作用的地方。可定义两个构造函数，其中一个是常规复制构造函数，它使用const左值引用作为参数，如语句#1。另一个是移动构造函数，它使用右值引用作为参数，该引用关联到右值实参，如语句#2中allcaps(vstr)的返回值。移动构造函数可能修改其实参，这意味着右值引用参数不应是const。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>直接将变量的值赋值为参数的变量值，如果变量为指针，为了防止double free，还需将参数的指针改为nullptr。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Useless(Useless &amp;&amp; f) : n(f.n)</span><br><span class="line">&#123;</span><br><span class="line">	++ct;</span><br><span class="line">	pc = f.pc;</span><br><span class="line">	f.pc = nullptr;</span><br><span class="line">	f.n = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="强制移动"><a href="#强制移动" class="headerlink" title="强制移动"></a>强制移动</h3><p>移动构造函数和移动赋值运算符使用右值，如果要让它们使用左值，该怎么办？例如，将一个左值变量赋值给一个对象，并立刻丢弃这个变量。此时可以使用头文件 utility 中声明的函数std::move。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>git操作</title>
    <url>/2022/10/01/Git%E5%AD%A6%E4%B9%A001-%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Git学习01-基本操作"><a href="#Git学习01-基本操作" class="headerlink" title="Git学习01- 基本操作"></a>Git学习01- 基本操作</h1><span id="more"></span>

<p><img src="/2022/10/01/Git%E5%AD%A6%E4%B9%A001-%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E4%B8%89%E5%8F%B6.jpg" alt="三叶"></p>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>版本库(repository)是一个目录，这个目录里的所有文件都可以被Git管理起来，每个文件的修改、删除、Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以还原。</p>
<p>创建版本库步骤：</p>
<ol>
<li>选择一个合适地方，创建一个空目录</li>
<li>通过 <code>git init</code> 命令把这个目录变成Git 可以管理的仓库</li>
</ol>
<h2 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h2><p>把一个文件放到仓库只需要两步（如添加一个readme.txt文件）：</p>
<ol>
<li><p><code>git add readme.txt</code>  用命令git add告诉Git， 把文件添加到暂存区。可反复多次使用，添加多个文件。</p>
</li>
<li><p><code>git commit -m &quot;wrote a readme file&quot;</code> </p>
<p>git commit告诉Git, 把文件提交到仓库。-m 后面输入的是本次提交的说明，注意说明一定要有意义，如告诉仓库本次提交做了什么事，方便后续的版本控制。</p>
</li>
</ol>
<h2 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a>查看工作区状态</h2><p>要查看当前工作区的状态，使用 <code>git status</code> 命令</p>
<p>如果有文件被修改过，你又想知道修改了什么 用<code>git diff filename</code> 查看修改的内容。git diff 命令可以告诉你当前工作区的文件和仓库的有什么不同。</p>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ul>
<li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。版号只要前几位就行了，只要能识别，也可以用HEAD和^表示回退到哪一版。</li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>重返过去时未来的记录用git log 就看不到了。要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ul>
<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- filename</code>。</li>
<li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;filename&gt;</code>，就回到了场景1，第二步按场景1操作。</li>
<li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>
</ul>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>如果你在文件管理器中把某个文件删了，或者用<code>rm</code>命令删了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure>

<p>这个时候，Git知道你删了文件，因此，工作区和版本库就不一致了。</p>
<p>现在有两种情况。</p>
<ol>
<li><p>确实要从版本库中删除该文件，那就用命令 <code>git rm</code> 删掉 并且git commit</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br></pre></td></tr></table></figure>

<p>tips：先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的。</file></file></p>
</li>
<li><p>删除错了，要从版本库中把误删的文件恢复到最新版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure>

<p>git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以一键还原。</p>
</li>
</ol>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>远程库既可以充当本地仓库的备份，又可以让其他人通过该仓库来协作，可谓一举多得。</p>
<p>创建远程库并将本地与远程库连接。</p>
<p>步骤：</p>
<ol>
<li><p>登录github 创建一个新的仓库，复制该仓库的SSH</p>
</li>
<li><p>在本地仓库上运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:maoding1/learngit.git</span><br></pre></td></tr></table></figure>

<p>(后面的一大串是复制的SSH)使本地仓库与远程库连接。</p>
<p>git 会把远程库的名字默认设为origin</p>
</li>
<li><p>把本地内容推送到远程库上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>-u 参数实际上设置了远程仓库的默认值（比如有多个远程仓库） 之后就可以简化git pull 和 git push 的命令</p>
</li>
</ol>
<p>现在只要本地做了提交，就可以通过 <code>git push origin master</code> 把本地分支的修改推送到github</p>
<p>tips：要删除远程库 可以用<code>git remote rm &lt;name&gt;</code>命令，但这只是解除了本地与远程的绑定关系，要真正删除远程库，需要登陆github手动删除。</p>
<h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>知道仓库的SSH 后，通过<code>git clone SSH</code>命令克隆到本地</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux—01-Linux安装常识</title>
    <url>/2022/09/30/Linux%E2%80%9401-Linux%E5%AE%89%E8%A3%85%E5%B8%B8%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Linux系统的安装"><a href="#Linux系统的安装" class="headerlink" title="Linux系统的安装"></a>Linux系统的安装</h1><span id="more"></span>

<p><img src="/2022/09/30/Linux%E2%80%9401-Linux%E5%AE%89%E8%A3%85%E5%B8%B8%E8%AF%86/preview.jpg" alt="芝士辉夜"></p>
<h2 id="交换分区"><a href="#交换分区" class="headerlink" title="交换分区"></a>交换分区</h2><p>直接从物理内存读写数据比从硬盘读写快的多，然而物理硬盘是有限的，这样就使用到了虚拟内存。虚拟内存是为了满足物理内存的不足而提出的一种策略，他是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为<strong>交换分区（swap分区）</strong>。  </p>
<p>内核会将暂时不用的内存信息写到交换分区，使物理内存得到释放并用于其它用途，当需要原始内容时，这些信息会被重新从交换分区读入物理内存。</p>
<p>Linux的内存管理采用分页存取机制，为了保证物理内存能得到充分利用，内核会在适当时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。</p>
<h2 id="分区命名"><a href="#分区命名" class="headerlink" title="分区命名"></a>分区命名</h2><p>Linux系统使用字母和数字的组合来指代硬盘分区，该命名方案是基于文件的，文件名的格式为*&#x2F;dev&#x2F;xxyN* (比如&#x2F;dev&#x2F;sda1分区)</p>
<p>&#x2F;dev:这是Linux 系统中所有设备文件所在的目录名。因为分区位于硬盘上，而硬盘是设备，所以这些文件代表了在&#x2F;dev上所有可能的分区</p>
<p>xx：分区名的前两个字母表示分区所在设备的类型，通常是hd（IDE）硬盘或sd（SCSI硬盘）</p>
<p>y:这个字母表示分区所在的设备。例如，&#x2F;dev&#x2F;hda（第一个IDE硬盘）或&#x2F;dev&#x2F;sdb(第二个SCSI硬盘)</p>
<p>N：最后的数字N代表硬盘上的第几个分区。</p>
<h2 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h2><p>Linux系统中的每一个分区都是构成支持一组文件和目录 所必需的存储区的一部分。它是通过挂载来实现的，挂载 是将分区关联到某一目录的过程，挂载分区使起始于这个 指定目录（称为挂载目录）的存储区能够被使用。 </p>
<p> 例如，如果分区&#x2F;dev&#x2F;sda5被挂载在目录&#x2F;usr上，这意味着 所有在&#x2F;usr下的文件和目录在物理上位于&#x2F;dev&#x2F;sda5。因此 文件&#x2F;usr&#x2F;bin&#x2F;cal被保存在分区&#x2F;dev&#x2F;sda5上，而文件 &#x2F;etc&#x2F;passwd却不是。 </p>
<p>&#x2F;usr目录下的目录还有可能是其它分区的挂载目录。例如， 某个分区（如&#x2F;dev&#x2F;sda7）可以被挂载到&#x2F;usr&#x2F;local目录下， 这意味着文件&#x2F;usr&#x2F;local&#x2F;man&#x2F;whatis将位于分区&#x2F;dev&#x2F;sda7 上，而不是分区&#x2F;dev&#x2F;sda5上。</p>
<h2 id="分区规划"><a href="#分区规划" class="headerlink" title="分区规划"></a>分区规划</h2><p>合理的分区规划 ：</p>
<p>• swap分区：实现虚拟内存，建议大小是物理内存 的1～2倍；</p>
<p> • &#x2F;boot分区：建议大小最少为200MB； • &#x2F;usr分区：用来存放Linux系统中的应用程序， 其相关数据较多，建议大小最少为8GB； </p>
<p>• &#x2F;var分区：用来存放Linux系统中经常变化的数 据以及日志文件，建议大小最少为1GB； </p>
<p>• &#x2F;分区：Linux系统的根目录，所有的目录都挂在 这个目录下面，建议大小最少为1GB；</p>
<p> • &#x2F;home分区：存放普通用户的数据，是普通用户 的宿主目录，建议大小为剩下的空间。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 学习</title>
    <url>/2022/10/23/Maven-%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="Maven-学习"><a href="#Maven-学习" class="headerlink" title="Maven  学习"></a>Maven  学习</h1><span id="more"></span>

<p>​																<img src="/2022/10/23/Maven-%E5%AD%A6%E4%B9%A0/rebecca.jpg" alt="芝士rebecca"></p>
<h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><p>Maven是Apache组织下一个比较著名的开源项目，主要服务于基于java平台的项目构建，依赖管理和项目信息管理。</p>
<p>类比做糖醋排骨，传统需要自己配置酱料，比如加入多少克糖，多少克水，多少克… 而现在只用去超市购买酱料包就好。Maven项目省去了开发者去各大网站下载jar包并解决相互间复杂依赖关系的时间。除此之外，除了编写源代码，我们有相当一部分时间花在了编译，运行单元测试，生成文档，打包和部署等工作上，这就是构建。手工做这些工作的成本太高了，于是可以用软件的方法让这一系列工作完全自动化，使得繁琐的步骤能够自动完成，很快得到最终结果。</p>
<h3 id="项目构建工具"><a href="#项目构建工具" class="headerlink" title="项目构建工具"></a>项目构建工具</h3><p>Ant构建： 2000年左右出现的构建工具，当时是最流行的java构建工具，不过它的XML脚本编写格式让XML文件特别大。对工程构建过程中的过程控制特别好。</p>
<p>Maven构建：项目对象模型，通过其描述信息来管理项目的构建，报告和文档的软件项目管理工具，填补了Ant的缺点。Maven第一次支持了从网络上下载的功能。Maven专注的是依赖管理，使用java编写。</p>
<p>Gradle：谷歌的御用Android管理工具</p>
<p>Ant比较老，目前Maven使用较多</p>
<h2 id="Maven的四大特性"><a href="#Maven的四大特性" class="headerlink" title="Maven的四大特性"></a>Maven的四大特性</h2><h3 id="依赖管理系统"><a href="#依赖管理系统" class="headerlink" title="依赖管理系统"></a>依赖管理系统</h3><p>Maven为java世界引入了一个新的依赖管理系统——jar包管理。jar升级时修改配置文件即可。在java世界中，可以用 <strong><em>groupId</em> **   、</strong><em>artifactId</em>**   、<em><strong>version</strong></em> 组成的Coordination（坐标）唯一标识一个依赖</p>
<p>eg：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span> javax.servlet <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> //当前Maven项目隶属的实际项目或公司名称（jar包所在仓库路径）</span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> javax.servlet-api <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> //定义实际项目中的一个Maven模块/项目名</span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span> 3.1.0 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> //Maven项目当前所处的版本</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="多模块构建"><a href="#多模块构建" class="headerlink" title="多模块构建"></a>多模块构建</h3><p>可以将一个项目分解为多个模块。</p>
<p>在Maven中定义一个parent POM作为一组module的聚合POM，在该POM中可以使用<modules>标签来定义一组子模块。parent POM中的build配置和依赖配置都会继承给子module。</modules></p>
<h3 id="一致的项目结构"><a href="#一致的项目结构" class="headerlink" title="一致的项目结构"></a>一致的项目结构</h3><p>Maven理念： Convension over configuration (约定大于配置)。其制定了一套项目目录结构作为标准的java项目结构，解决不同IDE带来的文件目录不一致问题。</p>
<h3 id="一致的构建模型和插件机制"><a href="#一致的构建模型和插件机制" class="headerlink" title="一致的构建模型和插件机制"></a>一致的构建模型和插件机制</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	......</span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入插件</p>
<h2 id="Maven项目结构"><a href="#Maven项目结构" class="headerlink" title="Maven项目结构"></a>Maven项目结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- src</span><br><span class="line">	- main                   ：程序功能代码</span><br><span class="line">		- Java               ：java代码</span><br><span class="line">		- resource           ：资源代码、配置代码</span><br><span class="line">	- test                   ：测试代码</span><br><span class="line">		- Java               ：单元测试java代码</span><br><span class="line">		- resource           ：资源代码、配置代码</span><br><span class="line">	- pom.xml                ：项目对象模型</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不用IDE的话上述结构都需要手动创建</p>
<p>pom中的标签具体作用可以参考 <a href="https://www.runoob.com/maven/maven-pom.html">https://www.runoob.com/maven/maven-pom.html</a></p>
<h2 id="在IDEA中使用Maven"><a href="#在IDEA中使用Maven" class="headerlink" title="在IDEA中使用Maven"></a>在IDEA中使用Maven</h2><p>IDEA中默认捆绑了Maven 可以在设置里更改Maven有关的配置</p>
<p>创建Maven项目：文件 -&gt; 新建 -&gt; 项目 构建系统选Maven（上述是常规Maven项目）</p>
<p>​										可以选择生成器中的Maven中的Archetype选择模板（如quickstart）</p>
<h2 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h2><p>对于Maven来说，仓库只有两类： 本地仓库和远程仓库</p>
<p>Maven根据坐标寻找构件的时候，它首先会查看本地仓库，如果本地仓库存在，则直接使用；如果本地没有，Maven就回去远程仓库查找，再下载到本地仓库再使用。如果本地和远程都没有就会报错。</p>
<p>远程仓库分为3种：</p>
<ol>
<li><p>中央仓库：默认下载jar包的地方，在国外，包含了2000多个开源项目，每天接收1亿次以上的访问。</p>
</li>
<li><p>私服：一种特殊的远程仓库，它是架设在局域网内的仓库服务。私服代理广域网上的远程仓库，供局域网内的Maven用户使用。当Maven需要下载构件时，它去私服当中找，如果私服没有，则从外部远程仓库下载，并缓存在私服上，再为maven提供。此外，一些无法从外部仓库下载的构件也能从本地上传到私服提供局域网中其他人使用。（在公司或学校内网中自己写的构件就可以上传到私服让别人使用了） 私服优点： 节省自己的外网带宽、 加速Maven构建、部署第三方控件、提高稳定性、降低中央仓库的负荷</p>
</li>
<li><p>其他公共库</p>
<p>如阿里云仓库，国内地址下载比中央仓库快。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习02-分支管理</title>
    <url>/2022/10/02/Git%E5%AD%A6%E4%B9%A002-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Git学习02-分支管理"><a href="#Git学习02-分支管理" class="headerlink" title="Git学习02-分支管理"></a>Git学习02-分支管理</h1><span id="more"></span>

<p><img src="/2022/10/02/Git%E5%AD%A6%E4%B9%A002-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/%E8%BD%BB%E9%9F%B3%E5%B0%91%E5%A5%B3.jpg" alt="轻音少女"></p>
<h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>查看分支 ： <code>git branch</code></p>
<p>创建分支： <code>git branch &lt;name&gt;</code></p>
<p>切换分支： <code>git switch &lt;name&gt;</code></p>
<p>创建+切换分支: <code>git switch -c &lt;name&gt;</code></p>
<p>合并某分支到当前分支 ： <code>git merge &lt;name&gt;</code> 这里的name使某分支的name</p>
<p>删除分支： <code>git branch -d &lt;name&gt;</code></p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>eg：当你创建了一个feature1分支 其在master分支上添加了一些内容并进行提交，此时切换会master分支并使用 <code>git merge feature1</code> 合并分支是不会有问题的（Git 会在底层移动master的指针到feature1上）。但如果你在feature1上修改了某个文件并提交，在切换会master分支后修改了同一份文件并提交，那么此时git merge就会报错了。</p>
<p>此时可以：</p>
<ol>
<li>使用<code>git status</code>查看冲突的文件（如果你改了很多，分不清哪里冲突了）</li>
<li>手动解决冲突 </li>
<li>再提交</li>
<li>最后删除分支（如删除feature1)</li>
</ol>
<p>使用 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>

<p>可以形象地查看分支的合并情况（Git 会生成一副图）</p>
<h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p><code>git merge --no-ff -m &quot;commit message&quot; &lt;branch name&gt;</code></p>
<p>通常 ，合并分支时，Git 会用 Fast forward模式（移动指针） ，这种模式下，删除分支后，会丢掉分支信息</p>
<p>如果要强制禁用Fast forward模式， Git就会再merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>–no–ff 参数表示禁用Fast forward</p>
<h2 id="git的更多操作"><a href="#git的更多操作" class="headerlink" title="git的更多操作"></a>git的更多操作</h2><p>Git 还有许多高级功能。如暂时储存当前工作、多人协作、标签管理等。考虑到目前还接触不到 ，上述功能等需要使用了再来学习更新吧。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>STL学习-01-智能指针与vector</title>
    <url>/2022/10/05/STL%E5%AD%A6%E4%B9%A0-01-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8Evector/</url>
    <content><![CDATA[<h1 id="c-的标准模板库"><a href="#c-的标准模板库" class="headerlink" title="c++ 的标准模板库"></a>c++ 的标准模板库</h1><span id="more"></span>

<p><img src="/2022/10/05/STL%E5%AD%A6%E4%B9%A0-01-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8Evector/%E9%9B%A8%E5%A4%A9-%E5%A5%B3%E5%AD%A9-%E5%95%86%E5%BA%97.jpg" alt="雨天 女孩 商店"></p>
<h2 id="智能指针模板类"><a href="#智能指针模板类" class="headerlink" title="智能指针模板类"></a>智能指针模板类</h2><p>智能指针是类似于指针的类对象，比较方便内存管理。传统的指针必须时时刻刻记得new与delete的配套使用，很容易造成内存泄漏。而智能指针实际上类似于一个类，有自己的析构函数，所以编译器再不需要智能指针时便可以自动调用其析构函数释放内存，也就是可以略去delete操作。</p>
<h3 id="使用智能指针"><a href="#使用智能指针" class="headerlink" title="使用智能指针"></a>使用智能指针</h3><p>要创建智能指针对象，必须包含头文件 memory 然后使用通常的模板语法来实例化所需类型的指针。</p>
<p>声明： <code> template &lt;class X&gt; class auto_ptr</code></p>
<p>使用eg： <code> auto_ptr&lt;double&gt; pd(new double);</code></p>
<p>​					 <code>auto_ptr&lt;string&gt; ps(new string);</code></p>
<p>注意： 智能指针模板位于名称空间std中。</p>
<h3 id="有关智能指针的注意事项"><a href="#有关智能指针的注意事项" class="headerlink" title="有关智能指针的注意事项"></a>有关智能指针的注意事项</h3><p>c++目前有三种常见智能指针：auto_ptr, unique_ptr,shared_ptr</p>
<p>在使用智能指针时，可能会遇到问题，比如如果两个智能指针指向同一块内存区域，则程序会删除同一个对象两次，这是会造成极大错误的。为避免这种问题，方法有多种。</p>
<ul>
<li>建立所有权概念，对于特定对象，只有一个智能指针可以拥有他。 这是用于auto_ptr 和 unique_ptr的策略，但unique_ptr 更严格</li>
<li>创建智能更高的指针，跟踪引用特定对象的智能指针数，这称为引用计数。当最后一个指针过期时，才调用delete。这是shared_ptr的策略</li>
<li>执行深拷贝</li>
</ul>
<p>auto_ptr 和 unique_ptr的区别：</p>
<p>​		两个auto_ptr指向同一块内存区域时，可以通过编译，但可能在运行时报错。两个unique_ptr 指向同一块内存区域时，会在编译阶段就报错（除非赋值给其中一个unique_ptr 的另一个unique_ptr 是一个用完即毁的智能指针，如某一函数中new出来的unique_ptr的返回）。</p>
<h2 id="模板类vector"><a href="#模板类vector" class="headerlink" title="模板类vector"></a>模板类vector</h2><h3 id="创建vector"><a href="#创建vector" class="headerlink" title="创建vector"></a>创建vector</h3><p>要创建vector模板对象， 可使用通常的<type> 表示法来指出要使用的类型。另外，vector模板使用动态内存分配，因此可以用初始化参数指出需要多少元素。</type></p>
<p><code> vector&lt;int&gt; ratings(5);  // a vector of 5 ints</code></p>
<h3 id="可对vector执行的操作"><a href="#可对vector执行的操作" class="headerlink" title="可对vector执行的操作"></a>可对vector执行的操作</h3><p>size()—— 返回容器中元素数目        swap()—— 交换两个容器的内容             begin()——返回一个指向容器中第一个元素的 <em><strong>迭代器</strong></em>      end() 返回一个表示超过容器尾的<em><strong>迭代器</strong></em></p>
<p>什么是迭代器？ 它是一个广义的指针，可以对其执行类似指针的操作，如解除引用*、递增++</p>
<p>STL的每个容器类都定义了一个合适的迭代器，该迭代器的类型是一个名为iterator的typedef，作用域为整个类。如要为vector的 double类型规范声明一个迭代器，可以这样做：</p>
<p>​	<code>vector&lt;double&gt;::iterator pd;//  pd an iterator</code></p>
<p>假设scores是一个vector<double>对象，可以利用好auto关键字简化书写：</double></p>
<p><code>auto pd = scores.begin()</code></p>
<p>vector 还支持push_back() (内存不够会自动扩充容器), erase() insert()等方法</p>
<h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><p>有两个具有代表性的STL函数：for_each() 和sort() 。</p>
<p>for_each()函数可用于很多容器类，它接受3个参数。前两个是定义容器中的迭代器，最后一个是一个函数指针。for_each() 函数将被指向的函数应用于容器区间中的各个元素，可以用for_each() 函数来代替for循环。</p>
<p>eg: <code>for_each(books.begin(), books.end(), ShowReview);</code></p>
<p>sort() 函数也要求函数支持随机访问。该函数接收两个定义区间的迭代器参数。如果容器中的元素有内置的&lt;运算符进行值比较，可以直接使用。如果容器中的元素是用户定义的类对象，则用户需要利用重载定义&lt;运算符。</p>
<p>还有第二个版本的sort()函数，它接收第三个参数，该参数是一个函数指针，不一定是用于比较的operator&lt;()，而是一个返回值可转换为bool类型的函数，它接收两个容器中的元素，返回为false表示两个参数的顺序不正确。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>STL C++</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫学习</title>
    <url>/2023/01/25/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="python爬虫学习总结"><a href="#python爬虫学习总结" class="headerlink" title="python爬虫学习总结"></a>python爬虫学习总结</h1><p>学习python爬虫的一些笔记</p>
<span id="more"></span>

<h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><p>requests模块流程：</p>
<pre><code>1. 指定url
2. 发起请求 response = requests.get(url)
3. 获取数据 page_source = response.text()
4. 存储数据 文件操作/数据库操作
</code></pre>
<p>参数tips：params是用来发送查询字符串，而data是用来发送正文的。post与get方法的特性是：这两种参数post（）方法都可以用，get方法只能发查询字符串，不能发送正文</p>
<p>text返回字符串 content返回二进制（爬取图片可用）  json返回对象</p>
<p>分页爬取：</p>
<p>​	如果是ajax，在检查、网络、xhr中查看</p>
<p>​	如果是新链接，可以使用正则表达式匹配url</p>
<p>如果是用ajax的包：要注意的：</p>
<ul>
<li>看请求方法 是GET 还是 POST。。。</li>
<li>看响应头的content-type 选择reponse.text() 或 reponse.json()</li>
<li>看负载中带的参数</li>
</ul>
<p>中文乱码问题（文件编码格式为utf8 json.dump时ensure acill选项关闭）</p>
<p>什么是ajax? （根据用户行为重新渲染界面。 不修改url 在检查-网络-XHR中查看具体信息）</p>
<h2 id="bs4-数据解析"><a href="#bs4-数据解析" class="headerlink" title="bs4 数据解析"></a>bs4 数据解析</h2><p>bs4数据解析的原理：</p>
<p>1.实例化一个BeautifulSoup对象 并且将页面原码数据加载到该对象中</p>
<p>2.通过调用bs 对象中相关的属性或方法进行标签定位和数据提取</p>
<p>如何实例化beautifulsoup对象：</p>
<ol>
<li><p>将本地的html文档中的数据加载到该对象中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>()</span><br><span class="line">soup = BeautifulSoup(fp,<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>将互联网上获取的页面源码加载到该对象中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page_text = response.text</span><br><span class="line">soup = BeautifulSoup(page_text,&#x27;lxml&#x27;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>提供的用于数据解析的方法和属性：</p>
<p>soup.tagname 返回html中第一次出现的tagname标签</p>
<p>soup.find(‘tagname’) 等同于soup.tagname</p>
<p>soup.find(‘tagname’, class &#x3D; ‘classname’) 定义属性位置， class可以替换为id attr</p>
<p>soup.find_all(‘tagname’) 找到符合要求所有标签 返回列表</p>
<p>soup.select(‘.tang’)  参数为某种选择器（id class 标签），返回一个列表</p>
<p>soup.select(‘.tang &gt; ul &gt; li &gt; a’)层级选择器，返回一个列表</p>
<p>soup.selest(‘.tang &gt; ul a’) &gt;号表示一个层级，空格表示多个层级</p>
<p>怎么获取标签之间的文本数据：</p>
<p>使用	soup.a.text&#x2F;string&#x2F;get_text() 方法</p>
<pre><code>-   text/get_text(): 可以获取某一个标签中所有的文本内容（多套几层也能得到）
-   string：获取标签下直系的文本内容
</code></pre>
<p>怎么获取标签的属性值：</p>
<p><code>soup.select(&#39;tang &gt; ul &gt; li &gt; a&#39;)[0][&#39;href&#39;]</code>直接获得a标签中的herf属性值</p>
<h2 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h2><p>xpath解析： 最常用且最便捷高效的一种解析方式。</p>
<p>xpath解析原理：</p>
<pre><code>1. 实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。
2. 调用etree对象中的xpath方法结合xpath表达式实现标签的定位和内容的捕获。
</code></pre>
<p>环境安装：</p>
<pre><code>- pip install lxml
</code></pre>
<p>如何实例化etree对象 </p>
<p>​	from lxml import etree</p>
<ol>
<li><p>将本地的html文档中的源码数据加载到etree对象中：</p>
<p><code> etree.parse(filePath)</code></p>
</li>
<li><p>可以将从互联网上获取的源码数据加载到该对象中</p>
<p><code>etree.HTML(&#39;page_text&#39;)        -xpath(&#39;xpath表达式&#39;)</code></p>
</li>
</ol>
<p>&#x2F;表示一个层级  &#x2F;&#x2F;表示多个层级 </p>
<p>路径后加[ @ 属性名]精确定位 如<code>xx_list = tree.xpath(&#39;//div[@class=&#39;song&#39;]&#39;)</code></p>
<p>中括号内加数字代表取第几个（索引下标从1开始）<code>xx_list[0]</code></p>
<p>获取文本: 定位后加&#x2F;text()</p>
<h2 id="中文出现乱码常见的处理方法"><a href="#中文出现乱码常见的处理方法" class="headerlink" title="中文出现乱码常见的处理方法"></a>中文出现乱码常见的处理方法</h2><p>两种常见方法，一般能解决所有中文乱码问题</p>
<ol>
<li><p>对爬下来的整个数据改变编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对出现问题的对象单独进行编码与解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img_name = img_name.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="selenium模块"><a href="#selenium模块" class="headerlink" title="selenium模块"></a>selenium模块</h2><h3 id="selenium模块与爬虫之间具有怎样的关联？"><a href="#selenium模块与爬虫之间具有怎样的关联？" class="headerlink" title="selenium模块与爬虫之间具有怎样的关联？"></a>selenium模块与爬虫之间具有怎样的关联？</h3><ul>
<li>便捷的获取网站中动态加载的数据</li>
<li>便捷实现模拟登录</li>
</ul>
<h3 id="什么是selenium模块"><a href="#什么是selenium模块" class="headerlink" title="什么是selenium模块"></a>什么是selenium模块</h3><p>基于浏览器自动化的一个模块。 （编写代码让浏览器完成自动化操作）</p>
<h3 id="selenium使用流程："><a href="#selenium使用流程：" class="headerlink" title="selenium使用流程："></a>selenium使用流程：</h3><ul>
<li>环境安装：pip install selenium</li>
<li>下载一个浏览器的驱动程序</li>
<li>实例化一个浏览器对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.edge.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="comment"># 实例化一个浏览器对象 参数中的路径为浏览器驱动程序的路径（建议与程序在同一路径下）</span></span><br><span class="line">service = Service(executable_path = <span class="string">&#x27;./edgedriver.exe&#x27;</span>)</span><br><span class="line">bro = webdriver.Edge(service = service)</span><br></pre></td></tr></table></figure>

<ul>
<li>编写基于浏览器的代码</li>
</ul>
<h3 id="selenium常用函数"><a href="#selenium常用函数" class="headerlink" title="selenium常用函数"></a>selenium常用函数</h3><ul>
<li><p>bro.get(url)  											让浏览器发起一个指定url对应请求</p>
</li>
<li><p>page_text &#x3D; bro.page_source		  获取浏览器当前页面的页面源码数据</p>
</li>
<li><p>标签定位：使用find_element方法</p>
</li>
</ul>
<p>​	search_input &#x3D; bro.find_element(By.[attrname], “[attr]’s value”)</p>
<ul>
<li><p>标签交互：</p>
<p>​	search_input.send_keys(‘xxx’)</p>
</li>
<li><p>执行一组js代码</p>
<p>​	bro.execute_script(‘code…’)</p>
</li>
<li><p>点击按钮：</p>
<p>​	btn.click()</p>
</li>
<li><p>后退&#x2F;前进</p>
<p>​	bro.back()&#x2F;forward()</p>
</li>
</ul>
<h3 id="selenium处理iframe"><a href="#selenium处理iframe" class="headerlink" title="selenium处理iframe"></a>selenium处理iframe</h3><p>bro.switch_to.frame(‘frame_name’)</p>
<h3 id="动作链-项目暂时用不到"><a href="#动作链-项目暂时用不到" class="headerlink" title="动作链(项目暂时用不到)"></a>动作链(项目暂时用不到)</h3><p>南大相关网站的登录还不需要滑块验证</p>
<p>碰到滑块验证的时候可能就需要用到了</p>
<h3 id="selenium实现模拟登录"><a href="#selenium实现模拟登录" class="headerlink" title="selenium实现模拟登录"></a>selenium实现模拟登录</h3><p>结合前面的基础知识 先点击账号密码登录按钮，找到账号输入框与密码输入框，</p>
<p>输入账号密码，点击登录按钮</p>
<h2 id="模拟登陆cookie操作"><a href="#模拟登陆cookie操作" class="headerlink" title="模拟登陆cookie操作"></a>模拟登陆cookie操作</h2><h3 id="cookie有什么作用"><a href="#cookie有什么作用" class="headerlink" title="cookie有什么作用"></a>cookie有什么作用</h3><p>TCP&#x2F;IP协议是无状态的，因此通常的get请求 服务器端不知道你有没有处于登录状态</p>
<p>携带cookie值的get请求 能使服务器端知道你已经处于登录状态</p>
<h3 id="手动cookie（不推荐）"><a href="#手动cookie（不推荐）" class="headerlink" title="手动cookie（不推荐）"></a>手动cookie（不推荐）</h3><p>登录网站后通过抓包工具手动复制cookie值 将cookie值封装到headers 中，写死在程序里</p>
<p>缺点：cookie值一段时间后会过期</p>
<h3 id="自动处理"><a href="#自动处理" class="headerlink" title="自动处理"></a>自动处理</h3><p>cookie值是如何产生的？既然cookie值能让服务器知道你已经处于登录状态，那么理所当然cookie值是登录时发送post请求后服务器端生成后发送给客户端的</p>
<p>session会话对象：</p>
<p>作用： </p>
<ol>
<li>可以进行请求的发送</li>
<li>如果请求过程中产生了cookie，则该cookie会被自动存储&#x2F;携带在该session对象中</li>
</ol>
<p>使用：</p>
<ol>
<li><p>创建一个session对象 ： <code>session = requests.Session()</code></p>
</li>
<li><p>使用session对象进行模拟登录post请求的发送(cookie就会被存储在session中)</p>
</li>
<li><p>session对象对个人主页对应的get请求进行发送（携带了cookie）</p>
</li>
</ol>
<p>如果登录找不到post请求或遇到问题导致获得不到cookie：</p>
<p>​	适用selenium登录后 用下列方法直接取得cookie:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = bro.get_cookies()</span><br><span class="line">bro.close()</span><br><span class="line">cookies = &#123;&#125;</span><br><span class="line"><span class="comment"># 获取cookie中的name和value,转化成requests可以使⽤的形式</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> c:</span><br><span class="line">    cookies[cookie[<span class="string">&#x27;name&#x27;</span>]] = cookie[<span class="string">&#x27;value&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>然后就能用cookies了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(url=detail_url, headers=headers, cookies=cookies)</span><br></pre></td></tr></table></figure>



<h2 id="并行爬取（异步爬虫）"><a href="#并行爬取（异步爬虫）" class="headerlink" title="并行爬取（异步爬虫）"></a>并行爬取（异步爬虫）</h2><p>原理：利用进程池实现并行爬取</p>
<p>使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="comment"># 创建进程池</span></span><br><span class="line">pool = Pool(processes=<span class="number">4</span>)</span><br><span class="line">pool.<span class="built_in">map</span>(function_name, iterable[,chunksize])</span><br></pre></td></tr></table></figure>



<p><strong>processes参数设置注意</strong>：当进程数量大于CPU的内核数量时，等待运行的进程会等到其他进程运行完毕让出内核为止。因此，如果CPU是单核，就无法进行多进程并行。在使用多进程爬虫之前，我们需要先了解计算机CPU的核心数量。这里用到了multiprocessing:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</span><br><span class="line"><span class="built_in">print</span>(cpu_count())</span><br></pre></td></tr></table></figure>

<p>运行结果为16。</p>
<p>使用eg：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urls = [<span class="string">&#x27;https://xjh.haitou.cc/xa/after/page-&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>)]</span><br><span class="line">pool = Pool(processes=<span class="number">4</span>)</span><br><span class="line"><span class="comment">#get_xuanjing 为参数是一个url的爬虫函数</span></span><br><span class="line">pool.<span class="built_in">map</span>(get_xuanjiang,urls)</span><br><span class="line">pool.close()  <span class="comment"># 关闭进程池，不再接受新的进程</span></span><br><span class="line">pool.join()  <span class="comment"># 主进程阻塞等待子进程的退出</span></span><br></pre></td></tr></table></figure>



<h2 id="有关爬虫的一些问题："><a href="#有关爬虫的一些问题：" class="headerlink" title="有关爬虫的一些问题："></a>有关爬虫的一些问题：</h2><ul>
<li><p>爬下来的文本中带有&amp;nbsp 在html中表示no breaking space（不自动换行的空格）</p>
<p>此时可以采用 str.replace(u’\xa0’, ‘’)来解决 str为待处理字符串</p>
</li>
<li><p>requests里.text 与 .content方法的区别：</p>
<p>两者区别在于，content中间存的是字节码，而text中存的是Beautifulsoup根据猜测的编码方式将content内容编码成字符串。</p>
<p>直接输出content，会发现前面存在b’这样的标志，这是字节字符串的标志，而text是，没有前面的b,对于纯ascii码，这两个可以说一模一样，对于其他的文字，需要正确编码才能正常显示。大部分情况建议使用.text，因为显示的是汉字，但有时会显示乱码，这时需要用.content.decode(‘utf-8’)，中文常用utf-8和GBK，GB2312等。这样可以手工选择文字编码方式。</p>
<p>所以简而言之，.text是现成的字符串，.content还要编码，但是.text不是所有时候显示都正常，这是就需要用.content进行手动编码</p>
</li>
<li><p>两种常见方法，一般能解决所有中文乱码问题</p>
<ol>
<li><p>对爬下来的整个数据改变编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对出现问题的对象单独进行编码与解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img_name = img_name.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
