<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git操作</title>
    <url>/2022/10/01/Git%E5%AD%A6%E4%B9%A001-%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="git学习01-基本操作"><a class="anchor" href="#git学习01-基本操作">#</a> Git 学习 01- 基本操作</h1>
<p><span id="more"></span></p>
<p><img data-src="%E4%B8%89%E5%8F%B6.jpg" alt="三叶"></p>
<h2 id="创建版本库"><a class="anchor" href="#创建版本库">#</a> 创建版本库</h2>
<p>版本库 (repository) 是一个目录，这个目录里的所有文件都可以被 Git 管理起来，每个文件的修改、删除、Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以还原。</p>
<p>创建版本库步骤：</p>
<ol>
<li>选择一个合适地方，创建一个空目录</li>
<li>通过  <code>git init</code>  命令把这个目录变成 Git 可以管理的仓库</li>
</ol>
<h2 id="把文件添加到版本库"><a class="anchor" href="#把文件添加到版本库">#</a> 把文件添加到版本库</h2>
<p>把一个文件放到仓库只需要两步（如添加一个 readme.txt 文件）：</p>
<ol>
<li>
<p><code>git add readme.txt</code>   用命令 git add 告诉 Git， 把文件添加到暂存区。可反复多次使用，添加多个文件。</p>
</li>
<li>
<p><code>git commit -m &quot;wrote a readme file&quot;</code></p>
<p>git commit 告诉 Git, 把文件提交到仓库。-m 后面输入的是本次提交的说明，注意说明一定要有意义，如告诉仓库本次提交做了什么事，方便后续的版本控制。</p>
</li>
</ol>
<h2 id="查看工作区状态"><a class="anchor" href="#查看工作区状态">#</a> 查看工作区状态</h2>
<p>要查看当前工作区的状态，使用  <code>git status</code>  命令</p>
<p>如果有文件被修改过，你又想知道修改了什么 用 <code>git diff filename</code>  查看修改的内容。git diff 命令可以告诉你当前工作区的文件和仓库的有什么不同。</p>
<h2 id="版本回退"><a class="anchor" href="#版本回退">#</a> 版本回退</h2>
<ul>
<li><code>HEAD</code>  指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令 <code>git reset --hard commit_id</code> 。版号只要前几位就行了，只要能识别，也可以用 HEAD 和 ^ 表示回退到哪一版。</li>
<li>穿梭前，用 <code>git log</code>  可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>重返过去时未来的记录用 git log 就看不到了。要重返未来，用 <code>git reflog</code>  查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<h2 id="撤销修改"><a class="anchor" href="#撤销修改">#</a> 撤销修改</h2>
<ul>
<li>场景 1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- filename</code> 。</li>
<li>场景 2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD &lt;filename&gt;</code> ，就回到了场景 1，第二步按场景 1 操作。</li>
<li>场景 3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>
</ul>
<h2 id="删除文件"><a class="anchor" href="#删除文件">#</a> 删除文件</h2>
<p>如果你在文件管理器中把某个文件删了，或者用 <code>rm</code>  命令删了</p>
<pre><code>$ rm test.txt
</code></pre>
<p>这个时候，Git 知道你删了文件，因此，工作区和版本库就不一致了。</p>
<p>现在有两种情况。</p>
<ol>
<li>
<p>确实要从版本库中删除该文件，那就用命令  <code>git rm</code>  删掉 并且 git commit</p>
<pre><code>$ git rm test.txt
$ git commit -m &quot;remove test.txt&quot;
</code></pre>
<p>tips：先手动删除文件，然后使用 git rm &lt;file&gt; 和 git add&lt;file &gt; 效果是一样的。</p>
</li>
<li>
<p>删除错了，要从版本库中把误删的文件恢复到最新版本。</p>
<pre><code>$ git checkout -- test.txt
</code></pre>
<p>git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以一键还原。</p>
</li>
</ol>
<h2 id="添加远程库"><a class="anchor" href="#添加远程库">#</a> 添加远程库</h2>
<p>远程库既可以充当本地仓库的备份，又可以让其他人通过该仓库来协作，可谓一举多得。</p>
<p>创建远程库并将本地与远程库连接。</p>
<p>步骤：</p>
<ol>
<li>
<p>登录 github 创建一个新的仓库，复制该仓库的 SSH</p>
</li>
<li>
<p>在本地仓库上运行</p>
<pre><code>$ git remote add origin git@github.com:maoding1/learngit.git
</code></pre>
<p>(后面的一大串是复制的 SSH) 使本地仓库与远程库连接。</p>
<p>git 会把远程库的名字默认设为 origin</p>
</li>
<li>
<p>把本地内容推送到远程库上</p>
<pre><code>$ git push -u origin master
</code></pre>
<p>-u 参数实际上设置了远程仓库的默认值（比如有多个远程仓库） 之后就可以简化 git pull 和 git push 的命令</p>
</li>
</ol>
<p>现在只要本地做了提交，就可以通过  <code>git push origin master</code>  把本地分支的修改推送到 github</p>
<p>tips：要删除远程库 可以用 <code>git remote rm &lt;name&gt;</code>  命令，但这只是解除了本地与远程的绑定关系，要真正删除远程库，需要登陆 github 手动删除。</p>
<h2 id="克隆远程仓库"><a class="anchor" href="#克隆远程仓库">#</a> 克隆远程仓库</h2>
<p>知道仓库的 SSH 后，通过 <code>git clone SSH</code>  命令克隆到本地</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>C++：移动语义与右值引用</title>
    <url>/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="c的移动语义与右值引用"><a class="anchor" href="#c的移动语义与右值引用">#</a> C++ 的移动语义与右值引用</h1>
<p><span id="more"></span></p>
<p><img data-src="preview.jpg" alt="Gaze"></p>
<h2 id="移动语义"><a class="anchor" href="#移动语义">#</a> 移动语义</h2>
<h3 id="为何需要移动语义"><a class="anchor" href="#为何需要移动语义">#</a> 为何需要移动语义</h3>
<p>假设有如下代码：</p>
<pre><code class="language-c++">vector&lt;string&gt; vstr;// build up a vector of 20000 strings,each of 1000 characters
vector&lt;string&gt; vstr_copy1(vstr);
</code></pre>
<p>为了初始化 vstr_copy1 先调用 vector 的复制构造函数，使用 new 给 20000 个 string 对象分配内存，而每个 string 对象又调用 string 的复制构造函数，为 1000 个字符分配内存。这很浪费时间，但如果 vstr 与 vstr_copy1 都需要使用，这很难避免。</p>
<p>可有时候这样不太妥当，例如 vstr 不再被使用时。例如如下定义的函数：</p>
<pre><code class="language-c++">vector&lt;string&gt; allcaps(const vector&lt;string&gt; &amp; vs)
&#123;
    vector&lt;string&gt; temp;
    //让temp存储vs中string的大写版本的代码
    return temp;
&#125;
</code></pre>
<p>并这样使用它：</p>
<pre><code class="language-c++">vector&lt;string&gt; vstr;
vector&lt;string&gt; vstr_copy1(vstr); //#1
vector&lt;string&gt; vstr_copy2(allcaps(vstr)); //#2
</code></pre>
<p>allcaps () 创建了对象 temp，该对象管理着 20000000 个字符；语句二使用 vector 和 string 的复制构造函数创建了一个 temp 的副本，然后删除了 temp，做了大量无用功。如果编译器直接把 temp 对数据的所有权转让给 vstr_copy2，将会更好。</p>
<p>实际上，我们可以把实际内容保留在原来地方，而之修改记录，这就是移动语义的本质，它避免了移动原始数据，而转为修改记录。</p>
<p>要实现移动语义，需要采取某种方式，让编译器知道什么时候需要复制。这就是右值引用发挥作用的地方。可定义两个构造函数，其中一个是常规复制构造函数，它使用 const 左值引用作为参数，如语句 #1。另一个是移动构造函数，它使用右值引用作为参数，该引用关联到右值实参，如语句 #2 中 allcaps (vstr) 的返回值。移动构造函数可能修改其实参，这意味着右值引用参数不应是 const。</p>
<h3 id="如何使用"><a class="anchor" href="#如何使用">#</a> 如何使用</h3>
<p>直接将变量的值赋值为参数的变量值，如果变量为指针，为了防止 double free，还需将参数的指针改为 nullptr。</p>
<p>例如：</p>
<pre><code>Useless(Useless &amp;&amp; f) : n(f.n)
&#123;
	++ct;
	pc = f.pc;
	f.pc = nullptr;
	f.n = 0;
&#125;
</code></pre>
<h3 id="强制移动"><a class="anchor" href="#强制移动">#</a> 强制移动</h3>
<p>移动构造函数和移动赋值运算符使用右值，如果要让它们使用左值，该怎么办？例如，将一个左值变量赋值给一个对象，并立刻丢弃这个变量。此时可以使用头文件 utility 中声明的函数 std::move。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux—01-Linux安装常识</title>
    <url>/2022/09/30/Linux%E2%80%9401-Linux%E5%AE%89%E8%A3%85%E5%B8%B8%E8%AF%86/</url>
    <content><![CDATA[<h1 id="linux系统的安装"><a class="anchor" href="#linux系统的安装">#</a> Linux 系统的安装</h1>
<p><span id="more"></span></p>
<p><img data-src="preview.jpg" alt="芝士辉夜"></p>
<h2 id="交换分区"><a class="anchor" href="#交换分区">#</a> 交换分区</h2>
<p>直接从物理内存读写数据比从硬盘读写快的多，然而物理硬盘是有限的，这样就使用到了虚拟内存。虚拟内存是为了满足物理内存的不足而提出的一种策略，他是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为<strong>交换分区（swap 分区）</strong>。</p>
<p>内核会将暂时不用的内存信息写到交换分区，使物理内存得到释放并用于其它用途，当需要原始内容时，这些信息会被重新从交换分区读入物理内存。</p>
<p>Linux 的内存管理采用分页存取机制，为了保证物理内存能得到充分利用，内核会在适当时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。</p>
<h2 id="分区命名"><a class="anchor" href="#分区命名">#</a> 分区命名</h2>
<p>Linux 系统使用字母和数字的组合来指代硬盘分区，该命名方案是基于文件的，文件名的格式为 */dev/xxyN* (比如 /dev/sda1 分区)</p>
<p>/dev: 这是 Linux 系统中所有设备文件所在的目录名。因为分区位于硬盘上，而硬盘是设备，所以这些文件代表了在 /dev 上所有可能的分区</p>
<p>xx：分区名的前两个字母表示分区所在设备的类型，通常是 hd（IDE）硬盘或 sd（SCSI 硬盘）</p>
<p>y: 这个字母表示分区所在的设备。例如，/dev/hda（第一个 IDE 硬盘）或 /dev/sdb (第二个 SCSI 硬盘)</p>
<p>N：最后的数字 N 代表硬盘上的第几个分区。</p>
<h2 id="挂载目录"><a class="anchor" href="#挂载目录">#</a> 挂载目录</h2>
<p>Linux 系统中的每一个分区都是构成支持一组文件和目录 所必需的存储区的一部分。它是通过挂载来实现的，挂载 是将分区关联到某一目录的过程，挂载分区使起始于这个 指定目录（称为挂载目录）的存储区能够被使用。</p>
<p>例如，如果分区 /dev/sda5 被挂载在目录 /usr 上，这意味着 所有在 /usr 下的文件和目录在物理上位于 /dev/sda5。因此 文件 /usr/bin/cal 被保存在分区 /dev/sda5 上，而文件 /etc/passwd 却不是。</p>
<p>/usr 目录下的目录还有可能是其它分区的挂载目录。例如， 某个分区（如 /dev/sda7）可以被挂载到 /usr/local 目录下， 这意味着文件 /usr/local/man/whatis 将位于分区 /dev/sda7 上，而不是分区 /dev/sda5 上。</p>
<h2 id="分区规划"><a class="anchor" href="#分区规划">#</a> 分区规划</h2>
<p>合理的分区规划 ：</p>
<p>・swap 分区：实现虚拟内存，建议大小是物理内存 的 1～2 倍；</p>
<p>・/boot 分区：建议大小最少为 200MB；・/usr 分区：用来存放 Linux 系统中的应用程序， 其相关数据较多，建议大小最少为 8GB；</p>
<p>・/var 分区：用来存放 Linux 系统中经常变化的数 据以及日志文件，建议大小最少为 1GB；</p>
<p>・/ 分区：Linux 系统的根目录，所有的目录都挂在 这个目录下面，建议大小最少为 1GB；</p>
<p>・/home 分区：存放普通用户的数据，是普通用户 的宿主目录，建议大小为剩下的空间。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习02-分支管理</title>
    <url>/2022/10/02/Git%E5%AD%A6%E4%B9%A002-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="git学习02-分支管理"><a class="anchor" href="#git学习02-分支管理">#</a> Git 学习 02 - 分支管理</h1>
<p><span id="more"></span></p>
<p><img data-src="%E8%BD%BB%E9%9F%B3%E5%B0%91%E5%A5%B3.jpg" alt="轻音少女"></p>
<h2 id="创建与合并分支"><a class="anchor" href="#创建与合并分支">#</a> 创建与合并分支</h2>
<p>查看分支 ：  <code>git branch</code></p>
<p>创建分支：  <code>git branch &lt;name&gt;</code></p>
<p>切换分支：  <code>git switch &lt;name&gt;</code></p>
<p>创建 + 切换分支:  <code>git switch -c &lt;name&gt;</code></p>
<p>合并某分支到当前分支 ：  <code>git merge &lt;name&gt;</code>  这里的 name 使某分支的 name</p>
<p>删除分支：  <code>git branch -d &lt;name&gt;</code></p>
<h2 id="解决冲突"><a class="anchor" href="#解决冲突">#</a> 解决冲突</h2>
<p>eg：当你创建了一个 feature1 分支 其在 master 分支上添加了一些内容并进行提交，此时切换会 master 分支并使用  <code>git merge feature1</code>  合并分支是不会有问题的（Git 会在底层移动 master 的指针到 feature1 上）。但如果你在 feature1 上修改了某个文件并提交，在切换会 master 分支后修改了同一份文件并提交，那么此时 git merge 就会报错了。</p>
<p>此时可以：</p>
<ol>
<li>使用 <code>git status</code>  查看冲突的文件（如果你改了很多，分不清哪里冲突了）</li>
<li>手动解决冲突</li>
<li>再提交</li>
<li>最后删除分支（如删除 feature1)</li>
</ol>
<p>使用</p>
<pre><code>$ git log --graph --pretty=oneline --abbrev-commit
</code></pre>
<p>可以形象地查看分支的合并情况（Git 会生成一副图）</p>
<h2 id="分支管理策略"><a class="anchor" href="#分支管理策略">#</a> 分支管理策略</h2>
<p><code>git merge --no-ff -m &quot;commit message&quot; &lt;branch name&gt;</code></p>
<p>通常 ，合并分支时，Git 会用 Fast forward 模式（移动指针） ，这种模式下，删除分支后，会丢掉分支信息</p>
<p>如果要强制禁用 Fast forward 模式， Git 就会再 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息。</p>
<p>--no--ff 参数表示禁用 Fast forward</p>
<h2 id="git的更多操作"><a class="anchor" href="#git的更多操作">#</a> git 的更多操作</h2>
<p>Git 还有许多高级功能。如暂时储存当前工作、多人协作、标签管理等。考虑到目前还接触不到 ，上述功能等需要使用了再来学习更新吧。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 学习</title>
    <url>/2022/10/23/Maven-%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id><a class="anchor" href="#">#</a> </h1>
<h1 id="maven-学习"><a class="anchor" href="#maven-学习">#</a> Maven  学习</h1>
<p><span id="more"></span></p>
<p>​																<img data-src="rebecca.jpg" alt="芝士rebecca"></p>
<h2 id="maven简介"><a class="anchor" href="#maven简介">#</a> Maven 简介</h2>
<p>Maven 是 Apache 组织下一个比较著名的开源项目，主要服务于基于 java 平台的项目构建，依赖管理和项目信息管理。</p>
<p>类比做糖醋排骨，传统需要自己配置酱料，比如加入多少克糖，多少克水，多少克... 而现在只用去超市购买酱料包就好。Maven 项目省去了开发者去各大网站下载 jar 包并解决相互间复杂依赖关系的时间。除此之外，除了编写源代码，我们有相当一部分时间花在了编译，运行单元测试，生成文档，打包和部署等工作上，这就是构建。手工做这些工作的成本太高了，于是可以用软件的方法让这一系列工作完全自动化，使得繁琐的步骤能够自动完成，很快得到最终结果。</p>
<h3 id="项目构建工具"><a class="anchor" href="#项目构建工具">#</a> 项目构建工具</h3>
<p>Ant 构建： 2000 年左右出现的构建工具，当时是最流行的 java 构建工具，不过它的 XML 脚本编写格式让 XML 文件特别大。对工程构建过程中的过程控制特别好。</p>
<p>Maven 构建：项目对象模型，通过其描述信息来管理项目的构建，报告和文档的软件项目管理工具，填补了 Ant 的缺点。Maven 第一次支持了从网络上下载的功能。Maven 专注的是依赖管理，使用 java 编写。</p>
<p>Gradle：谷歌的御用 Android 管理工具</p>
<p>Ant 比较老，目前 Maven 使用较多</p>
<h2 id="maven的四大特性"><a class="anchor" href="#maven的四大特性">#</a> Maven 的四大特性</h2>
<h3 id="依赖管理系统"><a class="anchor" href="#依赖管理系统">#</a> 依赖管理系统</h3>
<p>Maven 为 java 世界引入了一个新的依赖管理系统 ——jar 包管理。jar 升级时修改配置文件即可。在 java 世界中，可以用 **<em>groupId</em> **   、<em><strong>artifactId</strong></em>   、<em><strong>version</strong></em> 组成的 Coordination（坐标）唯一标识一个依赖</p>
<p>eg：</p>
<figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span> javax.servlet <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> //当前Maven项目隶属的实际项目或公司名称（jar包所在仓库路径）</pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span> javax.servlet-api <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> //定义实际项目中的一个Maven模块/项目名</pre></td></tr><tr><td data-num="4"></td><td><pre>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span> 3.1.0 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> //Maven项目当前所处的版本</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="多模块构建"><a class="anchor" href="#多模块构建">#</a> 多模块构建</h3>
<p>可以将一个项目分解为多个模块。</p>
<p>在 Maven 中定义一个 parent POM 作为一组 module 的聚合 POM，在该 POM 中可以使用 &lt;modules&gt; 标签来定义一组子模块。parent POM 中的 build 配置和依赖配置都会继承给子 module。</p>
<h3 id="一致的项目结构"><a class="anchor" href="#一致的项目结构">#</a> 一致的项目结构</h3>
<p>Maven 理念： Convension over configuration (约定大于配置)。其制定了一套项目目录结构作为标准的 java 项目结构，解决不同 IDE 带来的文件目录不一致问题。</p>
<h3 id="一致的构建模型和插件机制"><a class="anchor" href="#一致的构建模型和插件机制">#</a> 一致的构建模型和插件机制</h3>
<figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>	......</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>引入插件</p>
<h2 id="maven项目结构"><a class="anchor" href="#maven项目结构">#</a> Maven 项目结构</h2>
<pre><code>- src
	- main                   ：程序功能代码
		- Java               ：java代码
		- resource           ：资源代码、配置代码
	- test                   ：测试代码
		- Java               ：单元测试java代码
		- resource           ：资源代码、配置代码
	- pom.xml                ：项目对象模型

</code></pre>
<p>不用 IDE 的话上述结构都需要手动创建</p>
<p>pom 中的标签具体作用可以参考 <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9tYXZlbi9tYXZlbi1wb20uaHRtbA==">https://www.runoob.com/maven/maven-pom.html</span></p>
<h2 id="在idea中使用maven"><a class="anchor" href="#在idea中使用maven">#</a> 在 IDEA 中使用 Maven</h2>
<p>IDEA 中默认捆绑了 Maven 可以在设置里更改 Maven 有关的配置</p>
<p>创建 Maven 项目：文件 -&gt; 新建 -&gt; 项目 构建系统选 Maven（上述是常规 Maven 项目）</p>
<p>​										可以选择生成器中的 Maven 中的 Archetype 选择模板（如 quickstart）</p>
<h2 id="maven仓库"><a class="anchor" href="#maven仓库">#</a> Maven 仓库</h2>
<p>对于 Maven 来说，仓库只有两类： 本地仓库和远程仓库</p>
<p>Maven 根据坐标寻找构件的时候，它首先会查看本地仓库，如果本地仓库存在，则直接使用；如果本地没有，Maven 就回去远程仓库查找，再下载到本地仓库再使用。如果本地和远程都没有就会报错。</p>
<p>远程仓库分为 3 种：</p>
<ol>
<li>
<p>中央仓库：默认下载 jar 包的地方，在国外，包含了 2000 多个开源项目，每天接收 1 亿次以上的访问。</p>
</li>
<li>
<p>私服：一种特殊的远程仓库，它是架设在局域网内的仓库服务。私服代理广域网上的远程仓库，供局域网内的 Maven 用户使用。当 Maven 需要下载构件时，它去私服当中找，如果私服没有，则从外部远程仓库下载，并缓存在私服上，再为 maven 提供。此外，一些无法从外部仓库下载的构件也能从本地上传到私服提供局域网中其他人使用。（在公司或学校内网中自己写的构件就可以上传到私服让别人使用了） 私服优点： 节省自己的外网带宽、 加速 Maven 构建、部署第三方控件、提高稳定性、降低中央仓库的负荷</p>
</li>
<li>
<p>其他公共库</p>
<p>如阿里云仓库，国内地址下载比中央仓库快。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>STL学习-01-智能指针与vector</title>
    <url>/2022/10/05/STL%E5%AD%A6%E4%B9%A0-01-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8Evector/</url>
    <content><![CDATA[<h1 id="c-的标准模板库"><a class="anchor" href="#c-的标准模板库">#</a> c++ 的标准模板库</h1>
<p><span id="more"></span></p>
<p><img data-src="%E9%9B%A8%E5%A4%A9-%E5%A5%B3%E5%AD%A9-%E5%95%86%E5%BA%97.jpg" alt="雨天 女孩 商店"></p>
<h2 id="智能指针模板类"><a class="anchor" href="#智能指针模板类">#</a> 智能指针模板类</h2>
<p>智能指针是类似于指针的类对象，比较方便内存管理。传统的指针必须时时刻刻记得 new 与 delete 的配套使用，很容易造成内存泄漏。而智能指针实际上类似于一个类，有自己的析构函数，所以编译器再不需要智能指针时便可以自动调用其析构函数释放内存，也就是可以略去 delete 操作。</p>
<h3 id="使用智能指针"><a class="anchor" href="#使用智能指针">#</a> 使用智能指针</h3>
<p>要创建智能指针对象，必须包含头文件 memory 然后使用通常的模板语法来实例化所需类型的指针。</p>
<p>声明：  <code> template &lt;class X&gt; class auto_ptr</code></p>
<p>使用 eg：  <code> auto_ptr&lt;double&gt; pd(new double);</code></p>
<p>​					  <code>auto_ptr&lt;string&gt; ps(new string);</code></p>
<p>注意： 智能指针模板位于名称空间 std 中。</p>
<h3 id="有关智能指针的注意事项"><a class="anchor" href="#有关智能指针的注意事项">#</a> 有关智能指针的注意事项</h3>
<p>c++ 目前有三种常见智能指针：auto_ptr, unique_ptr,shared_ptr</p>
<p>在使用智能指针时，可能会遇到问题，比如如果两个智能指针指向同一块内存区域，则程序会删除同一个对象两次，这是会造成极大错误的。为避免这种问题，方法有多种。</p>
<ul>
<li>建立所有权概念，对于特定对象，只有一个智能指针可以拥有他。 这是用于 auto_ptr 和 unique_ptr 的策略，但 unique_ptr 更严格</li>
<li>创建智能更高的指针，跟踪引用特定对象的智能指针数，这称为引用计数。当最后一个指针过期时，才调用 delete。这是 shared_ptr 的策略</li>
<li>执行深拷贝</li>
</ul>
<p>auto_ptr 和 unique_ptr 的区别：</p>
<p>​		两个 auto_ptr 指向同一块内存区域时，可以通过编译，但可能在运行时报错。两个 unique_ptr 指向同一块内存区域时，会在编译阶段就报错（除非赋值给其中一个 unique_ptr 的另一个 unique_ptr 是一个用完即毁的智能指针，如某一函数中 new 出来的 unique_ptr 的返回）。</p>
<h2 id="模板类vector"><a class="anchor" href="#模板类vector">#</a> 模板类 vector</h2>
<h3 id="创建vector"><a class="anchor" href="#创建vector">#</a> 创建 vector</h3>
<p>要创建 vector 模板对象， 可使用通常的 &lt;type&gt; 表示法来指出要使用的类型。另外，vector 模板使用动态内存分配，因此可以用初始化参数指出需要多少元素。</p>
<p><code> vector&lt;int&gt; ratings(5);  // a vector of 5 ints</code></p>
<h3 id="可对vector执行的操作"><a class="anchor" href="#可对vector执行的操作">#</a> 可对 vector 执行的操作</h3>
<p>size ()—— 返回容器中元素数目        swap ()—— 交换两个容器的内容             begin ()—— 返回一个指向容器中第一个元素的 <em><strong>迭代器</strong></em>      end () 返回一个表示超过容器尾的<em><strong>迭代器</strong></em></p>
<p>什么是迭代器？ 它是一个广义的指针，可以对其执行类似指针的操作，如解除引用 *、递增 ++</p>
<p>STL 的每个容器类都定义了一个合适的迭代器，该迭代器的类型是一个名为 iterator 的 typedef，作用域为整个类。如要为 vector 的 double 类型规范声明一个迭代器，可以这样做：</p>
<p>​	 <code>vector&lt;double&gt;::iterator pd;//  pd an iterator</code></p>
<p>假设 scores 是一个 vector&lt;double&gt; 对象，可以利用好 auto 关键字简化书写：</p>
<p><code>auto pd = scores.begin()</code></p>
<p>vector 还支持 push_back () (内存不够会自动扩充容器), erase () insert () 等方法</p>
<h3 id="其它操作"><a class="anchor" href="#其它操作">#</a> 其它操作</h3>
<p>有两个具有代表性的 STL 函数：for_each () 和 sort () 。</p>
<p>for_each () 函数可用于很多容器类，它接受 3 个参数。前两个是定义容器中的迭代器，最后一个是一个函数指针。for_each () 函数将被指向的函数应用于容器区间中的各个元素，可以用 for_each () 函数来代替 for 循环。</p>
<p>eg:  <code>for_each(books.begin(), books.end(), ShowReview);</code></p>
<p>sort () 函数也要求函数支持随机访问。该函数接收两个定义区间的迭代器参数。如果容器中的元素有内置的 &lt; 运算符进行值比较，可以直接使用。如果容器中的元素是用户定义的类对象，则用户需要利用重载定义 &lt; 运算符。</p>
<p>还有第二个版本的 sort () 函数，它接收第三个参数，该参数是一个函数指针，不一定是用于比较的 operator&lt;()，而是一个返回值可转换为 bool 类型的函数，它接收两个容器中的元素，返回为 false 表示两个参数的顺序不正确。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>STL C++</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现自动选课</title>
    <url>/2023/02/15/python%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%80%89%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="python实现自动选课"><a class="anchor" href="#python实现自动选课">#</a> python 实现自动选课</h1>
<p>主要利用 selenium 与 ddddocr 库实现了对南大选课系统已收藏课程的自动化选择， 频率约为每两秒一次。实际测试中在一天时间内抢到了三门通识与两次近代史。</p>
<p><span id="more"></span></p>
<p>驱动这个项目动力来自于南大选课系统的落后。在开放选课的前一分钟 mikeMao 点击了一下刷新按钮，然后当 mikeMao 看到选课界面时已经是十分钟以后了。他没有任何体育课，也没有抢到近代史（因为他上学期为了逃离黑榜退掉了近代史），并且只中了一门必中的通识课！如果只靠蹲，mikeMao 这学期的课表可能会爆炸，于是 mikeMao 吐槽能否开发一个自动选课脚本，他的室友 stonerXiao 花了两小时写了一个可以使用的抢课脚本，mikeMao 获得了源码。但是他觉得一些地方写的不是很好，于是第二天上课（两点的课，两点零一群里通知老师有事不来了），他就动手改了一遍，借鉴了 stonerXiao 的刷新思路，mikeMao 几乎重写了一份代码。并在接下来的一天内塞满了课表。</p>
<p>源码</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>edge<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> time</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> ddddocr</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> traceback</pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># 使用须知 需要安装：selenium 与 ddddorc 库 edge 浏览器及对应版本的驱动程序 并且参照注释对下面源码进行改动 将想选的课收藏</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 可能不明原因退出或报错 可能是收藏被吞了（重新收藏一下） 或者网络波动（重启程序即可）</span></pre></td></tr><tr><td data-num="11"></td><td><pre>username <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 添加用户名</span></pre></td></tr><tr><td data-num="12"></td><td><pre>password <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 添加密码</span></pre></td></tr><tr><td data-num="13"></td><td><pre>url <span class="token operator">=</span> <span class="token string">"https://xk.nju.edu.cn/xsxkapp/sys/xsxkapp/*default/index.do"</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>login_button <span class="token operator">=</span> <span class="token string">"/html/body/div[1]/article/section/div[4]/div[1]/button"</span></pre></td></tr><tr><td data-num="16"></td><td><pre>start <span class="token operator">=</span> <span class="token string">"/html/body/div[1]/article/section/div[4]/div[2]/button"</span></pre></td></tr><tr><td data-num="17"></td><td><pre>favorite <span class="token operator">=</span> <span class="token string">"/html/body/div[1]/header/div[2]/ul/li[8]/a"</span></pre></td></tr><tr><td data-num="18"></td><td><pre>special <span class="token operator">=</span> <span class="token string">"/html/body/div[1]/header/div[2]/ul/li[1]/a"</span>  <span class="token comment"># for refresh</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>select <span class="token operator">=</span> <span class="token string">"/html/body/div[1]/article/div[2]/div[2]/table/tbody/tr[&#123;&#125;]/td[8]/a[2]"</span></pre></td></tr><tr><td data-num="21"></td><td><pre>confirm <span class="token operator">=</span> <span class="token string">"/html/body/div[3]/div[2]/div[2]/div[1]"</span></pre></td></tr><tr><td data-num="22"></td><td><pre>confirm_ <span class="token operator">=</span> <span class="token string">"/html/body/div[3]/div[2]/div[2]/div"</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>course_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment"># 识别验证码</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">def</span> <span class="token function">Identify_verifi_code</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    img <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="vcodeImg"]'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    img<span class="token punctuation">.</span>screenshot<span class="token punctuation">(</span><span class="token string">'vcode.png'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    ocr <span class="token operator">=</span> ddddocr<span class="token punctuation">.</span>DdddOcr<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'vcode.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        img_bytes <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    res <span class="token operator">=</span> ocr<span class="token punctuation">.</span>classification<span class="token punctuation">(</span>img_bytes<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">return</span> res</pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment"># driver.maximize_window ()  # 将窗口最大化</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    verifi_code <span class="token operator">=</span> Identify_verifi_code<span class="token punctuation">(</span>driver<span class="token punctuation">)</span>  <span class="token comment"># 识别验证码</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment"># 找到登录框 输入账号密码</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'loginName'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>username<span class="token punctuation">)</span>  <span class="token comment"># 输入用户名</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'loginPwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>password<span class="token punctuation">)</span>  <span class="token comment"># 输入密码</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'verifyCode'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>verifi_code<span class="token punctuation">)</span>  <span class="token comment"># 输入验证码</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 10 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> driver<span class="token punctuation">:</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> login_button<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> login_button<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 点击登录</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            verifi_code <span class="token operator">=</span> Identify_verifi_code<span class="token punctuation">(</span>driver<span class="token punctuation">)</span>  <span class="token comment"># 识别验证码</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'verifyCode'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'verifyCode'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>verifi_code<span class="token punctuation">)</span>  <span class="token comment"># 输入验证码</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 10 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> driver<span class="token punctuation">:</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> login_button<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> login_button<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 点击登录</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token keyword">except</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>    wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 20 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> driver<span class="token punctuation">:</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">def</span> <span class="token function">is_Login</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'loginName'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token keyword">except</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">def</span> <span class="token function">start_select</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token keyword">if</span> is_Login<span class="token punctuation">(</span>driver<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 20 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> driver<span class="token punctuation">:</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> favorite<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> favorite<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    course_board <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'course-body'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    tr_list <span class="token operator">=</span> course_board<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'course-tr '</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已收藏课程：'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token keyword">for</span> tr <span class="token keyword">in</span> tr_list<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>tr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="89"></td><td><pre>        wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> tr<span class="token punctuation">:</span> tr<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'./td[2]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        course_name <span class="token operator">=</span> tr<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'./td[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text</pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span>course_name<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="92"></td><td><pre>    count <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="93"></td><td><pre>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="95"></td><td><pre>        <span class="token keyword">if</span> count <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="96"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已尝试次数：'</span> <span class="token operator">+</span> count<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre>            <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre>        course_board <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'course-body'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        tr_list <span class="token operator">=</span> course_board<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'course-tr '</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token keyword">for</span> tr <span class="token keyword">in</span> tr_list<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="103"></td><td><pre>            wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>tr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre>            wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> tr<span class="token punctuation">:</span> tr<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'./td[8]/a[2]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre>            course_name <span class="token operator">=</span> tr<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'./td[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text</pre></td></tr><tr><td data-num="107"></td><td><pre>            select_button <span class="token operator">=</span> tr<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'./td[8]/a[2]'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="108"></td><td><pre>            select_button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="109"></td><td><pre>            <span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="110"></td><td><pre>                driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> confirm<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="111"></td><td><pre>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选课成功！"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已成功选中&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>course_name<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre>                course_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>course_name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="114"></td><td><pre>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"确认中"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre>                wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 20 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。</span></pre></td></tr><tr><td data-num="116"></td><td><pre>                wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> driver<span class="token punctuation">:</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> confirm_<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="117"></td><td><pre>                driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> confirm_<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"确认成功!"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="119"></td><td><pre>            <span class="token keyword">except</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="120"></td><td><pre>                <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="121"></td><td><pre></pre></td></tr><tr><td data-num="122"></td><td><pre>        wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 10 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。</span></pre></td></tr><tr><td data-num="123"></td><td><pre>        wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> driver<span class="token punctuation">:</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> special<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> special<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre></pre></td></tr><tr><td data-num="126"></td><td><pre>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="127"></td><td><pre>        wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 10 秒内每隔 500 毫秒扫描 1 次页面变化，当出现指定的元素后结束。</span></pre></td></tr><tr><td data-num="128"></td><td><pre>        wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> driver<span class="token punctuation">:</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> favorite<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="129"></td><td><pre>        driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> favorite<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="130"></td><td><pre></pre></td></tr><tr><td data-num="131"></td><td><pre></pre></td></tr><tr><td data-num="132"></td><td><pre><span class="token keyword">def</span> <span class="token function">working</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="133"></td><td><pre>    options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="134"></td><td><pre>    <span class="token comment"># 关闭沙盒启动 把下面两行注释掉 会出现浏览器界面 建议注释掉看看能不能运行 可以再取消注释</span></pre></td></tr><tr><td data-num="135"></td><td><pre>    <span class="token comment">#options.add_argument('--no-sandbox')</span></pre></td></tr><tr><td data-num="136"></td><td><pre>    <span class="token comment">#options.add_argument("--headless")</span></pre></td></tr><tr><td data-num="137"></td><td><pre></pre></td></tr><tr><td data-num="138"></td><td><pre>    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">"msedgedriver.exe"</span><span class="token punctuation">,</span> options<span class="token operator">=</span>options<span class="token punctuation">)</span>  <span class="token comment"># executable_path 改成下载的 edge 驱动程序路径</span></pre></td></tr><tr><td data-num="139"></td><td><pre>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="140"></td><td><pre></pre></td></tr><tr><td data-num="141"></td><td><pre>    <span class="token comment"># 登录并查询</span></pre></td></tr><tr><td data-num="142"></td><td><pre>    <span class="token keyword">try</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        login<span class="token punctuation">(</span>driver<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="144"></td><td><pre>        start_select<span class="token punctuation">(</span>driver<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="145"></td><td><pre>    <span class="token keyword">except</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="146"></td><td><pre>        traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="147"></td><td><pre>    <span class="token keyword">finally</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="148"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已选到如下课程:"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="149"></td><td><pre>        <span class="token keyword">print</span><span class="token punctuation">(</span>course_list<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="150"></td><td><pre>        driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="151"></td><td><pre></pre></td></tr><tr><td data-num="152"></td><td><pre></pre></td></tr><tr><td data-num="153"></td><td><pre><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="154"></td><td><pre>    working<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python 爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习编译器TVM-UserTutorial</title>
    <url>/2023/02/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BC%96%E8%AF%91%E5%99%A8TVM-UserTutorial/</url>
    <content><![CDATA[<h1 id="tvm-usertutorial"><a class="anchor" href="#tvm-usertutorial">#</a> TVM-UserTutorial</h1>
<p>自 2022 年 10 月份选择大创项目 —— 基于 TVM 实现针对国产 AI 芯片的深度算子库项目以来。花了许多时间弄懂什么是 TVM，项目的定位是什么，我们要做的到底是什么事。也经历了期末复习周，由于疫情延期期末考到开学考试，以及小组成员陆续阳性等等事。导致我们的项目在开题答辩之后迟迟没有开始。本学期初在学习了计算系统基础以及编译原理的导论之后，我对 TVM 的认识更加深刻了，项目也重新启动 (2023/2)。</p>
<p><span id="more"></span></p>
<h2 id="introduction"><a class="anchor" href="#introduction">#</a> Introduction</h2>
<p>原文链接： <span class="exturl" data-url="aHR0cHM6Ly90dm0uYXBhY2hlLm9yZy9kb2NzL3R1dG9yaWFsL2ludHJvZHVjdGlvbi5odG1sI3NwaHgtZ2xyLXR1dG9yaWFsLWludHJvZHVjdGlvbi1weQ==">Introduction — tvm 0.11.dev0 documentation (apache.org)</span></p>
<p>TVM 隶属于 Apache 基金会，是开源项目。定义为一个可应用于各种 GPU CPU 深度学习加速器的深度学习编译器。</p>
<h2 id="an-overview-of-tvm-and-model-optimization"><a class="anchor" href="#an-overview-of-tvm-and-model-optimization">#</a> An Overview of TVM and Model Optimization</h2>
<p><img data-src="image-20230228142729726.png" alt="image-20230228142729726"></p>
<p>主要思想： 专用 --&gt; 通用 --&gt; 专用    不同框架转化为统一的 IR 表示，在根据模型所部署的不同硬件的类型转化为对应的字节码 。</p>
<p>TVM 采用了多级 IR 的设计，而且每级之间的转化都会经过各种优化，比如切割子图，图优化，以及 AutoTVM/AutoScheduler (这两个是 TVM 带有的自动优化模块) 进行最优调度的选择。</p>
<p>TVM 支持的后端有 LLVM、NVCC 等，最重要的是可以支持 Embedded and specialized targets, 但是要使用 TVM 提供的 BYOC 功能，也是我们项目最需要实现的部分。</p>
<h2 id="compiling-and-optimizing-a-model-with-tvmc"><a class="anchor" href="#compiling-and-optimizing-a-model-with-tvmc">#</a> compiling and optimizing a Model with TVMC</h2>
<p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly90dm0uYXBhY2hlLm9yZy9kb2NzL3R1dG9yaWFsL3R2bWNfY29tbWFuZF9saW5lX2RyaXZlci5odG1sI3NwaHgtZ2xyLXR1dG9yaWFsLXR2bWMtY29tbWFuZC1saW5lLWRyaXZlci1weQ==">compiling and optimizing a model with TVMC</span></p>
<p>大部分操作已在虚拟机中运行成功</p>
<p>日期：3/1</p>
<p>这章主要熟悉了 TVMC 的简单使用。官方文档提供了一个预训练的 ResNet-50 v2 模型。为 TVM 的 runtime 编译此模型，并在这个模型上跑了一个真实的猫猫图片，得到运行结果。文章还包括了在实际的 CPU 上用 TVM 调优（tune）模型，并且使用 TVM 收集的 tuning data 重编译出一个优化的模型，重新跑一遍优化的模型，并与之前模型的表现进行对比（这部分较难）。</p>
<p>TVMC 是 TVM 的命令行工具，让你能在命令行中使用 TVM，C 表示 command line 的意思。</p>
<p>TVMC 支持 Keras, ONNX, TensorFlow, TFLite and Torch 构建的模型，本章模型用的是 onnx。</p>
<h2 id="编译模型"><a class="anchor" href="#编译模型">#</a> 编译模型</h2>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>tvmc compile <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token parameter variable">--target</span> <span class="token string">"llvm"</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="3"></td><td><pre>--input-shapes <span class="token string">"data:[1,3,224,224]"</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token parameter variable">--output</span> resnet50-v2-7-tvm.tar <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="5"></td><td><pre>resnet50-v2-7.onnx</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 编译出来一个 tar 文件</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">mkdir</span> model</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> resnet50-v2-7-tvm.tar <span class="token parameter variable">-C</span> model</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">ls</span> model</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">#解压后看看有什么</span></pre></td></tr></table></figure><p>有三个东西：</p>
<p><span class="exturl" data-url="aHR0cDovL21vZC5zbw==">mod.so</span> : 就是那个模型，表现为一个 TVM runtime 能运行的 c++ 库</p>
<p>mod.json  : a text representation of the TVM Relay computation graph.</p>
<p>mod.params:  a file containing the parameters for the pre-trained model.--</p>
<p>编译时选择恰当的命令行选项能大大改变编译性能</p>
<h2 id="用tvmc运行模型"><a class="anchor" href="#用tvmc运行模型">#</a> 用 TVMC 运行模型</h2>
<p>为了对模型进行有效输入 要将预备的输入进行一些预处理.TVM 采用.npz 格式文件作为模型输入和输出，这是一个受良好支持的 Numpy 文件格式。</p>
<p>这里文章用一个 python 脚本预处理了猫猫图片（具体见原文），得到了一个 imagenet_cat.npz。</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>tvmc run <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token parameter variable">--inputs</span> imagenet_cat.npz <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token parameter variable">--output</span> predictions.npz <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre>resnet50-v2-7-tvm.tar</pre></td></tr></table></figure><p>同样，这个文件也不是人能看懂的，原文提供了一个后处理脚本，把这个文件转化为人能看懂的结果。（见原文）</p>
<p>结果如下：</p>
<blockquote>
<h4 id="classn02123045-tabby-tabby-cat-with-probability0610553"><a class="anchor" href="#classn02123045-tabby-tabby-cat-with-probability0610553">#</a> class='n02123045 tabby, tabby cat' with probability=0.610553</h4>
<h4 id="classn02123159-tiger-cat-with-probability0367179"><a class="anchor" href="#classn02123159-tiger-cat-with-probability0367179">#</a> class='n02123159 tiger cat' with probability=0.367179</h4>
<h4 id="classn02124075-egyptian-cat-with-probability0019365"><a class="anchor" href="#classn02124075-egyptian-cat-with-probability0019365">#</a> class='n02124075 Egyptian cat' with probability=0.019365</h4>
<h4 id="classn02129604-tiger-panthera-tigris-with-probability0001273"><a class="anchor" href="#classn02129604-tiger-panthera-tigris-with-probability0001273">#</a> class='n02129604 tiger, Panthera tigris' with probability=0.001273</h4>
<h4 id="classn04040759-radiator-with-probability0000261"><a class="anchor" href="#classn04040759-radiator-with-probability0000261">#</a> class='n04040759 radiator' with probability=0.000261</h4>
</blockquote>
<h2 id="自动调优模型"><a class="anchor" href="#自动调优模型">#</a> 自动调优模型</h2>
<p>TVM 的调优是根据具体硬件对模型进行优化，使其在给定目标上运行的更快。调优不会影响预测准确性，只会影响性能！</p>
<p>演示：</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>tvmc tune <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token parameter variable">--target</span> <span class="token string">"llvm"</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token parameter variable">--output</span> resnet50-v2-7-autotuner_records.json <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre>resnet50-v2-7.onnx</pre></td></tr></table></figure><p>如果为 ——target 指定一个更具体的目标能得到更好的结果，如在 i7 处理器上使用 --target llvm-mcpu=skylake</p>
<p>TVMC 将对模型的参数空间进行搜索，尝试不同的算子配置，并选择在您的平台上运行最快的配置。虽然这是一个基于 CPU 和模型运算的引导搜索，但仍然需要几个小时才能完成搜索。此搜索的输出将保存到 resnet50-v2-7-autotuner_records.json 文件中，稍后将用于编译一个优化的模型。</p>
<h2 id="使用调优数据编译优化模型"><a class="anchor" href="#使用调优数据编译优化模型">#</a> 使用调优数据编译优化模型</h2>
<p>编译器将使用调优结果为指定的目标上的模型生成高性能代码。编译命令为 tvmc compile --tuning-records。现在已经收集了模型的调优数据，我们可以使用优化后的算子重新编译模型，以加快计算速度。</p>
<figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre>tvmc compile <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token parameter variable">--target</span> <span class="token string">"llvm"</span> <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="3"></td><td><pre>--tuning-records resnet50-v2-7-autotuner_records.json  <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token parameter variable">--output</span> resnet50-v2-7-tvm_autotuned.tar <span class="token punctuation">\</span></pre></td></tr><tr><td data-num="5"></td><td><pre>resnet50-v2-7.onnx</pre></td></tr></table></figure><p>与之前作对比，重复 100 此次。平均性能快 47%。</p>
<h2 id="getting-starting-using-tvmc-python-a-high-level-api-for-tvm"><a class="anchor" href="#getting-starting-using-tvmc-python-a-high-level-api-for-tvm">#</a> Getting Starting using TVMC Python: a high-level API for TVM</h2>
<p>原文链接： [Getting Starting using TVMC Python: a high-level API for TVM](<span class="exturl" data-url="aHR0cHM6Ly90dm0uYXBhY2hlLm9yZy9kb2NzL3R1dG9yaWFsL3R2bWNfcHl0aG9uLmh0bWw=">Getting Starting using TVMC Python: a high-level API for TVM — tvm 0.11.dev0 documentation (apache.org)</span>)</p>
<p>日期：3/2</p>
<p>这章主要讲的是在 python 文件中怎么使用 tvmc。</p>
<ul>
<li>导入：  <code>from tvm.driver import tvmc</code></li>
<li>把模型转化为 Relay 表示： <code>model = tvmc.load('my_model.onnx')</code></li>
<li>编译： <code>package = tvmc.compile(model, target=&quot;llvm&quot;)</code></li>
<li>运行： <code>result = tvmc.run(package, device=&quot;cpu&quot;)</code></li>
</ul>
<p>可以加入第 1.5 步：调优</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>tvmc<span class="token punctuation">.</span>tune<span class="token punctuation">(</span>model<span class="token punctuation">,</span> target<span class="token operator">=</span><span class="token string">"llvm"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>tvmc<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> target<span class="token operator">=</span><span class="token string">"llvm"</span><span class="token punctuation">,</span> tuning_records <span class="token operator">=</span> <span class="token string">"records.log"</span><span class="token punctuation">)</span> <span class="token comment"># records.log 获取见下文如何保存调优结果</span></pre></td></tr></table></figure><h2 id="附加功能"><a class="anchor" href="#附加功能">#</a> 附加功能</h2>
<p>可以在每一步都把中间结果保存下来。比如保存模型：在第一步后面  <code>model.save(desired_model_path)</code></p>
<p>还能保存 package, 调优结果等</p>
]]></content>
      <categories>
        <category>TVM</category>
      </categories>
      <tags>
        <tag>TVM 深度学习 机器学习 编译</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理01-词法分析</title>
    <url>/2023/03/09/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%8601-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="编译原理01-词法分析"><a class="anchor" href="#编译原理01-词法分析">#</a> 编译原理 01 - 词法分析</h1>
<p>词法分析： 输入（程序文本 / 字符串 s）--&gt; 输出（词法单元流）</p>
<p><span id="more"></span></p>
<p><img data-src="image-20230309110603730.png" alt="image-20230309110603730"></p>
<h2 id="词法分析器的三种设计方法由易到难"><a class="anchor" href="#词法分析器的三种设计方法由易到难">#</a> 词法分析器的三种设计方法（由易到难）</h2>
<ol>
<li>词法分析器生成器（如 ANTLR）</li>
<li>手写词法分析器</li>
<li>自动化词法分析器 (自己实现一个词法分析器生成器)</li>
</ol>
<p>生产环境下的编译器（如 gcc）通常选择手写词法分析器</p>
<h2 id="antrl的使用"><a class="anchor" href="#antrl的使用">#</a> antrl 的使用</h2>
<p>输入： 词法单元的规约 -<strong>SimpleExpr.g4</strong></p>
<p>输出：词法分析器 -  <strong>SimpleExprLexer.java</strong></p>
<p>​				SimpleExprLexer.java 编译后 接受输入文件 并输出 token 流</p>
<h2 id="g4文件的结构"><a class="anchor" href="#g4文件的结构">#</a> .g4 文件的结构</h2>
<p>第一行： <code>grammar SimpleExpr ;</code>  给接下来的文法起个名字 名字要与文件名一致</p>
<p>​					** 如果文件里只包含词法部分 用 lexer grammar SysYLexer **</p>
<p>​					 每一行都要以分号结尾</p>
<p>@header {} 括号里的东西会自动拷贝到到 java 文件中</p>
<p>语法规则见下面示例</p>
<p>SimpleExpr.g4:</p>
<pre><code class="language-Antlr">grammar SimpleExpr;

import SimpleExprRules;

@header&#123;
package simpleexpr;
&#125;

prog : stat* EOF ;

stat : expr ';'
     | ID '=' expr ';'
     | 'if' expr ';'
     ;

expr : expr ('*' | '/') expr
     | expr ('+' | '-') expr
     | '(' expr ')'
     | ID
     | INT
     | FLOAT
     ;
    // 到这里描述的其实还是语法结构
</code></pre>
<p>SimpleExprRules.g4:</p>
<pre><code class="language-Antlr">lexer grammar SimpleExprRules;

SEMI : ';' ;
ASSIGN : '=' ;
IF : 'if' ;
MUL : '*' ;
DIV : '/' ;
ADD : '+' ;
SUB : '-' ;
LPAREN : '(' ;
RPAREN : ')' ;

ID : (LETTER | '_') WORD* ;
INT : '0' | ([1-9] DIGIT*) ;
FLOAT : INT '.' DIGIT*
      | '.' DIGIT+
      ;

WS : [ \t\r\n]+ -&gt; skip ;

//SL_COMMENT : '//' .*? '\n' -&gt; skip ;
SL_COMMENT2 : '//' ~[\n]* '\n' -&gt; skip;
DOC_COMMENT : '/**' .*? '*/' -&gt; skip ;
ML_COMMENT : '/*' .*? '*/' -&gt; skip ;

fragment LETTER : [a-zA-Z] ;
fragment DIGIT : [0-9] ;
fragment WORD : LETTER | DIGIT | '_' ;
//以上才是真正的词法部分

</code></pre>
<h2 id="用编程方式使用antlr-4-生成的xxxlexerjava"><a class="anchor" href="#用编程方式使用antlr-4-生成的xxxlexerjava">#</a> 用编程方式使用 ANTLR 4 生成的 xxxlexer.java</h2>
<pre><code>package simpleexpr;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.ParseTree;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

public class SimpleExprTest &#123;
  public static void main(String[] args) throws IOException &#123;
    System.out.println(&quot;SimpleExprTest ...&quot;);

    InputStream is = System.in;

    String file;
    if (args.length &gt; 0) &#123;
      file = args[0];
      is = new FileInputStream(file);
    &#125;

    CharStream input = CharStreams.fromStream(is);
    //SimpleExprLexer 是.g4文件生成的java类 input必须是CharStream格式
    SimpleExprLexer lexer = new SimpleExprLexer(input);
	
    lexer.getAllTokens().forEach(System.out::println);
  &#125;
&#125;

</code></pre>
<h2 id="正则表达式"><a class="anchor" href="#正则表达式">#</a> 正则表达式</h2>
<p>基本的知识就不记录了 记录一些重要的</p>
<ul>
<li>非贪婪匹配  <code>,*?</code></li>
<li>反向引用 要引用的用（）括起来，后面引用通过子表达式下标访问，如 \1，下标从 1 开始</li>
<li>look ahead ?&lt;= 符号，表示前面字符要满足 xxx，但不匹配 xxx</li>
<li>look back  ?= 符号，表示后面字符要满足 xxx，但不匹配 xxx</li>
</ul>
<h2 id="lab-1"><a class="anchor" href="#lab-1">#</a> lab 1</h2>
<p>编程一小时 配置环境一天的典型代表。</p>
<p>从 lab1 知道了以后应该恶补 ssh 远程连接 linux 命令行 makefile .gitignore 导入依赖 java 基本语法 IDEA 的使用......</p>
<h3 id="实验输入"><a class="anchor" href="#实验输入">#</a> 实验输入</h3>
<p>本次实验的输入是一个包含了 <code>SysY</code>  源代码的文件，你的程序需要接受一个文件名作为参数</p>
<h3 id="实验内容"><a class="anchor" href="#实验内容">#</a> 实验内容</h3>
<h3 id="part1-词法分析"><a class="anchor" href="#part1-词法分析">#</a> <span class="exturl" data-url="aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD1wYXJ0MS0lRTglQUYlOEQlRTYlQjMlOTUlRTUlODglODYlRTYlOUUlOTA=">Part1 词法分析</span></h3>
<ul>
<li>本次实验你需要完成一个词法分析器对使用 SysY 语言书写的源代码进行词法分析，要求如下
<ul>
<li>本次实验要求通过<strong>标准错误输出（stderr, 如 System.err 等）</strong>， 打印程序的 <strong>所有</strong> 运行结果。</li>
<li>当<strong>包含词法错误时</strong>：对于包含词法错误的文件，你需要打印<strong>所有</strong>错误信息，格式为： <code>Error type A at Line [lineNo]:[errorMessage]</code> ，其中 <code>lineNo</code>  为出错的 <code>token</code>  首个字符所在行的行号， <code>errorMessage</code>  可自行定义，本实验不做要求，只要冒号前的信息正确即可。</li>
<li>当<strong>不包含词法错误时</strong>：对于没有任何词法错误的文件，你需要打印所有识别到的 <code>Tokens</code>  信息，具体输出格式可以参见<strong>样例一</strong>。特别要求：输出时忽略所有注释，对十六进制和八进制数字常量输出 <code>token</code>  文本时需输出其十进制的值</li>
</ul>
</li>
</ul>
<h3 id="样例"><a class="anchor" href="#样例">#</a> 样例</h3>
<p>输入</p>
<pre><code class="language-SysY">int main() 
&#123;
   // line comment
   /* 
     block comment
   */
   int i = 0x1;
&#125;
</code></pre>
<p>输出</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token constant">INT</span> <span class="token keyword">int</span> at <span class="token class-name">Line</span> <span class="token number">1.</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token constant">IDENT</span> main at <span class="token class-name">Line</span> <span class="token number">1.</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token constant">L_PAREN</span> <span class="token punctuation">(</span> at <span class="token class-name">Line</span> <span class="token number">1.</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token constant">R_PAREN</span> <span class="token punctuation">)</span> at <span class="token class-name">Line</span> <span class="token number">1.</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token constant">L_BRACE</span> <span class="token punctuation">&#123;</span> at <span class="token class-name">Line</span> <span class="token number">2.</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token constant">INT</span> <span class="token keyword">int</span> at <span class="token class-name">Line</span> <span class="token number">7.</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token constant">IDENT</span> i at <span class="token class-name">Line</span> <span class="token number">7.</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token constant">ASSIGN</span> <span class="token operator">=</span> at <span class="token class-name">Line</span> <span class="token number">7.</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token constant">INTEGER_CONST</span> <span class="token number">1</span> at <span class="token class-name">Line</span> <span class="token number">7.</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token constant">SEMICOLON</span> <span class="token punctuation">;</span> at <span class="token class-name">Line</span> <span class="token number">7.</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token constant">R_BRACE</span> <span class="token punctuation">&#125;</span> at <span class="token class-name">Line</span> <span class="token number">8.</span></pre></td></tr></table></figure><p>解释：</p>
<p>每行输出一个 token 的信息，输出格式为</p>
<pre><code>[token类型] [token文本] at Line [此token首个字符所在行的行号].复制到剪贴板复制失败复制成功!
</code></pre>
<p><strong>输出时忽略所有注释，对十六进制和八进制数字常量输出 token 文本时需输出其十进制的值</strong></p>
<p>特别注意，遇到如 <code>int 2i = 08;</code>  这种输入时，请将 <code>2i</code>  识别为 <code>INTEGER_CONST</code>  和 <code>IDENT</code> ， <code>08</code>  识别为两个 <code>INTEGER_CONST</code> ，这种我们不认为是词法错误，这种错误将在后面的实验中处理</p>
<h3 id="样例二"><a class="anchor" href="#样例二">#</a> <span class="exturl" data-url="aHR0cDovLzQ3LjEyMi4zLjQwOjgwODEvIy8yMDIzL2xhYjEtbGV4ZXIvbGFiMS1sZXhlcj9pZD0lRTYlQTAlQjclRTQlQkUlOEIlRTQlQkElOEM=">样例二</span></h3>
<p>输入:</p>
<pre><code class="language-SysY">int main()&#123;
  int i = 1;
  int j = ~i;
&#125;复制到剪贴板复制失败复制成功!
</code></pre>
<p>输出：</p>
<pre><code>Error type A at Line 3: Mysterious character &quot;~&quot;.
</code></pre>
<h2 id="实验过程"><a class="anchor" href="#实验过程">#</a> 实验过程</h2>
<ul>
<li>
<p>第一个难题就是怎么在 windows 里的 IDEA 编程，但是运行和调试环境是虚拟机中的 ubuntu20.04+lab0 配置好的环境 想法就是用 IDEA 的 remote deployment 功能，在网上搜索教程后发现我的 IDEA 竟然没有这个功能，原因是我的是 community 版本，所以卸载了之前的 IDEA 装了专业版。然后 remote deployment 原理应该是使用 ssh 连接，虽然虚拟机时装在电脑里，但其实和与远程服务器相连原理是一样的。</p>
</li>
<li>
<p>然后编写.g4 文件比较顺利，生成了 SysYlexer.java 文件，但是在 main 函数中使用 SysYlexer 类也遇见了困难，首先是导入 antlr，IDEA 一直报错无法解析 symbol antlr，但是 lab0 中我应该是配好了 antlr 环境的，不知道为什么，所以还是用 IDEA 的 libraries 中导入了 antlr 才好</p>
</li>
<li>
<p>第三个难题就是删除 SysYLexer 中自带的 ErrorListeners, 使用自己编写的 errorlisteners，这里老师上课应该是没有讲的，所以也是无从下手。后面借助搜索引擎和 ChatGPT 学了很久才会。原理很简单，先放上自己实现的 myErrorListener 如下：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> myErrorListener <span class="token keyword">extends</span> <span class="token class-name">BaseErrorListener</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syntaxError</span><span class="token punctuation">(</span><span class="token class-name">Recognizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> recognizer<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>								<span class="token class-name">Object</span> offendingSymbol<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>								<span class="token keyword">int</span> line<span class="token punctuation">,</span> <span class="token keyword">int</span> charPositionInLine<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>								<span class="token class-name">String</span> msg<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>								<span class="token class-name">RecognitionException</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>			<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error type A at Line "</span><span class="token operator">+</span>line<span class="token operator">+</span><span class="token string">": "</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>			error <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>主要是重写了 syntaxError 这个函数，他里面的参数应该是报错相关的信息，这里只用到了 line（出错的行）和 msg（具体的报错信息），其它的是什么意思忘记了。应该是每出现一个错误就会调用一次 syntaxError 函数。</p>
</li>
<li>
<p>然后放一下 main 函数部分：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> error <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    	<span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>			<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input path is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>		<span class="token class-name">String</span> source <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>		<span class="token class-name">CharStream</span> input <span class="token operator">=</span> <span class="token class-name">CharStreams</span><span class="token punctuation">.</span><span class="token function">fromFileName</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>		<span class="token class-name">SysYLexer</span> sysYLexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysYLexer</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>		sysYLexer<span class="token punctuation">.</span><span class="token function">removeErrorListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>		sysYLexer<span class="token punctuation">.</span><span class="token function">addErrorListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">myErrorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Token</span><span class="token punctuation">></span></span> tokens <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Token</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> sysYLexer<span class="token punctuation">.</span><span class="token function">getAllTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>		<span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>			<span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>		<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rulenames <span class="token operator">=</span> sysYLexer<span class="token punctuation">.</span><span class="token function">getRuleNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Token</span> token <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>			<span class="token class-name">String</span> tokenType <span class="token operator">=</span> rulenames<span class="token punctuation">[</span>token<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>			<span class="token class-name">String</span> tokenText <span class="token operator">=</span> <span class="token function">toDemical</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>			<span class="token class-name">String</span> tokenLine <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">+</span>token<span class="token punctuation">.</span><span class="token function">getLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>			<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tokenType <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> tokenText <span class="token operator">+</span> <span class="token string">" at Line "</span><span class="token operator">+</span>tokenLine<span class="token operator">+</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> myErrorListener <span class="token keyword">extends</span> <span class="token class-name">BaseErrorListener</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syntaxError</span><span class="token punctuation">(</span><span class="token class-name">Recognizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> recognizer<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>								<span class="token class-name">Object</span> offendingSymbol<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>								<span class="token keyword">int</span> line<span class="token punctuation">,</span> <span class="token keyword">int</span> charPositionInLine<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="35"></td><td><pre>								<span class="token class-name">String</span> msg<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="36"></td><td><pre>								<span class="token class-name">RecognitionException</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>		<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>			<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error type A at Line "</span><span class="token operator">+</span>line<span class="token operator">+</span><span class="token string">": "</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>			error <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toDemical</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>		<span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"0[0-7]+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>			<span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"0[xX][0-9a-fA-F]+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>			<span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>			<span class="token keyword">return</span> text<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>		<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>	<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>反正做的时候除了文档里给的框架几乎每一行都想了很久。</p>
</li>
<li>
<p>代码写完后上传又有问题，可能是之前 make compile , make clean 太多次了，导致压缩包超过了 10M 的限制，后来参考助教给的<span class="exturl" data-url="aHR0cHM6Ly93d3cuaG9sbGlzY2h1YW5nLmNvbS9hcmNoaXZlcy8xNzA4">记一次删除 Git 记录中的大文件的过程 - HollisChuang's Blog</span> 按里面的步骤一步步做才完成上传，比较幸运的是一次就 AC 了。（至于为什么压缩包会那么大，我的理解是改动了太多次代码 make compile 了太多次，且每次 git 都会保存版本信息以便于回退，所以改动的所有版本其实都还在 git 保存的隐藏文件夹下的，所以整个目录就会变得很大了）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫学习</title>
    <url>/2023/01/25/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="python爬虫学习总结"><a class="anchor" href="#python爬虫学习总结">#</a> python 爬虫学习总结</h1>
<p>学习 python 爬虫的一些笔记</p>
<p><span id="more"></span></p>
<h2 id="requests模块"><a class="anchor" href="#requests模块">#</a> requests 模块</h2>
<p>requests 模块流程：</p>
<pre><code>1. 指定url
2. 发起请求 response = requests.get(url)
3. 获取数据 page_source = response.text()
4. 存储数据 文件操作/数据库操作
</code></pre>
<p>参数 tips：params 是用来发送查询字符串，而 data 是用来发送正文的。post 与 get 方法的特性是：这两种参数 post（）方法都可以用，get 方法只能发查询字符串，不能发送正文</p>
<p>text 返回字符串 content 返回二进制（爬取图片可用）  json 返回对象</p>
<p>分页爬取：</p>
<p>​	如果是 ajax，在检查、网络、xhr 中查看</p>
<p>​	如果是新链接，可以使用正则表达式匹配 url</p>
<p>如果是用 ajax 的包：要注意的：</p>
<ul>
<li>看请求方法 是 GET 还是 POST。。。</li>
<li>看响应头的 content-type 选择 reponse.text () 或 reponse.json ()</li>
<li>看负载中带的参数</li>
</ul>
<p>中文乱码问题（文件编码格式为 utf8 json.dump 时 ensure acill 选项关闭）</p>
<p>什么是 ajax? （根据用户行为重新渲染界面。 不修改 url 在检查 - 网络 - XHR 中查看具体信息）</p>
<h2 id="bs4-数据解析"><a class="anchor" href="#bs4-数据解析">#</a> bs4 数据解析</h2>
<p>bs4 数据解析的原理：</p>
<p>1. 实例化一个 BeautifulSoup 对象 并且将页面原码数据加载到该对象中</p>
<p>2. 通过调用 bs 对象中相关的属性或方法进行标签定位和数据提取</p>
<p>如何实例化 beautifulsoup 对象：</p>
<ol>
<li>
<p>将本地的 html 文档中的数据加载到该对象中</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span></pre></td></tr></table></figure></li>
<li>
<p>将互联网上获取的页面源码加载到该对象中</p>
<pre><code>page_text = response.text
soup = BeautifulSoup(page_text,'lxml')
</code></pre>
</li>
</ol>
<p>提供的用于数据解析的方法和属性：</p>
<p>soup.tagname 返回 html 中第一次出现的 tagname 标签</p>
<p>soup.find ('tagname') 等同于 soup.tagname</p>
<p>soup.find ('tagname', class = 'classname') 定义属性位置， class 可以替换为 id attr</p>
<p>soup.find_all ('tagname') 找到符合要求所有标签 返回列表</p>
<p>soup.select ('.tang')  参数为某种选择器（id class 标签），返回一个列表</p>
<p>soup.select ('.tang&gt; ul &gt; li &gt; a') 层级选择器，返回一个列表</p>
<p>soup.selest ('.tang&gt; ul a') &gt; 号表示一个层级，空格表示多个层级</p>
<p>怎么获取标签之间的文本数据：</p>
<p>使用	soup.a.text/string/get_text () 方法</p>
<pre><code>-   text/get_text(): 可以获取某一个标签中所有的文本内容（多套几层也能得到）
-   string：获取标签下直系的文本内容
</code></pre>
<p>怎么获取标签的属性值：</p>
<p><code>soup.select('tang &gt; ul &gt; li &gt; a')[0]['href']</code>  直接获得 a 标签中的 herf 属性值</p>
<h2 id="xpath解析"><a class="anchor" href="#xpath解析">#</a> xpath 解析</h2>
<p>xpath 解析： 最常用且最便捷高效的一种解析方式。</p>
<p>xpath 解析原理：</p>
<pre><code>1. 实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。
2. 调用etree对象中的xpath方法结合xpath表达式实现标签的定位和内容的捕获。
</code></pre>
<p>环境安装：</p>
<pre><code>- pip install lxml
</code></pre>
<p>如何实例化 etree 对象</p>
<p>​	from lxml import etree</p>
<ol>
<li>
<p>将本地的 html 文档中的源码数据加载到 etree 对象中：</p>
<p><code> etree.parse(filePath)</code></p>
</li>
<li>
<p>可以将从互联网上获取的源码数据加载到该对象中</p>
<p><code>etree.HTML('page_text')        -xpath('xpath表达式')</code></p>
</li>
</ol>
<p>/ 表示一个层级  // 表示多个层级</p>
<p>路径后加 [@ 属性名] 精确定位 如 <code>xx_list = tree.xpath('//div[@class='song']')</code></p>
<p>中括号内加数字代表取第几个（索引下标从 1 开始） <code>xx_list[0]</code></p>
<p>获取文本：定位后加 /text ()</p>
<h2 id="中文出现乱码常见的处理方法"><a class="anchor" href="#中文出现乱码常见的处理方法">#</a> 中文出现乱码常见的处理方法</h2>
<p>两种常见方法，一般能解决所有中文乱码问题</p>
<ol>
<li>
<p>对爬下来的整个数据改变编码：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span></pre></td></tr></table></figure></li>
<li>
<p>对出现问题的对象单独进行编码与解码</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span></pre></td></tr></table></figure></li>
</ol>
<h2 id="selenium模块"><a class="anchor" href="#selenium模块">#</a> selenium 模块</h2>
<h3 id="selenium模块与爬虫之间具有怎样的关联"><a class="anchor" href="#selenium模块与爬虫之间具有怎样的关联">#</a> selenium 模块与爬虫之间具有怎样的关联？</h3>
<ul>
<li>便捷的获取网站中动态加载的数据</li>
<li>便捷实现模拟登录</li>
</ul>
<h3 id="什么是selenium模块"><a class="anchor" href="#什么是selenium模块">#</a> 什么是 selenium 模块</h3>
<p>基于浏览器自动化的一个模块。 （编写代码让浏览器完成自动化操作）</p>
<h3 id="selenium使用流程"><a class="anchor" href="#selenium使用流程">#</a> selenium 使用流程：</h3>
<ul>
<li>环境安装：pip install selenium</li>
<li>下载一个浏览器的驱动程序</li>
<li>实例化一个浏览器对象</li>
</ul>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>edge<span class="token punctuation">.</span>service <span class="token keyword">import</span> Service</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 实例化一个浏览器对象 参数中的路径为浏览器驱动程序的路径（建议与程序在同一路径下）</span></pre></td></tr><tr><td data-num="4"></td><td><pre>service <span class="token operator">=</span> Service<span class="token punctuation">(</span>executable_path <span class="token operator">=</span> <span class="token string">'./edgedriver.exe'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Edge<span class="token punctuation">(</span>service <span class="token operator">=</span> service<span class="token punctuation">)</span></pre></td></tr></table></figure><ul>
<li>编写基于浏览器的代码</li>
</ul>
<h3 id="selenium常用函数"><a class="anchor" href="#selenium常用函数">#</a> selenium 常用函数</h3>
<ul>
<li>
<p>bro.get (url)  											让浏览器发起一个指定 url 对应请求</p>
</li>
<li>
<p>page_text = bro.page_source		  获取浏览器当前页面的页面源码数据</p>
</li>
<li>
<p>标签定位：使用 find_element 方法</p>
</li>
</ul>
<p>​	search_input = bro.find_element(By.[attrname], &quot;[attr]'s value&quot;)</p>
<ul>
<li>
<p>标签交互：</p>
<p>​	search_input.send_keys('xxx')</p>
</li>
<li>
<p>执行一组 js 代码</p>
<p>​	bro.execute_script('code...')</p>
</li>
<li>
<p>点击按钮：</p>
<p>​	btn.click()</p>
</li>
<li>
<p>后退 / 前进</p>
<p>​	bro.back()/forward()</p>
</li>
</ul>
<h3 id="selenium处理iframe"><a class="anchor" href="#selenium处理iframe">#</a> selenium 处理 iframe</h3>
<p>bro.switch_to.frame('frame_name')</p>
<h3 id="动作链项目暂时用不到"><a class="anchor" href="#动作链项目暂时用不到">#</a> 动作链 (项目暂时用不到)</h3>
<p>南大相关网站的登录还不需要滑块验证</p>
<p>碰到滑块验证的时候可能就需要用到了</p>
<h3 id="selenium实现模拟登录"><a class="anchor" href="#selenium实现模拟登录">#</a> selenium 实现模拟登录</h3>
<p>结合前面的基础知识 先点击账号密码登录按钮，找到账号输入框与密码输入框，</p>
<p>输入账号密码，点击登录按钮</p>
<h2 id="模拟登陆cookie操作"><a class="anchor" href="#模拟登陆cookie操作">#</a> 模拟登陆 cookie 操作</h2>
<h3 id="cookie有什么作用"><a class="anchor" href="#cookie有什么作用">#</a> cookie 有什么作用</h3>
<p>TCP/IP 协议是无状态的，因此通常的 get 请求 服务器端不知道你有没有处于登录状态</p>
<p>携带 cookie 值的 get 请求 能使服务器端知道你已经处于登录状态</p>
<h3 id="手动cookie不推荐"><a class="anchor" href="#手动cookie不推荐">#</a> 手动 cookie（不推荐）</h3>
<p>登录网站后通过抓包工具手动复制 cookie 值 将 cookie 值封装到 headers 中，写死在程序里</p>
<p>缺点：cookie 值一段时间后会过期</p>
<h3 id="自动处理"><a class="anchor" href="#自动处理">#</a> 自动处理</h3>
<p>cookie 值是如何产生的？既然 cookie 值能让服务器知道你已经处于登录状态，那么理所当然 cookie 值是登录时发送 post 请求后服务器端生成后发送给客户端的</p>
<p>session 会话对象：</p>
<p>作用：</p>
<ol>
<li>可以进行请求的发送</li>
<li>如果请求过程中产生了 cookie，则该 cookie 会被自动存储 / 携带在该 session 对象中</li>
</ol>
<p>使用：</p>
<ol>
<li>
<p>创建一个 session 对象 ：  <code>session = requests.Session()</code></p>
</li>
<li>
<p>使用 session 对象进行模拟登录 post 请求的发送 (cookie 就会被存储在 session 中)</p>
</li>
<li>
<p>session 对象对个人主页对应的 get 请求进行发送（携带了 cookie）</p>
</li>
</ol>
<p>如果登录找不到 post 请求或遇到问题导致获得不到 cookie：</p>
<p>​	适用 selenium 登录后 用下列方法直接取得 cookie:</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>c <span class="token operator">=</span> bro<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>bro<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 获取 cookie 中的 name 和 value, 转化成 requests 可以使⽤的形式</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> cookie <span class="token keyword">in</span> c<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    cookies<span class="token punctuation">[</span>cookie<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> cookie<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span></pre></td></tr></table></figure><p>然后就能用 cookies 了：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>detail_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="并行爬取异步爬虫"><a class="anchor" href="#并行爬取异步爬虫">#</a> 并行爬取（异步爬虫）</h2>
<p>原理：利用进程池实现并行爬取</p>
<p>使用方法：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 创建进程池</span></pre></td></tr><tr><td data-num="3"></td><td><pre>pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>function_name<span class="token punctuation">,</span> iterable<span class="token punctuation">[</span><span class="token punctuation">,</span>chunksize<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><strong>processes 参数设置注意</strong>：当进程数量大于 CPU 的内核数量时，等待运行的进程会等到其他进程运行完毕让出内核为止。因此，如果 CPU 是单核，就无法进行多进程并行。在使用多进程爬虫之前，我们需要先了解计算机 CPU 的核心数量。这里用到了 multiprocessing:</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> cpu_count</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>运行结果为 16。</p>
<p>使用 eg：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://xjh.haitou.cc/xa/after/page-&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="2"></td><td><pre>pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#get_xuanjing 为参数是一个 url 的爬虫函数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>get_xuanjiang<span class="token punctuation">,</span>urls<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭进程池，不再接受新的进程</span></pre></td></tr><tr><td data-num="6"></td><td><pre>pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 主进程阻塞等待子进程的退出</span></pre></td></tr></table></figure><h2 id="有关爬虫的一些问题"><a class="anchor" href="#有关爬虫的一些问题">#</a> 有关爬虫的一些问题：</h2>
<ul>
<li>
<p>爬下来的文本中带有 &amp; nbsp 在 html 中表示 no breaking space（不自动换行的空格）</p>
<p>此时可以采用 str.replace (u'\xa0', '') 来解决 str 为待处理字符串</p>
</li>
<li>
<p>requests 里.text 与 .content 方法的区别：</p>
<p>两者区别在于，content 中间存的是字节码，而 text 中存的是 Beautifulsoup 根据猜测的编码方式将 content 内容编码成字符串。</p>
<p>直接输出 content，会发现前面存在 b' 这样的标志，这是字节字符串的标志，而 text 是，没有前面的 b, 对于纯 ascii 码，这两个可以说一模一样，对于其他的文字，需要正确编码才能正常显示。大部分情况建议使用.text，因为显示的是汉字，但有时会显示乱码，这时需要用.content.decode ('utf-8')，中文常用 utf-8 和 GBK，GB2312 等。这样可以手工选择文字编码方式。</p>
<p>所以简而言之，.text 是现成的字符串，.content 还要编码，但是.text 不是所有时候显示都正常，这是就需要用.content 进行手动编码</p>
</li>
<li>
<p>两种常见方法，一般能解决所有中文乱码问题</p>
<ol>
<li>
<p>对爬下来的整个数据改变编码：</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span></pre></td></tr></table></figure></li>
<li>
<p>对出现问题的对象单独进行编码与解码</p>
<figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
