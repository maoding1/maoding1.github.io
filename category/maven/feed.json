{
    "version": "https://jsonfeed.org/version/1",
    "title": "MikeMao's blog • All posts by \"maven\" category",
    "description": "a student of NJU who use this website to record learning experience",
    "home_page_url": "https://example.com",
    "items": [
        {
            "id": "https://example.com/2022/10/23/Maven-%E5%AD%A6%E4%B9%A0/",
            "url": "https://example.com/2022/10/23/Maven-%E5%AD%A6%E4%B9%A0/",
            "title": "Maven 学习",
            "date_published": "2022-10-23T13:44:54.000Z",
            "content_html": "<h1 id><a class=\"anchor\" href=\"#\">#</a> </h1>\n<h1 id=\"maven-学习\"><a class=\"anchor\" href=\"#maven-学习\">#</a> Maven  学习</h1>\n<p><span id=\"more\"></span></p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img data-src=\"rebecca.jpg\" alt=\"芝士rebecca\"></p>\n<h2 id=\"maven简介\"><a class=\"anchor\" href=\"#maven简介\">#</a> Maven 简介</h2>\n<p>Maven 是 Apache 组织下一个比较著名的开源项目，主要服务于基于 java 平台的项目构建，依赖管理和项目信息管理。</p>\n<p>类比做糖醋排骨，传统需要自己配置酱料，比如加入多少克糖，多少克水，多少克... 而现在只用去超市购买酱料包就好。Maven 项目省去了开发者去各大网站下载 jar 包并解决相互间复杂依赖关系的时间。除此之外，除了编写源代码，我们有相当一部分时间花在了编译，运行单元测试，生成文档，打包和部署等工作上，这就是构建。手工做这些工作的成本太高了，于是可以用软件的方法让这一系列工作完全自动化，使得繁琐的步骤能够自动完成，很快得到最终结果。</p>\n<h3 id=\"项目构建工具\"><a class=\"anchor\" href=\"#项目构建工具\">#</a> 项目构建工具</h3>\n<p>Ant 构建： 2000 年左右出现的构建工具，当时是最流行的 java 构建工具，不过它的 XML 脚本编写格式让 XML 文件特别大。对工程构建过程中的过程控制特别好。</p>\n<p>Maven 构建：项目对象模型，通过其描述信息来管理项目的构建，报告和文档的软件项目管理工具，填补了 Ant 的缺点。Maven 第一次支持了从网络上下载的功能。Maven 专注的是依赖管理，使用 java 编写。</p>\n<p>Gradle：谷歌的御用 Android 管理工具</p>\n<p>Ant 比较老，目前 Maven 使用较多</p>\n<h2 id=\"maven的四大特性\"><a class=\"anchor\" href=\"#maven的四大特性\">#</a> Maven 的四大特性</h2>\n<h3 id=\"依赖管理系统\"><a class=\"anchor\" href=\"#依赖管理系统\">#</a> 依赖管理系统</h3>\n<p>Maven 为 java 世界引入了一个新的依赖管理系统 ——jar 包管理。jar 升级时修改配置文件即可。在 java 世界中，可以用 **<em>groupId</em> **   、<em><strong>artifactId</strong></em>   、<em><strong>version</strong></em> 组成的 Coordination（坐标）唯一标识一个依赖</p>\n<p>eg：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span> javax.servlet <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span> //当前Maven项目隶属的实际项目或公司名称（jar包所在仓库路径）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span> javax.servlet-api <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span> //定义实际项目中的一个Maven模块/项目名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span> 3.1.0 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span> //Maven项目当前所处的版本</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"多模块构建\"><a class=\"anchor\" href=\"#多模块构建\">#</a> 多模块构建</h3>\n<p>可以将一个项目分解为多个模块。</p>\n<p>在 Maven 中定义一个 parent POM 作为一组 module 的聚合 POM，在该 POM 中可以使用 &lt;modules&gt; 标签来定义一组子模块。parent POM 中的 build 配置和依赖配置都会继承给子 module。</p>\n<h3 id=\"一致的项目结构\"><a class=\"anchor\" href=\"#一致的项目结构\">#</a> 一致的项目结构</h3>\n<p>Maven 理念： Convension over configuration (约定大于配置)。其制定了一套项目目录结构作为标准的 java 项目结构，解决不同 IDE 带来的文件目录不一致问题。</p>\n<h3 id=\"一致的构建模型和插件机制\"><a class=\"anchor\" href=\"#一致的构建模型和插件机制\">#</a> 一致的构建模型和插件机制</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t......</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>引入插件</p>\n<h2 id=\"maven项目结构\"><a class=\"anchor\" href=\"#maven项目结构\">#</a> Maven 项目结构</h2>\n<pre><code>- src\n\t- main                   ：程序功能代码\n\t\t- Java               ：java代码\n\t\t- resource           ：资源代码、配置代码\n\t- test                   ：测试代码\n\t\t- Java               ：单元测试java代码\n\t\t- resource           ：资源代码、配置代码\n\t- pom.xml                ：项目对象模型\n\n</code></pre>\n<p>不用 IDE 的话上述结构都需要手动创建</p>\n<p>pom 中的标签具体作用可以参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9tYXZlbi9tYXZlbi1wb20uaHRtbA==\">https://www.runoob.com/maven/maven-pom.html</span></p>\n<h2 id=\"在idea中使用maven\"><a class=\"anchor\" href=\"#在idea中使用maven\">#</a> 在 IDEA 中使用 Maven</h2>\n<p>IDEA 中默认捆绑了 Maven 可以在设置里更改 Maven 有关的配置</p>\n<p>创建 Maven 项目：文件 -&gt; 新建 -&gt; 项目 构建系统选 Maven（上述是常规 Maven 项目）</p>\n<p>​\t\t\t\t\t\t\t\t\t\t可以选择生成器中的 Maven 中的 Archetype 选择模板（如 quickstart）</p>\n<h2 id=\"maven仓库\"><a class=\"anchor\" href=\"#maven仓库\">#</a> Maven 仓库</h2>\n<p>对于 Maven 来说，仓库只有两类： 本地仓库和远程仓库</p>\n<p>Maven 根据坐标寻找构件的时候，它首先会查看本地仓库，如果本地仓库存在，则直接使用；如果本地没有，Maven 就回去远程仓库查找，再下载到本地仓库再使用。如果本地和远程都没有就会报错。</p>\n<p>远程仓库分为 3 种：</p>\n<ol>\n<li>\n<p>中央仓库：默认下载 jar 包的地方，在国外，包含了 2000 多个开源项目，每天接收 1 亿次以上的访问。</p>\n</li>\n<li>\n<p>私服：一种特殊的远程仓库，它是架设在局域网内的仓库服务。私服代理广域网上的远程仓库，供局域网内的 Maven 用户使用。当 Maven 需要下载构件时，它去私服当中找，如果私服没有，则从外部远程仓库下载，并缓存在私服上，再为 maven 提供。此外，一些无法从外部仓库下载的构件也能从本地上传到私服提供局域网中其他人使用。（在公司或学校内网中自己写的构件就可以上传到私服让别人使用了） 私服优点： 节省自己的外网带宽、 加速 Maven 构建、部署第三方控件、提高稳定性、降低中央仓库的负荷</p>\n</li>\n<li>\n<p>其他公共库</p>\n<p>如阿里云仓库，国内地址下载比中央仓库快。</p>\n</li>\n</ol>\n",
            "tags": [
                "Maven"
            ]
        }
    ]
}