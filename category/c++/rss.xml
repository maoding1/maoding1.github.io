<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>MikeMao&#39;s blog • Posts by &#34;c++&#34; category</title>
        <link>http://example.com</link>
        <description>a student of NJU who use this website to record learning experience</description>
        <language>zh-CN</language>
        <pubDate>Sun, 28 Jul 2024 17:38:31 +0800</pubDate>
        <lastBuildDate>Sun, 28 Jul 2024 17:38:31 +0800</lastBuildDate>
        <category>C++ 读书笔记</category>
        <category>C++</category>
        <category>git</category>
        <category>Maven</category>
        <category>Linux</category>
        <category>STL C++</category>
        <category>go语言</category>
        <category>python 爬虫 计算机网络</category>
        <category>python 爬虫</category>
        <category>python</category>
        <category>爬虫</category>
        <category>docker</category>
        <category>分布式</category>
        <category>数理逻辑</category>
        <category>TVM 深度学习 机器学习 编译</category>
        <category>编译原理</category>
        <item>
            <guid isPermalink="true">http://example.com/2024/07/28/Effective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
            <title>Effective C++读书笔记</title>
            <link>http://example.com/2024/07/28/Effective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
            <category>C++ 读书笔记</category>
            <pubDate>Sun, 28 Jul 2024 17:38:31 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;C++ 是我最喜欢的一门语言，C++ programer 一直为其拥有的非同寻常的能力范围和表现力而自豪（当然如果能正确使用的话）。正如 Scott Meyers, 本书作者所言：学习一种编程语言的基础是一回事；学习如何用那种语言设计和实现高效率的程序完全是另外一回事。断断续续学习了两年的 C++ programing language, 我的追求从学会语言基础，逐渐变为追求更加高效，并同时具备高可扩展性和可维护性的编程。&lt;/p&gt;
&lt;p&gt;Effetive C++ 是一本主要面向 C++  03 标准及之前的 C++ 编程过程中的一些编程 guidelines 的，自 C++  11 以来，C++ 不断推陈出新，关于一些场景作者提出的解决方案也许有了更好的替代方案。但作为一切的基础，以及一系列书目的开山之作（more Efective C++, Effective Modern C++)，此书仍然被许多人认为是 CPP programer 进阶的必看书目。此读书笔记仅供我自己查阅，提供简单的总结与感想，以从作者引人入胜但对于已经认真体会的读者而言无益的行文中走出 (TLDR)。并对书中的一些问题尝试使用 C++ 11 后的新特性解决。&lt;/p&gt;
&lt;p&gt;我不想成为一个语言学家，阅读之后还需要更多的编程练习来巩固所学习的知识。&lt;/p&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;item1-将c视为-federation-of-languages语言联合体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#item1-将c视为-federation-of-languages语言联合体&#34;&gt;#&lt;/a&gt; item1 将 C++ 视为 federation of languages (语言联合体)&lt;/h3&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;p&gt;将 C++ 从一门编程语言看作四门互相联系但有各自主体思想的子语言的结合体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C: 包括 built-in 数据结构，流程控制语句等，提供语法基础。&lt;/li&gt;
&lt;li&gt;Object-Oriented C++：C++ 的面向对象部分，主要设计封装继承多态这三个方面&lt;/li&gt;
&lt;li&gt;Template C++：泛型编程部分，对多数程序员少用但及其强大的 C++ 语言部分，提供包括 TMP (模板元编程) 这样的黑魔法。&lt;/li&gt;
&lt;li&gt;STL：containers,iterators,algorithms,functions objects... 方便地使用大佬们提供的编程工具，优化编程体验，不用像 C 那样 array simulate everything 了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一种子语言都有一套自己常用的编程理念，在不同的子语言下编程时，可能会要从不同的规则中进行转换（比如传值的方式）。&lt;/p&gt;
&lt;h3 id=&#34;item2-用consts-enums和inlines-取代defines&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#item2-用consts-enums和inlines-取代defines&#34;&gt;#&lt;/a&gt; item2 用 consts, enums, 和 inlines 取代 #defines&lt;/h3&gt;
&lt;h4 id=&#34;总结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结-2&#34;&gt;#&lt;/a&gt; 总结&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;#defines 无法提供包括作用域控制，类型检查等功能，因此能避免就避免。一般只在控制编译逻辑的时候配合 #ifdef/#ifndef 使用，比如根据某些宏修改一些 objects 的定义，而不要用在编程的逻辑中。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想使用 #defines 定义常量时 比如 &lt;code&gt;#define PI 3.1415926&lt;/code&gt; ，使用 const 替代，以获取更好的编译器报错体验与类型检查&lt;/li&gt;
&lt;li&gt;想使用 #defines 定义类属常量时，比如在类中定义 &lt;code&gt;static const int a = 5;&lt;/code&gt;  这里涉及到了类属常量的初始化问题，简要来说，一些编译器禁止 static integral class constants（静态整型族类属常量）的 in-class specification 而不得不在类外使用 &lt;code&gt;const int MyClass::a = 5;&lt;/code&gt;  这样的初始化方式。（ps： 都是很老的编译器了，在作者那个年代都算过时的了，gcc4.0.4 都可以在类中定义整型族常量）。对于静态非整型族类属常量，比如 &lt;code&gt;static const string s = &amp;quot;hello&amp;quot;&lt;/code&gt; ，或者 &lt;code&gt;static const string s = nullptr&lt;/code&gt;  这样的语句是不允许出现在类的定义中的。你必须要在类外初始化。for example:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyClass&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; cst &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// allowed&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; string s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// static const string s = &#34;hello&#34;? not allowed&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; p &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// static const int* p = nullter? not allowed&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; string MyClass&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; MyClass&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;这个过程体现了 C++ 令人难以忍受的缺陷，对于很多东西，它具有很多的特例，并且你很难理解为什么，没有什么规则是通用的&lt;/strong&gt;。一个好消息是，C++ 17 后做出了补救 (又有新东西要记了)：&lt;/p&gt;
&lt;p&gt;according to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU2Mzg5Ny9ob3ctY2FuLXlvdS1kZWZpbmUtYS1zdGF0aWMtZGF0YS1tZW1iZXItb2YtdHlwZS1jb25zdC1zdGRzdHJpbmc=&#34;&gt;c++ - How can you define a static data member of type const std::string? - Stack Overflow&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;MyClass&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; cst &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constexpr&lt;/span&gt; std&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;string_view STRING &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;some useful string constant&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; p &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;想使用 #defines 定义函数时，使用 inline 的模版函数替代，以获取函数参数具有的参数类型检查功能，并且拥有不输于 defines 的性能。还有，在使用 defines 定义函数时，你不得不给参数加括号 😃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对了 忘了提 enums 了，这里作者使用了一个叫做 the enum hack 的技术，主要来源于一个 enumerated type（枚举类型）的值可以用在一个需要 ints 的地方。for example:&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GamePlayer&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; NumTurns &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;token comment&#34;&gt;// &#34;the enum hack&#34; - makes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                     &lt;span class=&#34;token comment&#34;&gt;// NumTurns a symbolic name for 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; scores&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;NumTurns&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// fine&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用这项技术，你可以禁止对 NumTurns 的取地址行为，第二个理由是，大量的代码在使用它（作为模版元编程的基本技术之一），所以最好还是认识一下。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</guid>
            <title>C++：移动语义与右值引用</title>
            <link>http://example.com/2022/11/14/C-%EF%BC%9A%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E4%B8%8E%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8/</link>
            <category>C++</category>
            <pubDate>Mon, 14 Nov 2022 16:08:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c的移动语义与右值引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c的移动语义与右值引用&#34;&gt;#&lt;/a&gt; C++ 的移动语义与右值引用&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;preview.jpg&#34; alt=&#34;Gaze&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;移动语义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移动语义&#34;&gt;#&lt;/a&gt; 移动语义&lt;/h2&gt;
&lt;h3 id=&#34;为何需要移动语义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为何需要移动语义&#34;&gt;#&lt;/a&gt; 为何需要移动语义&lt;/h3&gt;
&lt;p&gt;假设有如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; vstr;// build up a vector of 20000 strings,each of 1000 characters
vector&amp;lt;string&amp;gt; vstr_copy1(vstr);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了初始化 vstr_copy1 先调用 vector 的复制构造函数，使用 new 给 20000 个 string 对象分配内存，而每个 string 对象又调用 string 的复制构造函数，为 1000 个字符分配内存。这很浪费时间，但如果 vstr 与 vstr_copy1 都需要使用，这很难避免。&lt;/p&gt;
&lt;p&gt;可有时候这样不太妥当，例如 vstr 不再被使用时。例如如下定义的函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; allcaps(const vector&amp;lt;string&amp;gt; &amp;amp; vs)
&amp;#123;
    vector&amp;lt;string&amp;gt; temp;
    //让temp存储vs中string的大写版本的代码
    return temp;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;并这样使用它：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;string&amp;gt; vstr;
vector&amp;lt;string&amp;gt; vstr_copy1(vstr); //#1
vector&amp;lt;string&amp;gt; vstr_copy2(allcaps(vstr)); //#2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;allcaps () 创建了对象 temp，该对象管理着 20000000 个字符；语句二使用 vector 和 string 的复制构造函数创建了一个 temp 的副本，然后删除了 temp，做了大量无用功。如果编译器直接把 temp 对数据的所有权转让给 vstr_copy2，将会更好。&lt;/p&gt;
&lt;p&gt;实际上，我们可以把实际内容保留在原来地方，而之修改记录，这就是移动语义的本质，它避免了移动原始数据，而转为修改记录。&lt;/p&gt;
&lt;p&gt;要实现移动语义，需要采取某种方式，让编译器知道什么时候需要复制。这就是右值引用发挥作用的地方。可定义两个构造函数，其中一个是常规复制构造函数，它使用 const 左值引用作为参数，如语句 #1。另一个是移动构造函数，它使用右值引用作为参数，该引用关联到右值实参，如语句 #2 中 allcaps (vstr) 的返回值。移动构造函数可能修改其实参，这意味着右值引用参数不应是 const。&lt;/p&gt;
&lt;h3 id=&#34;如何使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用&#34;&gt;#&lt;/a&gt; 如何使用&lt;/h3&gt;
&lt;p&gt;直接将变量的值赋值为参数的变量值，如果变量为指针，为了防止 double free，还需将参数的指针改为 nullptr。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Useless(Useless &amp;amp;&amp;amp; f) : n(f.n)
&amp;#123;
	++ct;
	pc = f.pc;
	f.pc = nullptr;
	f.n = 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;强制移动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#强制移动&#34;&gt;#&lt;/a&gt; 强制移动&lt;/h3&gt;
&lt;p&gt;移动构造函数和移动赋值运算符使用右值，如果要让它们使用左值，该怎么办？例如，将一个左值变量赋值给一个对象，并立刻丢弃这个变量。此时可以使用头文件 utility 中声明的函数 std::move。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/05/STL%E5%AD%A6%E4%B9%A0-01-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8Evector/</guid>
            <title>STL学习-01-智能指针与vector</title>
            <link>http://example.com/2022/10/05/STL%E5%AD%A6%E4%B9%A0-01-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%B8%8Evector/</link>
            <category>STL C++</category>
            <pubDate>Wed, 05 Oct 2022 19:54:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c-的标准模板库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c-的标准模板库&#34;&gt;#&lt;/a&gt; c++ 的标准模板库&lt;/h1&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E9%9B%A8%E5%A4%A9-%E5%A5%B3%E5%AD%A9-%E5%95%86%E5%BA%97.jpg&#34; alt=&#34;雨天 女孩 商店&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;智能指针模板类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#智能指针模板类&#34;&gt;#&lt;/a&gt; 智能指针模板类&lt;/h2&gt;
&lt;p&gt;智能指针是类似于指针的类对象，比较方便内存管理。传统的指针必须时时刻刻记得 new 与 delete 的配套使用，很容易造成内存泄漏。而智能指针实际上类似于一个类，有自己的析构函数，所以编译器再不需要智能指针时便可以自动调用其析构函数释放内存，也就是可以略去 delete 操作。&lt;/p&gt;
&lt;h3 id=&#34;使用智能指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用智能指针&#34;&gt;#&lt;/a&gt; 使用智能指针&lt;/h3&gt;
&lt;p&gt;要创建智能指针对象，必须包含头文件 memory 然后使用通常的模板语法来实例化所需类型的指针。&lt;/p&gt;
&lt;p&gt;声明：  &lt;code&gt; template &amp;lt;class X&amp;gt; class auto_ptr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 eg：  &lt;code&gt; auto_ptr&amp;lt;double&amp;gt; pd(new double);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​					  &lt;code&gt;auto_ptr&amp;lt;string&amp;gt; ps(new string);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意： 智能指针模板位于名称空间 std 中。&lt;/p&gt;
&lt;h3 id=&#34;有关智能指针的注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有关智能指针的注意事项&#34;&gt;#&lt;/a&gt; 有关智能指针的注意事项&lt;/h3&gt;
&lt;p&gt;c++ 目前有三种常见智能指针：auto_ptr, unique_ptr,shared_ptr&lt;/p&gt;
&lt;p&gt;在使用智能指针时，可能会遇到问题，比如如果两个智能指针指向同一块内存区域，则程序会删除同一个对象两次，这是会造成极大错误的。为避免这种问题，方法有多种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立所有权概念，对于特定对象，只有一个智能指针可以拥有他。 这是用于 auto_ptr 和 unique_ptr 的策略，但 unique_ptr 更严格&lt;/li&gt;
&lt;li&gt;创建智能更高的指针，跟踪引用特定对象的智能指针数，这称为引用计数。当最后一个指针过期时，才调用 delete。这是 shared_ptr 的策略&lt;/li&gt;
&lt;li&gt;执行深拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;auto_ptr 和 unique_ptr 的区别：&lt;/p&gt;
&lt;p&gt;​		两个 auto_ptr 指向同一块内存区域时，可以通过编译，但可能在运行时报错。两个 unique_ptr 指向同一块内存区域时，会在编译阶段就报错（除非赋值给其中一个 unique_ptr 的另一个 unique_ptr 是一个用完即毁的智能指针，如某一函数中 new 出来的 unique_ptr 的返回）。&lt;/p&gt;
&lt;h2 id=&#34;模板类vector&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模板类vector&#34;&gt;#&lt;/a&gt; 模板类 vector&lt;/h2&gt;
&lt;h3 id=&#34;创建vector&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建vector&#34;&gt;#&lt;/a&gt; 创建 vector&lt;/h3&gt;
&lt;p&gt;要创建 vector 模板对象， 可使用通常的 &amp;lt;type&amp;gt; 表示法来指出要使用的类型。另外，vector 模板使用动态内存分配，因此可以用初始化参数指出需要多少元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt; vector&amp;lt;int&amp;gt; ratings(5);  // a vector of 5 ints&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;可对vector执行的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可对vector执行的操作&#34;&gt;#&lt;/a&gt; 可对 vector 执行的操作&lt;/h3&gt;
&lt;p&gt;size ()—— 返回容器中元素数目        swap ()—— 交换两个容器的内容             begin ()—— 返回一个指向容器中第一个元素的 &lt;em&gt;&lt;strong&gt;迭代器&lt;/strong&gt;&lt;/em&gt;      end () 返回一个表示超过容器尾的&lt;em&gt;&lt;strong&gt;迭代器&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;什么是迭代器？ 它是一个广义的指针，可以对其执行类似指针的操作，如解除引用 *、递增 ++&lt;/p&gt;
&lt;p&gt;STL 的每个容器类都定义了一个合适的迭代器，该迭代器的类型是一个名为 iterator 的 typedef，作用域为整个类。如要为 vector 的 double 类型规范声明一个迭代器，可以这样做：&lt;/p&gt;
&lt;p&gt;​	 &lt;code&gt;vector&amp;lt;double&amp;gt;::iterator pd;//  pd an iterator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假设 scores 是一个 vector&amp;lt;double&amp;gt; 对象，可以利用好 auto 关键字简化书写：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auto pd = scores.begin()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;vector 还支持 push_back () (内存不够会自动扩充容器), erase () insert () 等方法&lt;/p&gt;
&lt;h3 id=&#34;其它操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其它操作&#34;&gt;#&lt;/a&gt; 其它操作&lt;/h3&gt;
&lt;p&gt;有两个具有代表性的 STL 函数：for_each () 和 sort () 。&lt;/p&gt;
&lt;p&gt;for_each () 函数可用于很多容器类，它接受 3 个参数。前两个是定义容器中的迭代器，最后一个是一个函数指针。for_each () 函数将被指向的函数应用于容器区间中的各个元素，可以用 for_each () 函数来代替 for 循环。&lt;/p&gt;
&lt;p&gt;eg:  &lt;code&gt;for_each(books.begin(), books.end(), ShowReview);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;sort () 函数也要求函数支持随机访问。该函数接收两个定义区间的迭代器参数。如果容器中的元素有内置的 &amp;lt; 运算符进行值比较，可以直接使用。如果容器中的元素是用户定义的类对象，则用户需要利用重载定义 &amp;lt; 运算符。&lt;/p&gt;
&lt;p&gt;还有第二个版本的 sort () 函数，它接收第三个参数，该参数是一个函数指针，不一定是用于比较的 operator&amp;lt;()，而是一个返回值可转换为 bool 类型的函数，它接收两个容器中的元素，返回为 false 表示两个参数的顺序不正确。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
